// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hu.proto

#include "hu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsoluteInputEvent_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AbsoluteInputEventWrapper_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioCofig_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ButtonInfo_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ButtonInfoWrapper_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ChannelDescriptor_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_BluetoothService_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_InputEventChannel_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_InputEventChannel_TouchScreenConfig_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_NavigationStatusService_ImageOptions_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_OutputStreamChannel_VideoConfig_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_PhoneStatusService_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_SensorChannel_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_SensorChannel_Sensor_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneStatus_Call_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeInputEvent_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelativeInputEventWrapper_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Accel_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_CompassData_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_DeadReckoning_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Diagnostics_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Door_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_DrivingStatus_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Environment_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_FuelLevel_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_GearData_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Gyro_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_HVAC_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Light_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_LocationData_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_NightMode_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_OdometerData_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_ParkingBreak_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Passenger_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_RPM_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_SpeedData_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TouchInfo_hu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TouchInfo_Location_hu_2eproto;
namespace HU {
class ButtonInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ButtonInfo> _instance;
} _ButtonInfo_default_instance_;
class ButtonInfoWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ButtonInfoWrapper> _instance;
} _ButtonInfoWrapper_default_instance_;
class TouchInfo_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TouchInfo_Location> _instance;
} _TouchInfo_Location_default_instance_;
class TouchInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TouchInfo> _instance;
} _TouchInfo_default_instance_;
class RelativeInputEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelativeInputEvent> _instance;
} _RelativeInputEvent_default_instance_;
class AbsoluteInputEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbsoluteInputEvent> _instance;
} _AbsoluteInputEvent_default_instance_;
class AbsoluteInputEventWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbsoluteInputEventWrapper> _instance;
} _AbsoluteInputEventWrapper_default_instance_;
class RelativeInputEventWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelativeInputEventWrapper> _instance;
} _RelativeInputEventWrapper_default_instance_;
class InputEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputEvent> _instance;
} _InputEvent_default_instance_;
class BindingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BindingRequest> _instance;
} _BindingRequest_default_instance_;
class BindingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BindingResponse> _instance;
} _BindingResponse_default_instance_;
class SensorEvent_LocationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_LocationData> _instance;
} _SensorEvent_LocationData_default_instance_;
class SensorEvent_NightModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_NightMode> _instance;
} _SensorEvent_NightMode_default_instance_;
class SensorEvent_RPMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_RPM> _instance;
} _SensorEvent_RPM_default_instance_;
class SensorEvent_FuelLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_FuelLevel> _instance;
} _SensorEvent_FuelLevel_default_instance_;
class SensorEvent_DrivingStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_DrivingStatus> _instance;
} _SensorEvent_DrivingStatus_default_instance_;
class SensorEvent_DeadReckoningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_DeadReckoning> _instance;
} _SensorEvent_DeadReckoning_default_instance_;
class SensorEvent_CompassDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_CompassData> _instance;
} _SensorEvent_CompassData_default_instance_;
class SensorEvent_SpeedDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_SpeedData> _instance;
} _SensorEvent_SpeedData_default_instance_;
class SensorEvent_OdometerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_OdometerData> _instance;
} _SensorEvent_OdometerData_default_instance_;
class SensorEvent_ParkingBreakDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_ParkingBreak> _instance;
} _SensorEvent_ParkingBreak_default_instance_;
class SensorEvent_PassengerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_Passenger> _instance;
} _SensorEvent_Passenger_default_instance_;
class SensorEvent_DiagnosticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_Diagnostics> _instance;
} _SensorEvent_Diagnostics_default_instance_;
class SensorEvent_EnvironmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_Environment> _instance;
} _SensorEvent_Environment_default_instance_;
class SensorEvent_HVACDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_HVAC> _instance;
} _SensorEvent_HVAC_default_instance_;
class SensorEvent_AccelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_Accel> _instance;
} _SensorEvent_Accel_default_instance_;
class SensorEvent_GyroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_Gyro> _instance;
} _SensorEvent_Gyro_default_instance_;
class SensorEvent_DoorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_Door> _instance;
} _SensorEvent_Door_default_instance_;
class SensorEvent_LightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_Light> _instance;
} _SensorEvent_Light_default_instance_;
class SensorEvent_GearDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent_GearData> _instance;
} _SensorEvent_GearData_default_instance_;
class SensorEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEvent> _instance;
} _SensorEvent_default_instance_;
class AudioCofigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioCofig> _instance;
} _AudioCofig_default_instance_;
class ChannelDescriptor_SensorChannel_SensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_SensorChannel_Sensor> _instance;
} _ChannelDescriptor_SensorChannel_Sensor_default_instance_;
class ChannelDescriptor_SensorChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_SensorChannel> _instance;
} _ChannelDescriptor_SensorChannel_default_instance_;
class ChannelDescriptor_OutputStreamChannel_VideoConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_OutputStreamChannel_VideoConfig> _instance;
} _ChannelDescriptor_OutputStreamChannel_VideoConfig_default_instance_;
class ChannelDescriptor_OutputStreamChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_OutputStreamChannel> _instance;
} _ChannelDescriptor_OutputStreamChannel_default_instance_;
class ChannelDescriptor_InputEventChannel_TouchScreenConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_InputEventChannel_TouchScreenConfig> _instance;
} _ChannelDescriptor_InputEventChannel_TouchScreenConfig_default_instance_;
class ChannelDescriptor_InputEventChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_InputEventChannel> _instance;
} _ChannelDescriptor_InputEventChannel_default_instance_;
class ChannelDescriptor_InputStreamChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_InputStreamChannel> _instance;
} _ChannelDescriptor_InputStreamChannel_default_instance_;
class ChannelDescriptor_BluetoothServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_BluetoothService> _instance;
} _ChannelDescriptor_BluetoothService_default_instance_;
class ChannelDescriptor_NavigationStatusService_ImageOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_NavigationStatusService_ImageOptions> _instance;
} _ChannelDescriptor_NavigationStatusService_ImageOptions_default_instance_;
class ChannelDescriptor_NavigationStatusServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_NavigationStatusService> _instance;
} _ChannelDescriptor_NavigationStatusService_default_instance_;
class ChannelDescriptor_PhoneStatusServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_PhoneStatusService> _instance;
} _ChannelDescriptor_PhoneStatusService_default_instance_;
class ChannelDescriptor_VendorExtensionServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_VendorExtensionService> _instance;
} _ChannelDescriptor_VendorExtensionService_default_instance_;
class ChannelDescriptor_GenericNotificationServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor_GenericNotificationService> _instance;
} _ChannelDescriptor_GenericNotificationService_default_instance_;
class ChannelDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelDescriptor> _instance;
} _ChannelDescriptor_default_instance_;
class ServiceDiscoveryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceDiscoveryRequest> _instance;
} _ServiceDiscoveryRequest_default_instance_;
class ServiceDiscoveryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceDiscoveryResponse> _instance;
} _ServiceDiscoveryResponse_default_instance_;
class ChannelOpenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelOpenRequest> _instance;
} _ChannelOpenRequest_default_instance_;
class ChannelOpenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelOpenResponse> _instance;
} _ChannelOpenResponse_default_instance_;
class PingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingRequest> _instance;
} _PingRequest_default_instance_;
class PingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingResponse> _instance;
} _PingResponse_default_instance_;
class ShutdownRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownRequest> _instance;
} _ShutdownRequest_default_instance_;
class ShutdownResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownResponse> _instance;
} _ShutdownResponse_default_instance_;
class MediaSetupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaSetupRequest> _instance;
} _MediaSetupRequest_default_instance_;
class MediaSetupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaSetupResponse> _instance;
} _MediaSetupResponse_default_instance_;
class MediaStopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaStopRequest> _instance;
} _MediaStopRequest_default_instance_;
class MediaStartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaStartRequest> _instance;
} _MediaStartRequest_default_instance_;
class MediaAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaAck> _instance;
} _MediaAck_default_instance_;
class MicRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MicRequest> _instance;
} _MicRequest_default_instance_;
class MicResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MicResponse> _instance;
} _MicResponse_default_instance_;
class VideoFocusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoFocusRequest> _instance;
} _VideoFocusRequest_default_instance_;
class VideoFocusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoFocus> _instance;
} _VideoFocus_default_instance_;
class SensorStartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorStartRequest> _instance;
} _SensorStartRequest_default_instance_;
class SensorStartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorStartResponse> _instance;
} _SensorStartResponse_default_instance_;
class NavigationFocusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationFocusRequest> _instance;
} _NavigationFocusRequest_default_instance_;
class NavigationFocusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationFocusResponse> _instance;
} _NavigationFocusResponse_default_instance_;
class VoiceSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoiceSessionRequest> _instance;
} _VoiceSessionRequest_default_instance_;
class AudioFocusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioFocusRequest> _instance;
} _AudioFocusRequest_default_instance_;
class AudioFocusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioFocusResponse> _instance;
} _AudioFocusResponse_default_instance_;
class AuthCompleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthCompleteResponse> _instance;
} _AuthCompleteResponse_default_instance_;
class PhoneStatus_CallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhoneStatus_Call> _instance;
} _PhoneStatus_Call_default_instance_;
class PhoneStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhoneStatus> _instance;
} _PhoneStatus_default_instance_;
class PhoneStatusInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhoneStatusInput> _instance;
} _PhoneStatusInput_default_instance_;
class GenericNotificationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericNotificationRequest> _instance;
} _GenericNotificationRequest_default_instance_;
class GenericNotificationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericNotificationResponse> _instance;
} _GenericNotificationResponse_default_instance_;
class StartGenericNotificationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartGenericNotifications> _instance;
} _StartGenericNotifications_default_instance_;
class StopGenericNotificationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopGenericNotifications> _instance;
} _StopGenericNotifications_default_instance_;
class BluetoothPairingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothPairingRequest> _instance;
} _BluetoothPairingRequest_default_instance_;
class BluetoothPairingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothPairingResponse> _instance;
} _BluetoothPairingResponse_default_instance_;
class BluetoothAuthDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothAuthData> _instance;
} _BluetoothAuthData_default_instance_;
class NAVMessagesStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NAVMessagesStatus> _instance;
} _NAVMessagesStatus_default_instance_;
class NAVTurnMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NAVTurnMessage> _instance;
} _NAVTurnMessage_default_instance_;
class NAVDistanceMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NAVDistanceMessage> _instance;
} _NAVDistanceMessage_default_instance_;
}  // namespace HU
static void InitDefaultsscc_info_AbsoluteInputEvent_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_AbsoluteInputEvent_default_instance_;
    new (ptr) ::HU::AbsoluteInputEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::AbsoluteInputEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsoluteInputEvent_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbsoluteInputEvent_hu_2eproto}, {}};

static void InitDefaultsscc_info_AbsoluteInputEventWrapper_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_AbsoluteInputEventWrapper_default_instance_;
    new (ptr) ::HU::AbsoluteInputEventWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::AbsoluteInputEventWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AbsoluteInputEventWrapper_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AbsoluteInputEventWrapper_hu_2eproto}, {
      &scc_info_AbsoluteInputEvent_hu_2eproto.base,}};

static void InitDefaultsscc_info_AudioCofig_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_AudioCofig_default_instance_;
    new (ptr) ::HU::AudioCofig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::AudioCofig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioCofig_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioCofig_hu_2eproto}, {}};

static void InitDefaultsscc_info_AudioFocusRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_AudioFocusRequest_default_instance_;
    new (ptr) ::HU::AudioFocusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::AudioFocusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFocusRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioFocusRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_AudioFocusResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_AudioFocusResponse_default_instance_;
    new (ptr) ::HU::AudioFocusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::AudioFocusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioFocusResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioFocusResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_AuthCompleteResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_AuthCompleteResponse_default_instance_;
    new (ptr) ::HU::AuthCompleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::AuthCompleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthCompleteResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthCompleteResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_BindingRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_BindingRequest_default_instance_;
    new (ptr) ::HU::BindingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::BindingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BindingRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BindingRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_BindingResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_BindingResponse_default_instance_;
    new (ptr) ::HU::BindingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::BindingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BindingResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BindingResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothAuthData_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_BluetoothAuthData_default_instance_;
    new (ptr) ::HU::BluetoothAuthData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::BluetoothAuthData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothAuthData_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BluetoothAuthData_hu_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothPairingRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_BluetoothPairingRequest_default_instance_;
    new (ptr) ::HU::BluetoothPairingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::BluetoothPairingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothPairingRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BluetoothPairingRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothPairingResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_BluetoothPairingResponse_default_instance_;
    new (ptr) ::HU::BluetoothPairingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::BluetoothPairingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothPairingResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BluetoothPairingResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_ButtonInfo_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ButtonInfo_default_instance_;
    new (ptr) ::HU::ButtonInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ButtonInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ButtonInfo_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ButtonInfo_hu_2eproto}, {}};

static void InitDefaultsscc_info_ButtonInfoWrapper_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ButtonInfoWrapper_default_instance_;
    new (ptr) ::HU::ButtonInfoWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ButtonInfoWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ButtonInfoWrapper_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ButtonInfoWrapper_hu_2eproto}, {
      &scc_info_ButtonInfo_hu_2eproto.base,}};

static void InitDefaultsscc_info_ChannelDescriptor_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_default_instance_;
    new (ptr) ::HU::ChannelDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ChannelDescriptor_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_ChannelDescriptor_hu_2eproto}, {
      &scc_info_ChannelDescriptor_SensorChannel_hu_2eproto.base,
      &scc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto.base,
      &scc_info_ChannelDescriptor_InputEventChannel_hu_2eproto.base,
      &scc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto.base,
      &scc_info_ChannelDescriptor_BluetoothService_hu_2eproto.base,
      &scc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto.base,
      &scc_info_ChannelDescriptor_PhoneStatusService_hu_2eproto.base,
      &scc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto.base,
      &scc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto.base,}};

static void InitDefaultsscc_info_ChannelDescriptor_BluetoothService_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_BluetoothService_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_BluetoothService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_BluetoothService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_BluetoothService_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_BluetoothService_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_GenericNotificationService_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_GenericNotificationService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_GenericNotificationService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelDescriptor_InputEventChannel_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_InputEventChannel_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_InputEventChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_InputEventChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_InputEventChannel_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelDescriptor_InputEventChannel_hu_2eproto}, {
      &scc_info_ChannelDescriptor_InputEventChannel_TouchScreenConfig_hu_2eproto.base,}};

static void InitDefaultsscc_info_ChannelDescriptor_InputEventChannel_TouchScreenConfig_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_InputEventChannel_TouchScreenConfig_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_InputEventChannel_TouchScreenConfig_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_InputEventChannel_TouchScreenConfig_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_InputStreamChannel_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_InputStreamChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_InputStreamChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto}, {
      &scc_info_AudioCofig_hu_2eproto.base,}};

static void InitDefaultsscc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_NavigationStatusService_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_NavigationStatusService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_NavigationStatusService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto}, {
      &scc_info_ChannelDescriptor_NavigationStatusService_ImageOptions_hu_2eproto.base,}};

static void InitDefaultsscc_info_ChannelDescriptor_NavigationStatusService_ImageOptions_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_NavigationStatusService_ImageOptions_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_NavigationStatusService_ImageOptions_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_NavigationStatusService_ImageOptions_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_OutputStreamChannel_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_OutputStreamChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_OutputStreamChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto}, {
      &scc_info_AudioCofig_hu_2eproto.base,
      &scc_info_ChannelDescriptor_OutputStreamChannel_VideoConfig_hu_2eproto.base,}};

static void InitDefaultsscc_info_ChannelDescriptor_OutputStreamChannel_VideoConfig_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_OutputStreamChannel_VideoConfig_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_OutputStreamChannel_VideoConfig_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_OutputStreamChannel_VideoConfig_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelDescriptor_PhoneStatusService_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_PhoneStatusService_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_PhoneStatusService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_PhoneStatusService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_PhoneStatusService_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_PhoneStatusService_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelDescriptor_SensorChannel_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_SensorChannel_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_SensorChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_SensorChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelDescriptor_SensorChannel_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelDescriptor_SensorChannel_hu_2eproto}, {
      &scc_info_ChannelDescriptor_SensorChannel_Sensor_hu_2eproto.base,}};

static void InitDefaultsscc_info_ChannelDescriptor_SensorChannel_Sensor_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_SensorChannel_Sensor_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_SensorChannel_Sensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_SensorChannel_Sensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_SensorChannel_Sensor_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_SensorChannel_Sensor_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelDescriptor_VendorExtensionService_default_instance_;
    new (ptr) ::HU::ChannelDescriptor_VendorExtensionService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelDescriptor_VendorExtensionService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelOpenRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelOpenRequest_default_instance_;
    new (ptr) ::HU::ChannelOpenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelOpenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelOpenRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelOpenRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_ChannelOpenResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ChannelOpenResponse_default_instance_;
    new (ptr) ::HU::ChannelOpenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ChannelOpenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelOpenResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelOpenResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_GenericNotificationRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_GenericNotificationRequest_default_instance_;
    new (ptr) ::HU::GenericNotificationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::GenericNotificationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericNotificationRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenericNotificationRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_GenericNotificationResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_GenericNotificationResponse_default_instance_;
    new (ptr) ::HU::GenericNotificationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::GenericNotificationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericNotificationResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenericNotificationResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_InputEvent_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_InputEvent_default_instance_;
    new (ptr) ::HU::InputEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::InputEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_InputEvent_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_InputEvent_hu_2eproto}, {
      &scc_info_TouchInfo_hu_2eproto.base,
      &scc_info_ButtonInfoWrapper_hu_2eproto.base,
      &scc_info_AbsoluteInputEventWrapper_hu_2eproto.base,
      &scc_info_RelativeInputEventWrapper_hu_2eproto.base,}};

static void InitDefaultsscc_info_MediaAck_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_MediaAck_default_instance_;
    new (ptr) ::HU::MediaAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::MediaAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaAck_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MediaAck_hu_2eproto}, {}};

static void InitDefaultsscc_info_MediaSetupRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_MediaSetupRequest_default_instance_;
    new (ptr) ::HU::MediaSetupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::MediaSetupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaSetupRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MediaSetupRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_MediaSetupResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_MediaSetupResponse_default_instance_;
    new (ptr) ::HU::MediaSetupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::MediaSetupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaSetupResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MediaSetupResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_MediaStartRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_MediaStartRequest_default_instance_;
    new (ptr) ::HU::MediaStartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::MediaStartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaStartRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MediaStartRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_MediaStopRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_MediaStopRequest_default_instance_;
    new (ptr) ::HU::MediaStopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::MediaStopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaStopRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MediaStopRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_MicRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_MicRequest_default_instance_;
    new (ptr) ::HU::MicRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::MicRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MicRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MicRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_MicResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_MicResponse_default_instance_;
    new (ptr) ::HU::MicResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::MicResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MicResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MicResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_NAVDistanceMessage_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_NAVDistanceMessage_default_instance_;
    new (ptr) ::HU::NAVDistanceMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::NAVDistanceMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NAVDistanceMessage_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NAVDistanceMessage_hu_2eproto}, {}};

static void InitDefaultsscc_info_NAVMessagesStatus_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_NAVMessagesStatus_default_instance_;
    new (ptr) ::HU::NAVMessagesStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::NAVMessagesStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NAVMessagesStatus_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NAVMessagesStatus_hu_2eproto}, {}};

static void InitDefaultsscc_info_NAVTurnMessage_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_NAVTurnMessage_default_instance_;
    new (ptr) ::HU::NAVTurnMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::NAVTurnMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NAVTurnMessage_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NAVTurnMessage_hu_2eproto}, {}};

static void InitDefaultsscc_info_NavigationFocusRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_NavigationFocusRequest_default_instance_;
    new (ptr) ::HU::NavigationFocusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::NavigationFocusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationFocusRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NavigationFocusRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_NavigationFocusResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_NavigationFocusResponse_default_instance_;
    new (ptr) ::HU::NavigationFocusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::NavigationFocusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationFocusResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NavigationFocusResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_PhoneStatus_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_PhoneStatus_default_instance_;
    new (ptr) ::HU::PhoneStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::PhoneStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PhoneStatus_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PhoneStatus_hu_2eproto}, {
      &scc_info_PhoneStatus_Call_hu_2eproto.base,}};

static void InitDefaultsscc_info_PhoneStatus_Call_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_PhoneStatus_Call_default_instance_;
    new (ptr) ::HU::PhoneStatus_Call();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::PhoneStatus_Call::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneStatus_Call_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhoneStatus_Call_hu_2eproto}, {}};

static void InitDefaultsscc_info_PhoneStatusInput_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_PhoneStatusInput_default_instance_;
    new (ptr) ::HU::PhoneStatusInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::PhoneStatusInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneStatusInput_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhoneStatusInput_hu_2eproto}, {}};

static void InitDefaultsscc_info_PingRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_PingRequest_default_instance_;
    new (ptr) ::HU::PingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::PingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PingRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_PingResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_PingResponse_default_instance_;
    new (ptr) ::HU::PingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::PingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PingResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_RelativeInputEvent_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_RelativeInputEvent_default_instance_;
    new (ptr) ::HU::RelativeInputEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::RelativeInputEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeInputEvent_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelativeInputEvent_hu_2eproto}, {}};

static void InitDefaultsscc_info_RelativeInputEventWrapper_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_RelativeInputEventWrapper_default_instance_;
    new (ptr) ::HU::RelativeInputEventWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::RelativeInputEventWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelativeInputEventWrapper_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelativeInputEventWrapper_hu_2eproto}, {
      &scc_info_RelativeInputEvent_hu_2eproto.base,}};

static void InitDefaultsscc_info_SensorEvent_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_default_instance_;
    new (ptr) ::HU::SensorEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_SensorEvent_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 19, 0, InitDefaultsscc_info_SensorEvent_hu_2eproto}, {
      &scc_info_SensorEvent_LocationData_hu_2eproto.base,
      &scc_info_SensorEvent_CompassData_hu_2eproto.base,
      &scc_info_SensorEvent_SpeedData_hu_2eproto.base,
      &scc_info_SensorEvent_RPM_hu_2eproto.base,
      &scc_info_SensorEvent_OdometerData_hu_2eproto.base,
      &scc_info_SensorEvent_FuelLevel_hu_2eproto.base,
      &scc_info_SensorEvent_ParkingBreak_hu_2eproto.base,
      &scc_info_SensorEvent_GearData_hu_2eproto.base,
      &scc_info_SensorEvent_Diagnostics_hu_2eproto.base,
      &scc_info_SensorEvent_NightMode_hu_2eproto.base,
      &scc_info_SensorEvent_Environment_hu_2eproto.base,
      &scc_info_SensorEvent_HVAC_hu_2eproto.base,
      &scc_info_SensorEvent_DrivingStatus_hu_2eproto.base,
      &scc_info_SensorEvent_DeadReckoning_hu_2eproto.base,
      &scc_info_SensorEvent_Passenger_hu_2eproto.base,
      &scc_info_SensorEvent_Door_hu_2eproto.base,
      &scc_info_SensorEvent_Light_hu_2eproto.base,
      &scc_info_SensorEvent_Accel_hu_2eproto.base,
      &scc_info_SensorEvent_Gyro_hu_2eproto.base,}};

static void InitDefaultsscc_info_SensorEvent_Accel_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_Accel_default_instance_;
    new (ptr) ::HU::SensorEvent_Accel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_Accel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Accel_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_Accel_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_CompassData_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_CompassData_default_instance_;
    new (ptr) ::HU::SensorEvent_CompassData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_CompassData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_CompassData_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_CompassData_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_DeadReckoning_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_DeadReckoning_default_instance_;
    new (ptr) ::HU::SensorEvent_DeadReckoning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_DeadReckoning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_DeadReckoning_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_DeadReckoning_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_Diagnostics_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_Diagnostics_default_instance_;
    new (ptr) ::HU::SensorEvent_Diagnostics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_Diagnostics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Diagnostics_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_Diagnostics_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_Door_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_Door_default_instance_;
    new (ptr) ::HU::SensorEvent_Door();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_Door::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Door_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_Door_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_DrivingStatus_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_DrivingStatus_default_instance_;
    new (ptr) ::HU::SensorEvent_DrivingStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_DrivingStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_DrivingStatus_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_DrivingStatus_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_Environment_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_Environment_default_instance_;
    new (ptr) ::HU::SensorEvent_Environment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_Environment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Environment_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_Environment_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_FuelLevel_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_FuelLevel_default_instance_;
    new (ptr) ::HU::SensorEvent_FuelLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_FuelLevel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_FuelLevel_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_FuelLevel_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_GearData_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_GearData_default_instance_;
    new (ptr) ::HU::SensorEvent_GearData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_GearData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_GearData_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_GearData_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_Gyro_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_Gyro_default_instance_;
    new (ptr) ::HU::SensorEvent_Gyro();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_Gyro::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Gyro_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_Gyro_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_HVAC_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_HVAC_default_instance_;
    new (ptr) ::HU::SensorEvent_HVAC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_HVAC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_HVAC_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_HVAC_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_Light_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_Light_default_instance_;
    new (ptr) ::HU::SensorEvent_Light();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_Light::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Light_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_Light_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_LocationData_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_LocationData_default_instance_;
    new (ptr) ::HU::SensorEvent_LocationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_LocationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_LocationData_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_LocationData_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_NightMode_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_NightMode_default_instance_;
    new (ptr) ::HU::SensorEvent_NightMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_NightMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_NightMode_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_NightMode_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_OdometerData_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_OdometerData_default_instance_;
    new (ptr) ::HU::SensorEvent_OdometerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_OdometerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_OdometerData_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_OdometerData_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_ParkingBreak_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_ParkingBreak_default_instance_;
    new (ptr) ::HU::SensorEvent_ParkingBreak();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_ParkingBreak::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_ParkingBreak_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_ParkingBreak_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_Passenger_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_Passenger_default_instance_;
    new (ptr) ::HU::SensorEvent_Passenger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_Passenger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_Passenger_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_Passenger_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_RPM_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_RPM_default_instance_;
    new (ptr) ::HU::SensorEvent_RPM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_RPM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_RPM_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_RPM_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorEvent_SpeedData_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorEvent_SpeedData_default_instance_;
    new (ptr) ::HU::SensorEvent_SpeedData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorEvent_SpeedData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEvent_SpeedData_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorEvent_SpeedData_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorStartRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorStartRequest_default_instance_;
    new (ptr) ::HU::SensorStartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorStartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorStartRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorStartRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_SensorStartResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_SensorStartResponse_default_instance_;
    new (ptr) ::HU::SensorStartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::SensorStartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorStartResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorStartResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_ServiceDiscoveryRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ServiceDiscoveryRequest_default_instance_;
    new (ptr) ::HU::ServiceDiscoveryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ServiceDiscoveryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceDiscoveryRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceDiscoveryRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_ServiceDiscoveryResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ServiceDiscoveryResponse_default_instance_;
    new (ptr) ::HU::ServiceDiscoveryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ServiceDiscoveryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceDiscoveryResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceDiscoveryResponse_hu_2eproto}, {
      &scc_info_ChannelDescriptor_hu_2eproto.base,}};

static void InitDefaultsscc_info_ShutdownRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ShutdownRequest_default_instance_;
    new (ptr) ::HU::ShutdownRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ShutdownRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutdownRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_ShutdownResponse_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_ShutdownResponse_default_instance_;
    new (ptr) ::HU::ShutdownResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::ShutdownResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownResponse_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutdownResponse_hu_2eproto}, {}};

static void InitDefaultsscc_info_StartGenericNotifications_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_StartGenericNotifications_default_instance_;
    new (ptr) ::HU::StartGenericNotifications();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::StartGenericNotifications::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartGenericNotifications_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartGenericNotifications_hu_2eproto}, {}};

static void InitDefaultsscc_info_StopGenericNotifications_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_StopGenericNotifications_default_instance_;
    new (ptr) ::HU::StopGenericNotifications();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::StopGenericNotifications::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopGenericNotifications_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopGenericNotifications_hu_2eproto}, {}};

static void InitDefaultsscc_info_TouchInfo_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_TouchInfo_default_instance_;
    new (ptr) ::HU::TouchInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::TouchInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TouchInfo_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TouchInfo_hu_2eproto}, {
      &scc_info_TouchInfo_Location_hu_2eproto.base,}};

static void InitDefaultsscc_info_TouchInfo_Location_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_TouchInfo_Location_default_instance_;
    new (ptr) ::HU::TouchInfo_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::TouchInfo_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TouchInfo_Location_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TouchInfo_Location_hu_2eproto}, {}};

static void InitDefaultsscc_info_VideoFocus_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_VideoFocus_default_instance_;
    new (ptr) ::HU::VideoFocus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::VideoFocus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFocus_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoFocus_hu_2eproto}, {}};

static void InitDefaultsscc_info_VideoFocusRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_VideoFocusRequest_default_instance_;
    new (ptr) ::HU::VideoFocusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::VideoFocusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFocusRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoFocusRequest_hu_2eproto}, {}};

static void InitDefaultsscc_info_VoiceSessionRequest_hu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HU::_VoiceSessionRequest_default_instance_;
    new (ptr) ::HU::VoiceSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HU::VoiceSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoiceSessionRequest_hu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoiceSessionRequest_hu_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hu_2eproto[84];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_hu_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfo, scan_code_),
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfo, is_pressed_),
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfo, meta_),
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfo, long_press_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfoWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ButtonInfoWrapper, button_),
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo_Location, x_),
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo_Location, y_),
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo_Location, pointer_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo, location_),
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo, action_index_),
  PROTOBUF_FIELD_OFFSET(::HU::TouchInfo, action_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::RelativeInputEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::RelativeInputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::RelativeInputEvent, scan_code_),
  PROTOBUF_FIELD_OFFSET(::HU::RelativeInputEvent, delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::AbsoluteInputEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::AbsoluteInputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::AbsoluteInputEvent, scan_code_),
  PROTOBUF_FIELD_OFFSET(::HU::AbsoluteInputEvent, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::AbsoluteInputEventWrapper, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::AbsoluteInputEventWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::AbsoluteInputEventWrapper, event_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::RelativeInputEventWrapper, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::RelativeInputEventWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::RelativeInputEventWrapper, event_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, disp_channel_),
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, touch_),
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, button_),
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, abs_event_),
  PROTOBUF_FIELD_OFFSET(::HU::InputEvent, rel_event_),
  4,
  5,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::BindingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::BindingRequest, scan_codes_),
  PROTOBUF_FIELD_OFFSET(::HU::BindingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::BindingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::BindingResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, latitude_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, longitude_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, accuracy_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, altitude_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, speed_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_LocationData, bearing_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_NightMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_NightMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_NightMode, is_night_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_RPM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_RPM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_RPM, rpm_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_FuelLevel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_FuelLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_FuelLevel, fuel_level_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_FuelLevel, range_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_FuelLevel, low_fuel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_DrivingStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_DrivingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_DrivingStatus, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_DeadReckoning, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_DeadReckoning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_DeadReckoning, steering_angel_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_DeadReckoning, wheel_speed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_CompassData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_CompassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_CompassData, bearing_e6_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_CompassData, pitch_e6_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_CompassData, roll_e6_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_SpeedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_SpeedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_SpeedData, speed_e6_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_SpeedData, cruise_engaged_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_SpeedData, cruise_set_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_OdometerData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_OdometerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_OdometerData, kms_el_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_OdometerData, trip_kms_el_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_ParkingBreak, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_ParkingBreak, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_ParkingBreak, parking_breake_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Passenger, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Passenger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Passenger, passenger_present_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Diagnostics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Diagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Diagnostics, diagnostics_byte_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Environment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Environment, temperature_e3_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Environment, pressure_e3_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Environment, rain_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_HVAC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_HVAC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_HVAC, target_temperature_e3_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_HVAC, current_temperature_e3_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Accel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Accel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Accel, acceleration_x_e3_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Accel, acceleration_y_e3_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Accel, acceleration_z_e3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Gyro, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Gyro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Gyro, rotation_speed_x_e3_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Gyro, rotation_speed_y_e3_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Gyro, rotation_speed_z_e3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Door, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Door, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Door, hood_open_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Door, boot_open_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Door, door_open_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Light, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Light, headlight_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Light, turn_indicator_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_Light, hazard_light_on_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_GearData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_GearData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent_GearData, gear_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, location_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, compass_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, speed_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, rpm_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, odometer_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, fuel_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, parkingbrake_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, gear_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, diagnostics_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, night_mode_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, enviorment_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, hvac_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, driving_status_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, dead_reckoning_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, passenger_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, door_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, light_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, accel_data_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorEvent, gyro_data_),
  PROTOBUF_FIELD_OFFSET(::HU::AudioCofig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::AudioCofig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::AudioCofig, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::HU::AudioCofig, bit_depth_),
  PROTOBUF_FIELD_OFFSET(::HU::AudioCofig, channel_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_SensorChannel_Sensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_SensorChannel_Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_SensorChannel_Sensor, type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_SensorChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_SensorChannel, sensor_list_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, resolution_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, margin_width_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, margin_height_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, dpi_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig, additional_depth_),
  4,
  5,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel, type_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel, audio_type_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel, audio_configs_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel, video_configs_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_OutputStreamChannel, available_while_in_call_),
  1,
  2,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig, width_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig, height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel, keycodes_supported_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel, touch_screen_config_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputEventChannel, touch_pad_config_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputStreamChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputStreamChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputStreamChannel, type_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputStreamChannel, audio_config_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_InputStreamChannel, available_while_in_call_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_BluetoothService, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_BluetoothService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_BluetoothService, car_address_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_BluetoothService, supported_pairing_methods_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService_ImageOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService_ImageOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService_ImageOptions, width_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService_ImageOptions, height_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService_ImageOptions, colour_depth_bits_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService, minimum_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService, type_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_NavigationStatusService, image_options_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_PhoneStatusService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_VendorExtensionService, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_VendorExtensionService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_VendorExtensionService, name_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_VendorExtensionService, package_white_list_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_VendorExtensionService, data_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_GenericNotificationService, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_GenericNotificationService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor_GenericNotificationService, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, channel_id_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, sensor_channel_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, output_stream_channel_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, input_event_channel_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, input_stream_channel_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, bluetooth_service_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, navigation_status_service_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, phone_status_service_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, vendor_extension_service_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelDescriptor, generic_notification_service_),
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryRequest, phone_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, head_unit_name_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, car_model_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, car_year_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, car_serial_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, driver_pos_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, headunit_make_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, headunit_model_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, sw_build_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, sw_version_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, can_play_native_media_during_vr_),
  PROTOBUF_FIELD_OFFSET(::HU::ServiceDiscoveryResponse, hide_clock_),
  ~0u,
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  6,
  7,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelOpenRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelOpenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelOpenRequest, priority_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelOpenRequest, id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::ChannelOpenResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ChannelOpenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ChannelOpenResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::PingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::PingRequest, timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::PingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::PingResponse, timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::ShutdownRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::ShutdownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::ShutdownRequest, reason_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::ShutdownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupRequest, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupResponse, media_status_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupResponse, max_unacked_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaSetupResponse, configs_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::MediaStopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MediaStartRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MediaStartRequest, session_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaStartRequest, config_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::MediaAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MediaAck, session_),
  PROTOBUF_FIELD_OFFSET(::HU::MediaAck, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::MicRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::MicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MicRequest, open_),
  PROTOBUF_FIELD_OFFSET(::HU::MicRequest, anc_),
  PROTOBUF_FIELD_OFFSET(::HU::MicRequest, ec_),
  PROTOBUF_FIELD_OFFSET(::HU::MicRequest, max_unacked_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::HU::MicResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::MicResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::MicResponse, session_),
  PROTOBUF_FIELD_OFFSET(::HU::MicResponse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocusRequest, disp_index_),
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocusRequest, mode_),
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocusRequest, reason_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocus, mode_),
  PROTOBUF_FIELD_OFFSET(::HU::VideoFocus, unrequested_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorStartRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorStartRequest, type_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorStartRequest, refresh_interval_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::HU::SensorStartResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::SensorStartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::SensorStartResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::NavigationFocusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::NavigationFocusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::NavigationFocusRequest, focus_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::NavigationFocusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::NavigationFocusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::NavigationFocusResponse, focus_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::VoiceSessionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::VoiceSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::VoiceSessionRequest, voice_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::AudioFocusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::AudioFocusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::AudioFocusRequest, focus_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::AudioFocusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::AudioFocusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::AudioFocusResponse, focus_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::AuthCompleteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::AuthCompleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::AuthCompleteResponse, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, state_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, call_time_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, phone_number_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, caller_id_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, phone_number_type_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus_Call, thumbnail_),
  5,
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus, calls_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatus, signal_strength_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatusInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatusInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatusInput, caller_number_),
  PROTOBUF_FIELD_OFFSET(::HU::PhoneStatusInput, caller_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationRequest, id_),
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationRequest, text_),
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationRequest, icon_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationResponse, id_),
  PROTOBUF_FIELD_OFFSET(::HU::GenericNotificationResponse, handled_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::StartGenericNotifications, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HU::StopGenericNotifications, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingRequest, phone_address_),
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingRequest, pairing_method_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingResponse, already_paired_),
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothPairingResponse, status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothAuthData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothAuthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::BluetoothAuthData, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::NAVMessagesStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVMessagesStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::NAVMessagesStatus, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, event_name_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, turn_side_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, turn_event_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, image_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, turn_number_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVTurnMessage, turn_angle_),
  0,
  5,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::HU::NAVDistanceMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVDistanceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HU::NAVDistanceMessage, distance_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVDistanceMessage, time_until_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVDistanceMessage, display_distance_),
  PROTOBUF_FIELD_OFFSET(::HU::NAVDistanceMessage, display_distance_unit_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::HU::ButtonInfo)},
  { 13, -1, sizeof(::HU::ButtonInfoWrapper)},
  { 19, 27, sizeof(::HU::TouchInfo_Location)},
  { 30, 38, sizeof(::HU::TouchInfo)},
  { 41, 48, sizeof(::HU::RelativeInputEvent)},
  { 50, 57, sizeof(::HU::AbsoluteInputEvent)},
  { 59, 65, sizeof(::HU::AbsoluteInputEventWrapper)},
  { 66, 72, sizeof(::HU::RelativeInputEventWrapper)},
  { 73, 84, sizeof(::HU::InputEvent)},
  { 90, -1, sizeof(::HU::BindingRequest)},
  { 96, 102, sizeof(::HU::BindingResponse)},
  { 103, 115, sizeof(::HU::SensorEvent_LocationData)},
  { 122, 128, sizeof(::HU::SensorEvent_NightMode)},
  { 129, 135, sizeof(::HU::SensorEvent_RPM)},
  { 136, 144, sizeof(::HU::SensorEvent_FuelLevel)},
  { 147, 153, sizeof(::HU::SensorEvent_DrivingStatus)},
  { 154, 161, sizeof(::HU::SensorEvent_DeadReckoning)},
  { 163, 171, sizeof(::HU::SensorEvent_CompassData)},
  { 174, 182, sizeof(::HU::SensorEvent_SpeedData)},
  { 185, 192, sizeof(::HU::SensorEvent_OdometerData)},
  { 194, 200, sizeof(::HU::SensorEvent_ParkingBreak)},
  { 201, 207, sizeof(::HU::SensorEvent_Passenger)},
  { 208, 214, sizeof(::HU::SensorEvent_Diagnostics)},
  { 215, 223, sizeof(::HU::SensorEvent_Environment)},
  { 226, 233, sizeof(::HU::SensorEvent_HVAC)},
  { 235, 243, sizeof(::HU::SensorEvent_Accel)},
  { 246, 254, sizeof(::HU::SensorEvent_Gyro)},
  { 257, 265, sizeof(::HU::SensorEvent_Door)},
  { 268, 276, sizeof(::HU::SensorEvent_Light)},
  { 279, 285, sizeof(::HU::SensorEvent_GearData)},
  { 286, -1, sizeof(::HU::SensorEvent)},
  { 310, 318, sizeof(::HU::AudioCofig)},
  { 321, 327, sizeof(::HU::ChannelDescriptor_SensorChannel_Sensor)},
  { 328, -1, sizeof(::HU::ChannelDescriptor_SensorChannel)},
  { 334, 345, sizeof(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig)},
  { 351, 361, sizeof(::HU::ChannelDescriptor_OutputStreamChannel)},
  { 366, 373, sizeof(::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig)},
  { 375, 383, sizeof(::HU::ChannelDescriptor_InputEventChannel)},
  { 386, 394, sizeof(::HU::ChannelDescriptor_InputStreamChannel)},
  { 397, 404, sizeof(::HU::ChannelDescriptor_BluetoothService)},
  { 406, 414, sizeof(::HU::ChannelDescriptor_NavigationStatusService_ImageOptions)},
  { 417, 425, sizeof(::HU::ChannelDescriptor_NavigationStatusService)},
  { 428, -1, sizeof(::HU::ChannelDescriptor_PhoneStatusService)},
  { 433, 441, sizeof(::HU::ChannelDescriptor_VendorExtensionService)},
  { 444, 450, sizeof(::HU::ChannelDescriptor_GenericNotificationService)},
  { 451, 466, sizeof(::HU::ChannelDescriptor)},
  { 476, 482, sizeof(::HU::ServiceDiscoveryRequest)},
  { 483, 500, sizeof(::HU::ServiceDiscoveryResponse)},
  { 512, 519, sizeof(::HU::ChannelOpenRequest)},
  { 521, 527, sizeof(::HU::ChannelOpenResponse)},
  { 528, 534, sizeof(::HU::PingRequest)},
  { 535, 541, sizeof(::HU::PingResponse)},
  { 542, 548, sizeof(::HU::ShutdownRequest)},
  { 549, -1, sizeof(::HU::ShutdownResponse)},
  { 554, 560, sizeof(::HU::MediaSetupRequest)},
  { 561, 569, sizeof(::HU::MediaSetupResponse)},
  { 572, -1, sizeof(::HU::MediaStopRequest)},
  { 577, 584, sizeof(::HU::MediaStartRequest)},
  { 586, 593, sizeof(::HU::MediaAck)},
  { 595, 604, sizeof(::HU::MicRequest)},
  { 608, 615, sizeof(::HU::MicResponse)},
  { 617, 625, sizeof(::HU::VideoFocusRequest)},
  { 628, 635, sizeof(::HU::VideoFocus)},
  { 637, 644, sizeof(::HU::SensorStartRequest)},
  { 646, 652, sizeof(::HU::SensorStartResponse)},
  { 653, 659, sizeof(::HU::NavigationFocusRequest)},
  { 660, 666, sizeof(::HU::NavigationFocusResponse)},
  { 667, 673, sizeof(::HU::VoiceSessionRequest)},
  { 674, 680, sizeof(::HU::AudioFocusRequest)},
  { 681, 687, sizeof(::HU::AudioFocusResponse)},
  { 688, 694, sizeof(::HU::AuthCompleteResponse)},
  { 695, 706, sizeof(::HU::PhoneStatus_Call)},
  { 712, 719, sizeof(::HU::PhoneStatus)},
  { 721, 728, sizeof(::HU::PhoneStatusInput)},
  { 730, 738, sizeof(::HU::GenericNotificationRequest)},
  { 741, 748, sizeof(::HU::GenericNotificationResponse)},
  { 750, -1, sizeof(::HU::StartGenericNotifications)},
  { 755, -1, sizeof(::HU::StopGenericNotifications)},
  { 760, 767, sizeof(::HU::BluetoothPairingRequest)},
  { 769, 776, sizeof(::HU::BluetoothPairingResponse)},
  { 778, 784, sizeof(::HU::BluetoothAuthData)},
  { 785, 791, sizeof(::HU::NAVMessagesStatus)},
  { 792, 803, sizeof(::HU::NAVTurnMessage)},
  { 809, 818, sizeof(::HU::NAVDistanceMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ButtonInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ButtonInfoWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_TouchInfo_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_TouchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_RelativeInputEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_AbsoluteInputEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_AbsoluteInputEventWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_RelativeInputEventWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_InputEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_BindingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_BindingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_LocationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_NightMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_RPM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_FuelLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_DrivingStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_DeadReckoning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_CompassData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_SpeedData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_OdometerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_ParkingBreak_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_Passenger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_Diagnostics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_Environment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_HVAC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_Accel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_Gyro_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_Door_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_Light_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_GearData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_AudioCofig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_SensorChannel_Sensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_SensorChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_OutputStreamChannel_VideoConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_OutputStreamChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_InputEventChannel_TouchScreenConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_InputEventChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_InputStreamChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_BluetoothService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_NavigationStatusService_ImageOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_NavigationStatusService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_PhoneStatusService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_VendorExtensionService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_GenericNotificationService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ServiceDiscoveryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ServiceDiscoveryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelOpenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ChannelOpenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_PingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ShutdownRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_ShutdownResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_MediaSetupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_MediaSetupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_MediaStopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_MediaStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_MediaAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_MicRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_MicResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_VideoFocusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_VideoFocus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_SensorStartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_NavigationFocusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_NavigationFocusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_VoiceSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_AudioFocusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_AudioFocusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_AuthCompleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_PhoneStatus_Call_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_PhoneStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_PhoneStatusInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_GenericNotificationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_GenericNotificationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_StartGenericNotifications_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_StopGenericNotifications_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_BluetoothPairingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_BluetoothPairingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_BluetoothAuthData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_NAVMessagesStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_NAVTurnMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HU::_NAVDistanceMessage_default_instance_),
};

const char descriptor_table_protodef_hu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010hu.proto\022\002HU\"U\n\nButtonInfo\022\021\n\tscan_cod"
  "e\030\001 \002(\r\022\022\n\nis_pressed\030\002 \002(\010\022\014\n\004meta\030\003 \002("
  "\r\022\022\n\nlong_press\030\004 \002(\010\"3\n\021ButtonInfoWrapp"
  "er\022\036\n\006button\030\001 \003(\0132\016.HU.ButtonInfo\"\206\002\n\tT"
  "ouchInfo\022(\n\010location\030\001 \003(\0132\026.HU.TouchInf"
  "o.Location\022\024\n\014action_index\030\002 \001(\r\022*\n\006acti"
  "on\030\003 \002(\0162\032.HU.TouchInfo.TOUCH_ACTION\0324\n\010"
  "Location\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\022\022\n\npointe"
  "r_id\030\003 \002(\r\"W\n\014TOUCH_ACTION\022\026\n\022TOUCH_ACTI"
  "ON_PRESS\020\000\022\030\n\024TOUCH_ACTION_RELEASE\020\001\022\025\n\021"
  "TOUCH_ACTION_DRAG\020\002\"6\n\022RelativeInputEven"
  "t\022\021\n\tscan_code\030\001 \001(\r\022\r\n\005delta\030\002 \001(\005\"6\n\022A"
  "bsoluteInputEvent\022\021\n\tscan_code\030\001 \001(\r\022\r\n\005"
  "value\030\002 \001(\005\"B\n\031AbsoluteInputEventWrapper"
  "\022%\n\005event\030\001 \002(\0132\026.HU.AbsoluteInputEvent\""
  "B\n\031RelativeInputEventWrapper\022%\n\005event\030\001 "
  "\002(\0132\026.HU.RelativeInputEvent\"\336\001\n\nInputEve"
  "nt\022\021\n\ttimestamp\030\001 \002(\004\022\024\n\014disp_channel\030\002 "
  "\001(\005\022\034\n\005touch\030\003 \001(\0132\r.HU.TouchInfo\022%\n\006but"
  "ton\030\004 \001(\0132\025.HU.ButtonInfoWrapper\0220\n\tabs_"
  "event\030\005 \001(\0132\035.HU.AbsoluteInputEventWrapp"
  "er\0220\n\trel_event\030\006 \001(\0132\035.HU.RelativeInput"
  "EventWrapper\"$\n\016BindingRequest\022\022\n\nscan_c"
  "odes\030\001 \003(\005\"-\n\017BindingResponse\022\032\n\006status\030"
  "\001 \002(\0162\n.HU.STATUS\"\200\027\n\013SensorEvent\0223\n\rloc"
  "ation_data\030\001 \003(\0132\034.HU.SensorEvent.Locati"
  "onData\0221\n\014compass_data\030\002 \003(\0132\033.HU.Sensor"
  "Event.CompassData\022-\n\nspeed_data\030\003 \003(\0132\031."
  "HU.SensorEvent.SpeedData\022 \n\003rpm\030\004 \003(\0132\023."
  "HU.SensorEvent.RPM\0223\n\rodometer_data\030\005 \003("
  "\0132\034.HU.SensorEvent.OdometerData\022,\n\tfuel_"
  "data\030\006 \003(\0132\031.HU.SensorEvent.FuelLevel\0227\n"
  "\021parkingbrake_data\030\007 \003(\0132\034.HU.SensorEven"
  "t.ParkingBreak\022+\n\tgear_data\030\010 \003(\0132\030.HU.S"
  "ensorEvent.GearData\0225\n\020diagnostics_data\030"
  "\t \003(\0132\033.HU.SensorEvent.Diagnostics\022-\n\nni"
  "ght_mode\030\n \003(\0132\031.HU.SensorEvent.NightMod"
  "e\0224\n\017enviorment_data\030\013 \003(\0132\033.HU.SensorEv"
  "ent.Environment\022\'\n\thvac_data\030\014 \003(\0132\024.HU."
  "SensorEvent.HVAC\0225\n\016driving_status\030\r \003(\013"
  "2\035.HU.SensorEvent.DrivingStatus\0225\n\016dead_"
  "reckoning\030\016 \003(\0132\035.HU.SensorEvent.DeadRec"
  "koning\0221\n\016passenger_data\030\017 \003(\0132\031.HU.Sens"
  "orEvent.Passenger\022\'\n\tdoor_data\030\020 \003(\0132\024.H"
  "U.SensorEvent.Door\022)\n\nlight_data\030\021 \003(\0132\025"
  ".HU.SensorEvent.Light\022)\n\naccel_data\030\023 \003("
  "\0132\025.HU.SensorEvent.Accel\022\'\n\tgyro_data\030\024 "
  "\003(\0132\024.HU.SensorEvent.Gyro\032\212\001\n\014LocationDa"
  "ta\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010latitude\030\002 \001(\005\022"
  "\021\n\tlongitude\030\003 \001(\005\022\020\n\010accuracy\030\004 \001(\r\022\020\n\010"
  "altitude\030\005 \001(\005\022\r\n\005speed\030\006 \001(\005\022\017\n\007bearing"
  "\030\007 \001(\005\032\035\n\tNightMode\022\020\n\010is_night\030\001 \002(\010\032\022\n"
  "\003RPM\022\013\n\003rpm\030\001 \002(\005\032@\n\tFuelLevel\022\022\n\nfuel_l"
  "evel\030\001 \002(\005\022\r\n\005range\030\002 \001(\005\022\020\n\010low_fuel\030\003 "
  "\001(\010\032\214\002\n\rDrivingStatus\022\016\n\006status\030\001 \002(\005\"\352\001"
  "\n\006STATUS\022!\n\035DRIVE_STATUS_FULLY_RESTRICTE"
  "D\020\037\022\"\n\036DRIVE_STATUS_LIMIT_MESSAGE_LEN\020\020\022"
  "\032\n\026DRIVE_STATUS_NO_CONFIG\020\010\022\"\n\036DRIVE_STA"
  "TUS_NO_KEYBOARD_INPUT\020\002\022\031\n\025DRIVE_STATUS_"
  "NO_VIDEO\020\001\022\037\n\033DRIVE_STATUS_NO_VOICE_INPU"
  "T\020\004\022\035\n\031DRIVE_STATUS_UNRESTRICTED\020\000\032<\n\rDe"
  "adReckoning\022\026\n\016steering_angel\030\001 \001(\005\022\023\n\013w"
  "heel_speed\030\002 \001(\005\032D\n\013CompassData\022\022\n\nbeari"
  "ng_e6\030\001 \001(\005\022\020\n\010pitch_e6\030\002 \001(\005\022\017\n\007roll_e6"
  "\030\003 \001(\005\032O\n\tSpeedData\022\020\n\010speed_e6\030\001 \001(\005\022\026\n"
  "\016cruise_engaged\030\002 \001(\010\022\030\n\020cruise_set_spee"
  "d\030\003 \001(\010\0323\n\014OdometerData\022\016\n\006kms_el\030\001 \001(\005\022"
  "\023\n\013trip_kms_el\030\002 \001(\005\032&\n\014ParkingBreak\022\026\n\016"
  "parking_breake\030\001 \001(\010\032&\n\tPassenger\022\031\n\021pas"
  "senger_present\030\001 \001(\010\032\'\n\013Diagnostics\022\030\n\020d"
  "iagnostics_byte\030\001 \001(\014\032H\n\013Environment\022\026\n\016"
  "temperature_e3\030\001 \001(\005\022\023\n\013pressure_e3\030\002 \001("
  "\005\022\014\n\004rain\030\003 \001(\005\032E\n\004HVAC\022\035\n\025target_temper"
  "ature_e3\030\001 \001(\005\022\036\n\026current_temperature_e3"
  "\030\002 \001(\005\032X\n\005Accel\022\031\n\021acceleration_x_e3\030\001 \001"
  "(\005\022\031\n\021acceleration_y_e3\030\002 \001(\005\022\031\n\021acceler"
  "ation_z_e3\030\003 \001(\005\032]\n\004Gyro\022\033\n\023rotation_spe"
  "ed_x_e3\030\001 \001(\005\022\033\n\023rotation_speed_y_e3\030\002 \001"
  "(\005\022\033\n\023rotation_speed_z_e3\030\003 \001(\005\032\?\n\004Door\022"
  "\021\n\thood_open\030\001 \001(\010\022\021\n\tboot_open\030\002 \001(\010\022\021\n"
  "\tdoor_open\030\003 \003(\010\032\226\003\n\005Light\0228\n\theadlight\030"
  "\001 \001(\0162%.HU.SensorEvent.Light.HEADLIGHT_S"
  "TATE\022B\n\016turn_indicator\030\002 \001(\0162*.HU.Sensor"
  "Event.Light.TURN_INDICATOR_STATE\022\027\n\017haza"
  "rd_light_on\030\003 \001(\010\"m\n\017HEADLIGHT_STATE\022\025\n\021"
  "HEADLIGHT_STATE_0\020\000\022\025\n\021HEADLIGHT_STATE_1"
  "\020\001\022\025\n\021HEADLIGHT_STATE_2\020\002\022\025\n\021HEADLIGHT_S"
  "TATE_3\020\003\"\206\001\n\024TURN_INDICATOR_STATE\022\032\n\026TUR"
  "N_INDICATOR_STATE_0\020\000\022\032\n\026TURN_INDICATOR_"
  "STATE_1\020\001\022\032\n\026TURN_INDICATOR_STATE_2\020\002\022\032\n"
  "\026TURN_INDICATOR_STATE_3\020\003\032\250\002\n\010GearData\022+"
  "\n\004gear\030\001 \002(\0162\035.HU.SensorEvent.GearData.G"
  "EAR\"\356\001\n\004GEAR\022\016\n\nGEAR_DRIVE\020d\022\017\n\013GEAR_EIG"
  "HTH\020\010\022\016\n\nGEAR_FIFTH\020\005\022\016\n\nGEAR_FIRST\020\001\022\017\n"
  "\013GEAR_FOURTH\020\004\022\020\n\014GEAR_NEUTRAL\020\000\022\016\n\nGEAR"
  "_NINTH\020\t\022\r\n\tGEAR_PARK\020e\022\020\n\014GEAR_REVERSE\020"
  "f\022\017\n\013GEAR_SECOND\020\002\022\020\n\014GEAR_SEVENTH\020\007\022\016\n\n"
  "GEAR_SIXTH\020\006\022\016\n\nGEAR_TENTH\020\n\022\016\n\nGEAR_THI"
  "RD\020\003\"K\n\nAudioCofig\022\023\n\013sample_rate\030\001 \002(\r\022"
  "\021\n\tbit_depth\030\002 \002(\r\022\025\n\rchannel_count\030\003 \002("
  "\r\"\322\023\n\021ChannelDescriptor\022\022\n\nchannel_id\030\001 "
  "\002(\r\022;\n\016sensor_channel\030\002 \001(\0132#.HU.Channel"
  "Descriptor.SensorChannel\022H\n\025output_strea"
  "m_channel\030\003 \001(\0132).HU.ChannelDescriptor.O"
  "utputStreamChannel\022D\n\023input_event_channe"
  "l\030\004 \001(\0132\'.HU.ChannelDescriptor.InputEven"
  "tChannel\022F\n\024input_stream_channel\030\005 \001(\0132("
  ".HU.ChannelDescriptor.InputStreamChannel"
  "\022A\n\021bluetooth_service\030\006 \001(\0132&.HU.Channel"
  "Descriptor.BluetoothService\022P\n\031navigatio"
  "n_status_service\030\010 \001(\0132-.HU.ChannelDescr"
  "iptor.NavigationStatusService\022F\n\024phone_s"
  "tatus_service\030\n \001(\0132(.HU.ChannelDescript"
  "or.PhoneStatusService\022N\n\030vendor_extensio"
  "n_service\030\014 \001(\0132,.HU.ChannelDescriptor.V"
  "endorExtensionService\022V\n\034generic_notific"
  "ation_service\030\r \001(\01320.HU.ChannelDescript"
  "or.GenericNotificationService\032y\n\rSensorC"
  "hannel\022\?\n\013sensor_list\030\001 \003(\0132*.HU.Channel"
  "Descriptor.SensorChannel.Sensor\032\'\n\006Senso"
  "r\022\035\n\004type\030\001 \001(\0162\017.HU.SENSOR_TYPE\032\245\005\n\023Out"
  "putStreamChannel\022\035\n\004type\030\001 \002(\0162\017.HU.STRE"
  "AM_TYPE\022\"\n\naudio_type\030\002 \001(\0162\016.HU.AUDIO_T"
  "YPE\022%\n\raudio_configs\030\003 \003(\0132\016.HU.AudioCof"
  "ig\022L\n\rvideo_configs\030\004 \003(\01325.HU.ChannelDe"
  "scriptor.OutputStreamChannel.VideoConfig"
  "\022\037\n\027available_while_in_call\030\005 \001(\010\032\264\003\n\013Vi"
  "deoConfig\022Z\n\nresolution\030\001 \002(\0162F.HU.Chann"
  "elDescriptor.OutputStreamChannel.VideoCo"
  "nfig.VIDEO_RESOLUTION\022S\n\nframe_rate\030\002 \002("
  "\0162\?.HU.ChannelDescriptor.OutputStreamCha"
  "nnel.VideoConfig.VIDEO_FPS\022\024\n\014margin_wid"
  "th\030\003 \002(\r\022\025\n\rmargin_height\030\004 \002(\r\022\013\n\003dpi\030\005"
  " \002(\r\022\030\n\020additional_depth\030\006 \001(\r\"o\n\020VIDEO_"
  "RESOLUTION\022\034\n\030VIDEO_RESOLUTION_800x480\020\001"
  "\022\035\n\031VIDEO_RESOLUTION_1280x720\020\002\022\036\n\032VIDEO"
  "_RESOLUTION_1920x1080\020\003\"/\n\tVIDEO_FPS\022\020\n\014"
  "VIDEO_FPS_30\020\001\022\020\n\014VIDEO_FPS_60\020\002\032\220\002\n\021Inp"
  "utEventChannel\022\032\n\022keycodes_supported\030\001 \003"
  "(\r\022V\n\023touch_screen_config\030\002 \001(\01329.HU.Cha"
  "nnelDescriptor.InputEventChannel.TouchSc"
  "reenConfig\022S\n\020touch_pad_config\030\003 \001(\01329.H"
  "U.ChannelDescriptor.InputEventChannel.To"
  "uchScreenConfig\0322\n\021TouchScreenConfig\022\r\n\005"
  "width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\032z\n\022InputStre"
  "amChannel\022\035\n\004type\030\001 \002(\0162\017.HU.STREAM_TYPE"
  "\022$\n\014audio_config\030\002 \002(\0132\016.HU.AudioCofig\022\037"
  "\n\027available_while_in_call\030\003 \001(\010\032f\n\020Bluet"
  "oothService\022\023\n\013car_address\030\001 \002(\t\022=\n\031supp"
  "orted_pairing_methods\030\002 \003(\0162\032.HU.Bluetoo"
  "thPairingMethod\032\340\002\n\027NavigationStatusServ"
  "ice\022\033\n\023minimum_interval_ms\030\001 \002(\r\022H\n\004type"
  "\030\002 \002(\0162:.HU.ChannelDescriptor.Navigation"
  "StatusService.CLUSTER_TYPE\022Q\n\rimage_opti"
  "ons\030\003 \001(\0132:.HU.ChannelDescriptor.Navigat"
  "ionStatusService.ImageOptions\032H\n\014ImageOp"
  "tions\022\r\n\005width\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\031\n\021"
  "colour_depth_bits\030\003 \002(\005\"A\n\014CLUSTER_TYPE\022"
  "\033\n\027CUSTOM_IMAGES_SUPPORTED\020\001\022\024\n\020IMAGE_CO"
  "DES_ONLY\020\002\032\024\n\022PhoneStatusService\032P\n\026Vend"
  "orExtensionService\022\014\n\004name\030\001 \001(\t\022\032\n\022pack"
  "age_white_list\030\002 \003(\t\022\014\n\004data\030\003 \001(\014\032*\n\032Ge"
  "nericNotificationService\022\014\n\004name\030\001 \001(\t\"-"
  "\n\027ServiceDiscoveryRequest\022\022\n\nphone_name\030"
  "\004 \001(\t\"\272\002\n\030ServiceDiscoveryResponse\022\'\n\010ch"
  "annels\030\001 \003(\0132\025.HU.ChannelDescriptor\022\026\n\016h"
  "ead_unit_name\030\002 \002(\t\022\021\n\tcar_model\030\003 \002(\t\022\020"
  "\n\010car_year\030\004 \002(\t\022\022\n\ncar_serial\030\005 \002(\t\022\022\n\n"
  "driver_pos\030\006 \002(\010\022\025\n\rheadunit_make\030\007 \002(\t\022"
  "\026\n\016headunit_model\030\010 \002(\t\022\020\n\010sw_build\030\t \002("
  "\t\022\022\n\nsw_version\030\n \002(\t\022\'\n\037can_play_native"
  "_media_during_vr\030\013 \002(\010\022\022\n\nhide_clock\030\014 \002"
  "(\010\"2\n\022ChannelOpenRequest\022\020\n\010priority\030\001 \001"
  "(\005\022\n\n\002id\030\002 \001(\005\"1\n\023ChannelOpenResponse\022\032\n"
  "\006status\030\001 \002(\0162\n.HU.STATUS\" \n\013PingRequest"
  "\022\021\n\ttimestamp\030\001 \002(\003\"!\n\014PingResponse\022\021\n\tt"
  "imestamp\030\001 \002(\003\"X\n\017ShutdownRequest\022*\n\006rea"
  "son\030\001 \001(\0162\032.HU.ShutdownRequest.REASON\"\031\n"
  "\006REASON\022\017\n\013REASON_QUIT\020\001\"\022\n\020ShutdownResp"
  "onse\"!\n\021MediaSetupRequest\022\014\n\004type\030\001 \001(\r\""
  "\255\001\n\022MediaSetupResponse\0229\n\014media_status\030\001"
  " \002(\0162#.HU.MediaSetupResponse.MEDIA_STATU"
  "S\022\023\n\013max_unacked\030\002 \002(\r\022\017\n\007configs\030\003 \003(\r\""
  "6\n\014MEDIA_STATUS\022\022\n\016MEDIA_STATUS_1\020\001\022\022\n\016M"
  "EDIA_STATUS_2\020\002\"\022\n\020MediaStopRequest\"4\n\021M"
  "ediaStartRequest\022\017\n\007session\030\001 \002(\005\022\016\n\006con"
  "fig\030\002 \001(\r\"*\n\010MediaAck\022\017\n\007session\030\001 \002(\005\022\r"
  "\n\005value\030\002 \002(\r\"H\n\nMicRequest\022\014\n\004open\030\001 \002("
  "\010\022\013\n\003anc\030\002 \001(\010\022\n\n\002ec\030\003 \001(\010\022\023\n\013max_unacke"
  "d\030\004 \001(\005\"-\n\013MicResponse\022\017\n\007session\030\001 \002(\005\022"
  "\r\n\005value\030\002 \002(\r\"s\n\021VideoFocusRequest\022\022\n\nd"
  "isp_index\030\001 \001(\005\022\"\n\004mode\030\002 \001(\0162\024.HU.VIDEO"
  "_FOCUS_MODE\022&\n\006reason\030\003 \001(\0162\026.HU.VIDEO_F"
  "OCUS_REASON\"E\n\nVideoFocus\022\"\n\004mode\030\001 \001(\0162"
  "\024.HU.VIDEO_FOCUS_MODE\022\023\n\013unrequested\030\002 \001"
  "(\010\"M\n\022SensorStartRequest\022\035\n\004type\030\001 \002(\0162\017"
  ".HU.SENSOR_TYPE\022\030\n\020refresh_interval\030\002 \001("
  "\003\"1\n\023SensorStartResponse\022\032\n\006status\030\001 \002(\016"
  "2\n.HU.STATUS\",\n\026NavigationFocusRequest\022\022"
  "\n\nfocus_type\030\001 \001(\r\"-\n\027NavigationFocusRes"
  "ponse\022\022\n\nfocus_type\030\001 \001(\r\"\220\001\n\023VoiceSessi"
  "onRequest\022:\n\014voice_status\030\001 \001(\0162$.HU.Voi"
  "ceSessionRequest.VOICE_STATUS\"=\n\014VOICE_S"
  "TATUS\022\026\n\022VOICE_STATUS_START\020\001\022\025\n\021VOICE_S"
  "TATUS_STOP\020\002\"\303\001\n\021AudioFocusRequest\0225\n\nfo"
  "cus_type\030\001 \002(\0162!.HU.AudioFocusRequest.AU"
  "DIO_FOCUS\"w\n\013AUDIO_FOCUS\022\024\n\020AUDIO_FOCUS_"
  "GAIN\020\001\022\036\n\032AUDIO_FOCUS_GAIN_TRANSIENT\020\002\022\031"
  "\n\025AUDIO_FOCUS_GAIN_NAVI\020\003\022\027\n\023AUDIO_FOCUS"
  "_RELEASE\020\004\"\366\002\n\022AudioFocusResponse\022<\n\nfoc"
  "us_type\030\001 \002(\0162(.HU.AudioFocusResponse.AU"
  "DIO_FOCUS_STATE\"\241\002\n\021AUDIO_FOCUS_STATE\022\032\n"
  "\026AUDIO_FOCUS_STATE_GAIN\020\001\022$\n AUDIO_FOCUS"
  "_STATE_GAIN_TRANSIENT\020\002\022\032\n\026AUDIO_FOCUS_S"
  "TATE_LOSS\020\003\022-\n)AUDIO_FOCUS_STATE_LOSS_TR"
  "ANSIENT_CAN_DUCK\020\004\022$\n AUDIO_FOCUS_STATE_"
  "LOSS_TRANSIENT\020\005\022%\n!AUDIO_FOCUS_STATE_GA"
  "IN_MEDIA_ONLY\020\006\0222\n.AUDIO_FOCUS_STATE_GAI"
  "N_TRANSIENT_GUIDANCE_ONLY\020\007\"2\n\024AuthCompl"
  "eteResponse\022\032\n\006status\030\001 \002(\0162\n.HU.STATUS\""
  "\227\003\n\013PhoneStatus\022#\n\005calls\030\001 \003(\0132\024.HU.Phon"
  "eStatus.Call\022\027\n\017signal_strength\030\002 \001(\r\032\234\001"
  "\n\004Call\022*\n\005state\030\001 \001(\0162\033.HU.PhoneStatus.P"
  "HONE_STATE\022\021\n\tcall_time\030\002 \001(\r\022\024\n\014phone_n"
  "umber\030\003 \001(\t\022\021\n\tcaller_id\030\004 \001(\t\022\031\n\021phone_"
  "number_type\030\005 \001(\t\022\021\n\tthumbnail\030\006 \001(\014\"\252\001\n"
  "\013PHONE_STATE\022\027\n\023PHONE_STATE_IN_CALL\020\001\022\027\n"
  "\023PHONE_STATE_ON_HOLD\020\002\022\031\n\025PHONE_STATE_HA"
  "NGINGUP\020\003\022\030\n\024PHONE_STATE_INCOMING\020\004\022\031\n\025P"
  "HONE_STATE_UNKNOWN_5\020\005\022\031\n\025PHONE_STATE_UN"
  "KNOWN_6\020\006\"<\n\020PhoneStatusInput\022\025\n\rcaller_"
  "number\030\001 \001(\t\022\021\n\tcaller_id\030\002 \001(\t\"D\n\032Gener"
  "icNotificationRequest\022\n\n\002id\030\001 \002(\t\022\014\n\004tex"
  "t\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\":\n\033GenericNotifica"
  "tionResponse\022\n\n\002id\030\001 \002(\t\022\017\n\007handled\030\002 \002("
  "\010\"\033\n\031StartGenericNotifications\"\032\n\030StopGe"
  "nericNotifications\"d\n\027BluetoothPairingRe"
  "quest\022\025\n\rphone_address\030\001 \002(\t\0222\n\016pairing_"
  "method\030\002 \001(\0162\032.HU.BluetoothPairingMethod"
  "\"\255\001\n\030BluetoothPairingResponse\022\026\n\016already"
  "_paired\030\001 \001(\010\022;\n\006status\030\002 \001(\0162+.HU.Bluet"
  "oothPairingResponse.PAIRING_STATUS\"<\n\016PA"
  "IRING_STATUS\022\024\n\020PAIRING_STATUS_1\020\001\022\024\n\020PA"
  "IRING_STATUS_2\020\002\"!\n\021BluetoothAuthData\022\014\n"
  "\004data\030\001 \001(\t\"`\n\021NAVMessagesStatus\022,\n\006stat"
  "us\030\001 \001(\0162\034.HU.NAVMessagesStatus.STATUS\"\035"
  "\n\006STATUS\022\t\n\005START\020\001\022\010\n\004STOP\020\002\"\206\005\n\016NAVTur"
  "nMessage\022\022\n\nevent_name\030\001 \001(\t\022/\n\tturn_sid"
  "e\030\002 \001(\0162\034.HU.NAVTurnMessage.TURN_SIDE\0221\n"
  "\nturn_event\030\003 \001(\0162\035.HU.NAVTurnMessage.TU"
  "RN_EVENT\022\r\n\005image\030\004 \001(\014\022\023\n\013turn_number\030\005"
  " \001(\005\022\022\n\nturn_angle\030\006 \001(\005\"@\n\tTURN_SIDE\022\r\n"
  "\tTURN_LEFT\020\001\022\016\n\nTURN_RIGHT\020\002\022\024\n\020TURN_UNS"
  "PECIFIED\020\003\"\201\003\n\nTURN_EVENT\022\020\n\014TURN_UNKNOW"
  "N\020\000\022\017\n\013TURN_DEPART\020\001\022\024\n\020TURN_NAME_CHANGE"
  "\020\002\022\024\n\020TURN_SLIGHT_TURN\020\003\022\r\n\tTURN_TURN\020\004\022"
  "\023\n\017TURN_SHARP_TURN\020\005\022\017\n\013TURN_U_TURN\020\006\022\020\n"
  "\014TURN_ON_RAMP\020\007\022\021\n\rTURN_OFF_RAMP\020\010\022\r\n\tTU"
  "RN_FORK\020\t\022\016\n\nTURN_MERGE\020\n\022\031\n\025TURN_ROUNDA"
  "BOUT_ENTER\020\013\022\030\n\024TURN_ROUNDABOUT_EXIT\020\014\022\""
  "\n\036TURN_ROUNDABOUT_ENTER_AND_EXIT\020\r\022\021\n\rTU"
  "RN_STRAIGHT\020\016\022\023\n\017TURN_FERRY_BOAT\020\020\022\024\n\020TU"
  "RN_FERRY_TRAIN\020\021\022\024\n\020TURN_DESTINATION\020\023\"\212"
  "\002\n\022NAVDistanceMessage\022\020\n\010distance\030\001 \001(\005\022"
  "\022\n\ntime_until\030\002 \001(\005\022\030\n\020display_distance\030"
  "\003 \001(\004\022K\n\025display_distance_unit\030\004 \001(\0162,.H"
  "U.NAVDistanceMessage.DISPLAY_DISTANCE_UN"
  "IT\"g\n\025DISPLAY_DISTANCE_UNIT\022\n\n\006METERS\020\001\022"
  "\020\n\014KILOMETERS10\020\002\022\016\n\nKILOMETERS\020\003\022\013\n\007MIL"
  "ES10\020\004\022\t\n\005MILES\020\005\022\010\n\004FEET\020\006*\027\n\006STATUS\022\r\n"
  "\tSTATUS_OK\020\000*\246\004\n\013SENSOR_TYPE\022\030\n\024SENSOR_T"
  "YPE_LOCATION\020\001\022\027\n\023SENSOR_TYPE_COMPASS\020\002\022"
  "\031\n\025SENSOR_TYPE_CAR_SPEED\020\003\022\023\n\017SENSOR_TYP"
  "E_RPM\020\004\022\030\n\024SENSOR_TYPE_ODOMETER\020\005\022\032\n\026SEN"
  "SOR_TYPE_FUEL_LEVEL\020\006\022\035\n\031SENSOR_TYPE_PAR"
  "KING_BRAKE\020\007\022\024\n\020SENSOR_TYPE_GEAR\020\010\022\033\n\027SE"
  "NSOR_TYPE_DIAGNOSTICS\020\t\022\032\n\026SENSOR_TYPE_N"
  "IGHT_DATA\020\n\022\033\n\027SENSOR_TYPE_ENVIRONMENT\020\013"
  "\022\024\n\020SENSOR_TYPE_HVAC\020\014\022\036\n\032SENSOR_TYPE_DR"
  "IVING_STATUS\020\r\022\035\n\031SENSOR_TYPE_DEAD_RECON"
  "ING\020\016\022\031\n\025SENSOR_TYPE_PASSENGER\020\017\022\024\n\020SENS"
  "OR_TYPE_DOOR\020\020\022\025\n\021SENSOR_TYPE_LIGHT\020\021\022\024\n"
  "\020SENSOR_TYPE_TIRE\020\022\022\025\n\021SENSOR_TYPE_ACCEL"
  "\020\023\022\024\n\020SENSOR_TYPE_GYRO\020\024\022\023\n\017SENSOR_TYPE_"
  "GPS\020\025*f\n\nAUDIO_TYPE\022\025\n\021AUDIO_TYPE_SPEECH"
  "\020\001\022\025\n\021AUDIO_TYPE_SYSTEM\020\002\022\024\n\020AUDIO_TYPE_"
  "MEDIA\020\003\022\024\n\020AUDIO_TYPE_ALARM\020\004*;\n\013STREAM_"
  "TYPE\022\025\n\021STREAM_TYPE_AUDIO\020\001\022\025\n\021STREAM_TY"
  "PE_VIDEO\020\003*\231\001\n\026BluetoothPairingMethod\022\035\n"
  "\031BLUETOOTH_PARING_METHOD_1\020\001\022 \n\034BLUETOOT"
  "H_PARING_METHOD_A2DP\020\002\022\035\n\031BLUETOOTH_PARI"
  "NG_METHOD_3\020\003\022\037\n\033BLUETOOTH_PARING_METHOD"
  "_HFP\020\004*P\n\020VIDEO_FOCUS_MODE\022\034\n\030VIDEO_FOCU"
  "S_MODE_FOCUSED\020\001\022\036\n\032VIDEO_FOCUS_MODE_UNF"
  "OCUSED\020\002*H\n\022VIDEO_FOCUS_REASON\022\030\n\024VIDEO_"
  "FOCUS_REASON_1\020\001\022\030\n\024VIDEO_FOCUS_REASON_2"
  "\020\002B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hu_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hu_2eproto_sccs[84] = {
  &scc_info_AbsoluteInputEvent_hu_2eproto.base,
  &scc_info_AbsoluteInputEventWrapper_hu_2eproto.base,
  &scc_info_AudioCofig_hu_2eproto.base,
  &scc_info_AudioFocusRequest_hu_2eproto.base,
  &scc_info_AudioFocusResponse_hu_2eproto.base,
  &scc_info_AuthCompleteResponse_hu_2eproto.base,
  &scc_info_BindingRequest_hu_2eproto.base,
  &scc_info_BindingResponse_hu_2eproto.base,
  &scc_info_BluetoothAuthData_hu_2eproto.base,
  &scc_info_BluetoothPairingRequest_hu_2eproto.base,
  &scc_info_BluetoothPairingResponse_hu_2eproto.base,
  &scc_info_ButtonInfo_hu_2eproto.base,
  &scc_info_ButtonInfoWrapper_hu_2eproto.base,
  &scc_info_ChannelDescriptor_hu_2eproto.base,
  &scc_info_ChannelDescriptor_BluetoothService_hu_2eproto.base,
  &scc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto.base,
  &scc_info_ChannelDescriptor_InputEventChannel_hu_2eproto.base,
  &scc_info_ChannelDescriptor_InputEventChannel_TouchScreenConfig_hu_2eproto.base,
  &scc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto.base,
  &scc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto.base,
  &scc_info_ChannelDescriptor_NavigationStatusService_ImageOptions_hu_2eproto.base,
  &scc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto.base,
  &scc_info_ChannelDescriptor_OutputStreamChannel_VideoConfig_hu_2eproto.base,
  &scc_info_ChannelDescriptor_PhoneStatusService_hu_2eproto.base,
  &scc_info_ChannelDescriptor_SensorChannel_hu_2eproto.base,
  &scc_info_ChannelDescriptor_SensorChannel_Sensor_hu_2eproto.base,
  &scc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto.base,
  &scc_info_ChannelOpenRequest_hu_2eproto.base,
  &scc_info_ChannelOpenResponse_hu_2eproto.base,
  &scc_info_GenericNotificationRequest_hu_2eproto.base,
  &scc_info_GenericNotificationResponse_hu_2eproto.base,
  &scc_info_InputEvent_hu_2eproto.base,
  &scc_info_MediaAck_hu_2eproto.base,
  &scc_info_MediaSetupRequest_hu_2eproto.base,
  &scc_info_MediaSetupResponse_hu_2eproto.base,
  &scc_info_MediaStartRequest_hu_2eproto.base,
  &scc_info_MediaStopRequest_hu_2eproto.base,
  &scc_info_MicRequest_hu_2eproto.base,
  &scc_info_MicResponse_hu_2eproto.base,
  &scc_info_NAVDistanceMessage_hu_2eproto.base,
  &scc_info_NAVMessagesStatus_hu_2eproto.base,
  &scc_info_NAVTurnMessage_hu_2eproto.base,
  &scc_info_NavigationFocusRequest_hu_2eproto.base,
  &scc_info_NavigationFocusResponse_hu_2eproto.base,
  &scc_info_PhoneStatus_hu_2eproto.base,
  &scc_info_PhoneStatus_Call_hu_2eproto.base,
  &scc_info_PhoneStatusInput_hu_2eproto.base,
  &scc_info_PingRequest_hu_2eproto.base,
  &scc_info_PingResponse_hu_2eproto.base,
  &scc_info_RelativeInputEvent_hu_2eproto.base,
  &scc_info_RelativeInputEventWrapper_hu_2eproto.base,
  &scc_info_SensorEvent_hu_2eproto.base,
  &scc_info_SensorEvent_Accel_hu_2eproto.base,
  &scc_info_SensorEvent_CompassData_hu_2eproto.base,
  &scc_info_SensorEvent_DeadReckoning_hu_2eproto.base,
  &scc_info_SensorEvent_Diagnostics_hu_2eproto.base,
  &scc_info_SensorEvent_Door_hu_2eproto.base,
  &scc_info_SensorEvent_DrivingStatus_hu_2eproto.base,
  &scc_info_SensorEvent_Environment_hu_2eproto.base,
  &scc_info_SensorEvent_FuelLevel_hu_2eproto.base,
  &scc_info_SensorEvent_GearData_hu_2eproto.base,
  &scc_info_SensorEvent_Gyro_hu_2eproto.base,
  &scc_info_SensorEvent_HVAC_hu_2eproto.base,
  &scc_info_SensorEvent_Light_hu_2eproto.base,
  &scc_info_SensorEvent_LocationData_hu_2eproto.base,
  &scc_info_SensorEvent_NightMode_hu_2eproto.base,
  &scc_info_SensorEvent_OdometerData_hu_2eproto.base,
  &scc_info_SensorEvent_ParkingBreak_hu_2eproto.base,
  &scc_info_SensorEvent_Passenger_hu_2eproto.base,
  &scc_info_SensorEvent_RPM_hu_2eproto.base,
  &scc_info_SensorEvent_SpeedData_hu_2eproto.base,
  &scc_info_SensorStartRequest_hu_2eproto.base,
  &scc_info_SensorStartResponse_hu_2eproto.base,
  &scc_info_ServiceDiscoveryRequest_hu_2eproto.base,
  &scc_info_ServiceDiscoveryResponse_hu_2eproto.base,
  &scc_info_ShutdownRequest_hu_2eproto.base,
  &scc_info_ShutdownResponse_hu_2eproto.base,
  &scc_info_StartGenericNotifications_hu_2eproto.base,
  &scc_info_StopGenericNotifications_hu_2eproto.base,
  &scc_info_TouchInfo_hu_2eproto.base,
  &scc_info_TouchInfo_Location_hu_2eproto.base,
  &scc_info_VideoFocus_hu_2eproto.base,
  &scc_info_VideoFocusRequest_hu_2eproto.base,
  &scc_info_VoiceSessionRequest_hu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hu_2eproto = {
  false, false, descriptor_table_protodef_hu_2eproto, "hu.proto", 11847,
  &descriptor_table_hu_2eproto_once, descriptor_table_hu_2eproto_sccs, descriptor_table_hu_2eproto_deps, 84, 0,
  schemas, file_default_instances, TableStruct_hu_2eproto::offsets,
  file_level_metadata_hu_2eproto, 84, file_level_enum_descriptors_hu_2eproto, file_level_service_descriptors_hu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hu_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hu_2eproto)), true);
namespace HU {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TouchInfo_TOUCH_ACTION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[0];
}
bool TouchInfo_TOUCH_ACTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TouchInfo_TOUCH_ACTION TouchInfo::TOUCH_ACTION_PRESS;
constexpr TouchInfo_TOUCH_ACTION TouchInfo::TOUCH_ACTION_RELEASE;
constexpr TouchInfo_TOUCH_ACTION TouchInfo::TOUCH_ACTION_DRAG;
constexpr TouchInfo_TOUCH_ACTION TouchInfo::TOUCH_ACTION_MIN;
constexpr TouchInfo_TOUCH_ACTION TouchInfo::TOUCH_ACTION_MAX;
constexpr int TouchInfo::TOUCH_ACTION_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorEvent_DrivingStatus_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[1];
}
bool SensorEvent_DrivingStatus_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 31:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::DRIVE_STATUS_FULLY_RESTRICTED;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::DRIVE_STATUS_LIMIT_MESSAGE_LEN;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::DRIVE_STATUS_NO_CONFIG;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::DRIVE_STATUS_NO_KEYBOARD_INPUT;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::DRIVE_STATUS_NO_VIDEO;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::DRIVE_STATUS_NO_VOICE_INPUT;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::DRIVE_STATUS_UNRESTRICTED;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::STATUS_MIN;
constexpr SensorEvent_DrivingStatus_STATUS SensorEvent_DrivingStatus::STATUS_MAX;
constexpr int SensorEvent_DrivingStatus::STATUS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorEvent_Light_HEADLIGHT_STATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[2];
}
bool SensorEvent_Light_HEADLIGHT_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorEvent_Light_HEADLIGHT_STATE SensorEvent_Light::HEADLIGHT_STATE_0;
constexpr SensorEvent_Light_HEADLIGHT_STATE SensorEvent_Light::HEADLIGHT_STATE_1;
constexpr SensorEvent_Light_HEADLIGHT_STATE SensorEvent_Light::HEADLIGHT_STATE_2;
constexpr SensorEvent_Light_HEADLIGHT_STATE SensorEvent_Light::HEADLIGHT_STATE_3;
constexpr SensorEvent_Light_HEADLIGHT_STATE SensorEvent_Light::HEADLIGHT_STATE_MIN;
constexpr SensorEvent_Light_HEADLIGHT_STATE SensorEvent_Light::HEADLIGHT_STATE_MAX;
constexpr int SensorEvent_Light::HEADLIGHT_STATE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorEvent_Light_TURN_INDICATOR_STATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[3];
}
bool SensorEvent_Light_TURN_INDICATOR_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorEvent_Light_TURN_INDICATOR_STATE SensorEvent_Light::TURN_INDICATOR_STATE_0;
constexpr SensorEvent_Light_TURN_INDICATOR_STATE SensorEvent_Light::TURN_INDICATOR_STATE_1;
constexpr SensorEvent_Light_TURN_INDICATOR_STATE SensorEvent_Light::TURN_INDICATOR_STATE_2;
constexpr SensorEvent_Light_TURN_INDICATOR_STATE SensorEvent_Light::TURN_INDICATOR_STATE_3;
constexpr SensorEvent_Light_TURN_INDICATOR_STATE SensorEvent_Light::TURN_INDICATOR_STATE_MIN;
constexpr SensorEvent_Light_TURN_INDICATOR_STATE SensorEvent_Light::TURN_INDICATOR_STATE_MAX;
constexpr int SensorEvent_Light::TURN_INDICATOR_STATE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorEvent_GearData_GEAR_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[4];
}
bool SensorEvent_GearData_GEAR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_DRIVE;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_EIGHTH;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_FIFTH;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_FIRST;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_FOURTH;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_NEUTRAL;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_NINTH;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_PARK;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_REVERSE;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_SECOND;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_SEVENTH;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_SIXTH;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_TENTH;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_THIRD;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_MIN;
constexpr SensorEvent_GearData_GEAR SensorEvent_GearData::GEAR_MAX;
constexpr int SensorEvent_GearData::GEAR_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[5];
}
bool ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_RESOLUTION_800x480;
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_RESOLUTION_1280x720;
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_RESOLUTION_1920x1080;
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_RESOLUTION_MIN;
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_RESOLUTION_MAX;
constexpr int ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_RESOLUTION_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[6];
}
bool ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_FPS_30;
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_FPS_60;
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_FPS_MIN;
constexpr ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_FPS_MAX;
constexpr int ChannelDescriptor_OutputStreamChannel_VideoConfig::VIDEO_FPS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[7];
}
bool ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE ChannelDescriptor_NavigationStatusService::CUSTOM_IMAGES_SUPPORTED;
constexpr ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE ChannelDescriptor_NavigationStatusService::IMAGE_CODES_ONLY;
constexpr ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE ChannelDescriptor_NavigationStatusService::CLUSTER_TYPE_MIN;
constexpr ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE ChannelDescriptor_NavigationStatusService::CLUSTER_TYPE_MAX;
constexpr int ChannelDescriptor_NavigationStatusService::CLUSTER_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShutdownRequest_REASON_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[8];
}
bool ShutdownRequest_REASON_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShutdownRequest_REASON ShutdownRequest::REASON_QUIT;
constexpr ShutdownRequest_REASON ShutdownRequest::REASON_MIN;
constexpr ShutdownRequest_REASON ShutdownRequest::REASON_MAX;
constexpr int ShutdownRequest::REASON_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaSetupResponse_MEDIA_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[9];
}
bool MediaSetupResponse_MEDIA_STATUS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MediaSetupResponse_MEDIA_STATUS MediaSetupResponse::MEDIA_STATUS_1;
constexpr MediaSetupResponse_MEDIA_STATUS MediaSetupResponse::MEDIA_STATUS_2;
constexpr MediaSetupResponse_MEDIA_STATUS MediaSetupResponse::MEDIA_STATUS_MIN;
constexpr MediaSetupResponse_MEDIA_STATUS MediaSetupResponse::MEDIA_STATUS_MAX;
constexpr int MediaSetupResponse::MEDIA_STATUS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceSessionRequest_VOICE_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[10];
}
bool VoiceSessionRequest_VOICE_STATUS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VoiceSessionRequest_VOICE_STATUS VoiceSessionRequest::VOICE_STATUS_START;
constexpr VoiceSessionRequest_VOICE_STATUS VoiceSessionRequest::VOICE_STATUS_STOP;
constexpr VoiceSessionRequest_VOICE_STATUS VoiceSessionRequest::VOICE_STATUS_MIN;
constexpr VoiceSessionRequest_VOICE_STATUS VoiceSessionRequest::VOICE_STATUS_MAX;
constexpr int VoiceSessionRequest::VOICE_STATUS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioFocusRequest_AUDIO_FOCUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[11];
}
bool AudioFocusRequest_AUDIO_FOCUS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioFocusRequest_AUDIO_FOCUS AudioFocusRequest::AUDIO_FOCUS_GAIN;
constexpr AudioFocusRequest_AUDIO_FOCUS AudioFocusRequest::AUDIO_FOCUS_GAIN_TRANSIENT;
constexpr AudioFocusRequest_AUDIO_FOCUS AudioFocusRequest::AUDIO_FOCUS_GAIN_NAVI;
constexpr AudioFocusRequest_AUDIO_FOCUS AudioFocusRequest::AUDIO_FOCUS_RELEASE;
constexpr AudioFocusRequest_AUDIO_FOCUS AudioFocusRequest::AUDIO_FOCUS_MIN;
constexpr AudioFocusRequest_AUDIO_FOCUS AudioFocusRequest::AUDIO_FOCUS_MAX;
constexpr int AudioFocusRequest::AUDIO_FOCUS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioFocusResponse_AUDIO_FOCUS_STATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[12];
}
bool AudioFocusResponse_AUDIO_FOCUS_STATE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_GAIN;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_GAIN_TRANSIENT;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_LOSS;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_LOSS_TRANSIENT_CAN_DUCK;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_LOSS_TRANSIENT;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_GAIN_MEDIA_ONLY;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_GAIN_TRANSIENT_GUIDANCE_ONLY;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_MIN;
constexpr AudioFocusResponse_AUDIO_FOCUS_STATE AudioFocusResponse::AUDIO_FOCUS_STATE_MAX;
constexpr int AudioFocusResponse::AUDIO_FOCUS_STATE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhoneStatus_PHONE_STATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[13];
}
bool PhoneStatus_PHONE_STATE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_IN_CALL;
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_ON_HOLD;
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_HANGINGUP;
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_INCOMING;
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_UNKNOWN_5;
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_UNKNOWN_6;
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_MIN;
constexpr PhoneStatus_PHONE_STATE PhoneStatus::PHONE_STATE_MAX;
constexpr int PhoneStatus::PHONE_STATE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothPairingResponse_PAIRING_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[14];
}
bool BluetoothPairingResponse_PAIRING_STATUS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BluetoothPairingResponse_PAIRING_STATUS BluetoothPairingResponse::PAIRING_STATUS_1;
constexpr BluetoothPairingResponse_PAIRING_STATUS BluetoothPairingResponse::PAIRING_STATUS_2;
constexpr BluetoothPairingResponse_PAIRING_STATUS BluetoothPairingResponse::PAIRING_STATUS_MIN;
constexpr BluetoothPairingResponse_PAIRING_STATUS BluetoothPairingResponse::PAIRING_STATUS_MAX;
constexpr int BluetoothPairingResponse::PAIRING_STATUS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NAVMessagesStatus_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[15];
}
bool NAVMessagesStatus_STATUS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NAVMessagesStatus_STATUS NAVMessagesStatus::START;
constexpr NAVMessagesStatus_STATUS NAVMessagesStatus::STOP;
constexpr NAVMessagesStatus_STATUS NAVMessagesStatus::STATUS_MIN;
constexpr NAVMessagesStatus_STATUS NAVMessagesStatus::STATUS_MAX;
constexpr int NAVMessagesStatus::STATUS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NAVTurnMessage_TURN_SIDE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[16];
}
bool NAVTurnMessage_TURN_SIDE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NAVTurnMessage_TURN_SIDE NAVTurnMessage::TURN_LEFT;
constexpr NAVTurnMessage_TURN_SIDE NAVTurnMessage::TURN_RIGHT;
constexpr NAVTurnMessage_TURN_SIDE NAVTurnMessage::TURN_UNSPECIFIED;
constexpr NAVTurnMessage_TURN_SIDE NAVTurnMessage::TURN_SIDE_MIN;
constexpr NAVTurnMessage_TURN_SIDE NAVTurnMessage::TURN_SIDE_MAX;
constexpr int NAVTurnMessage::TURN_SIDE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NAVTurnMessage_TURN_EVENT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[17];
}
bool NAVTurnMessage_TURN_EVENT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_UNKNOWN;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_DEPART;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_NAME_CHANGE;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_SLIGHT_TURN;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_TURN;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_SHARP_TURN;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_U_TURN;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_ON_RAMP;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_OFF_RAMP;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_FORK;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_MERGE;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_ROUNDABOUT_ENTER;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_ROUNDABOUT_EXIT;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_ROUNDABOUT_ENTER_AND_EXIT;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_STRAIGHT;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_FERRY_BOAT;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_FERRY_TRAIN;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_DESTINATION;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_EVENT_MIN;
constexpr NAVTurnMessage_TURN_EVENT NAVTurnMessage::TURN_EVENT_MAX;
constexpr int NAVTurnMessage::TURN_EVENT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NAVDistanceMessage_DISPLAY_DISTANCE_UNIT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[18];
}
bool NAVDistanceMessage_DISPLAY_DISTANCE_UNIT_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::METERS;
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::KILOMETERS10;
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::KILOMETERS;
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::MILES10;
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::MILES;
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::FEET;
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::DISPLAY_DISTANCE_UNIT_MIN;
constexpr NAVDistanceMessage_DISPLAY_DISTANCE_UNIT NAVDistanceMessage::DISPLAY_DISTANCE_UNIT_MAX;
constexpr int NAVDistanceMessage::DISPLAY_DISTANCE_UNIT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[19];
}
bool STATUS_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SENSOR_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[20];
}
bool SENSOR_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AUDIO_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[21];
}
bool AUDIO_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STREAM_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[22];
}
bool STREAM_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothPairingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[23];
}
bool BluetoothPairingMethod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VIDEO_FOCUS_MODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[24];
}
bool VIDEO_FOCUS_MODE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VIDEO_FOCUS_REASON_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hu_2eproto);
  return file_level_enum_descriptors_hu_2eproto[25];
}
bool VIDEO_FOCUS_REASON_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ButtonInfo::InitAsDefaultInstance() {
}
class ButtonInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonInfo>()._has_bits_);
  static void set_has_scan_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_pressed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_long_press(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ButtonInfo::ButtonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ButtonInfo)
}
ButtonInfo::ButtonInfo(const ButtonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scan_code_, &from.scan_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&long_press_) -
    reinterpret_cast<char*>(&scan_code_)) + sizeof(long_press_));
  // @@protoc_insertion_point(copy_constructor:HU.ButtonInfo)
}

void ButtonInfo::SharedCtor() {
  ::memset(&scan_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long_press_) -
      reinterpret_cast<char*>(&scan_code_)) + sizeof(long_press_));
}

ButtonInfo::~ButtonInfo() {
  // @@protoc_insertion_point(destructor:HU.ButtonInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ButtonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ButtonInfo::ArenaDtor(void* object) {
  ButtonInfo* _this = reinterpret_cast< ButtonInfo* >(object);
  (void)_this;
}
void ButtonInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ButtonInfo& ButtonInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ButtonInfo_hu_2eproto.base);
  return *internal_default_instance();
}


void ButtonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ButtonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&scan_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&long_press_) -
        reinterpret_cast<char*>(&scan_code_)) + sizeof(long_press_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 scan_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_scan_code(&has_bits);
          scan_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_pressed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_pressed(&has_bits);
          is_pressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_meta(&has_bits);
          meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool long_press = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_long_press(&has_bits);
          long_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ButtonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 scan_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_scan_code(), target);
  }

  // required bool is_pressed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_pressed(), target);
  }

  // required uint32 meta = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_meta(), target);
  }

  // required bool long_press = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_long_press(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ButtonInfo)
  return target;
}

size_t ButtonInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.ButtonInfo)
  size_t total_size = 0;

  if (_internal_has_scan_code()) {
    // required uint32 scan_code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scan_code());
  }

  if (_internal_has_meta()) {
    // required uint32 meta = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meta());
  }

  if (_internal_has_is_pressed()) {
    // required bool is_pressed = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_long_press()) {
    // required bool long_press = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ButtonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ButtonInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 scan_code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scan_code());

    // required uint32 meta = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meta());

    // required bool is_pressed = 2;
    total_size += 1 + 1;

    // required bool long_press = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ButtonInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ButtonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ButtonInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ButtonInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ButtonInfo)
    MergeFrom(*source);
  }
}

void ButtonInfo::MergeFrom(const ButtonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ButtonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      scan_code_ = from.scan_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      meta_ = from.meta_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_pressed_ = from.is_pressed_;
    }
    if (cached_has_bits & 0x00000008u) {
      long_press_ = from.long_press_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ButtonInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ButtonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonInfo::CopyFrom(const ButtonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ButtonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ButtonInfo::InternalSwap(ButtonInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ButtonInfo, long_press_)
      + sizeof(ButtonInfo::long_press_)
      - PROTOBUF_FIELD_OFFSET(ButtonInfo, scan_code_)>(
          reinterpret_cast<char*>(&scan_code_),
          reinterpret_cast<char*>(&other->scan_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ButtonInfoWrapper::InitAsDefaultInstance() {
}
class ButtonInfoWrapper::_Internal {
 public:
};

ButtonInfoWrapper::ButtonInfoWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  button_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ButtonInfoWrapper)
}
ButtonInfoWrapper::ButtonInfoWrapper(const ButtonInfoWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      button_(from.button_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.ButtonInfoWrapper)
}

void ButtonInfoWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ButtonInfoWrapper_hu_2eproto.base);
}

ButtonInfoWrapper::~ButtonInfoWrapper() {
  // @@protoc_insertion_point(destructor:HU.ButtonInfoWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ButtonInfoWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ButtonInfoWrapper::ArenaDtor(void* object) {
  ButtonInfoWrapper* _this = reinterpret_cast< ButtonInfoWrapper* >(object);
  (void)_this;
}
void ButtonInfoWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonInfoWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ButtonInfoWrapper& ButtonInfoWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ButtonInfoWrapper_hu_2eproto.base);
  return *internal_default_instance();
}


void ButtonInfoWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ButtonInfoWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  button_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonInfoWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HU.ButtonInfo button = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_button(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonInfoWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ButtonInfoWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HU.ButtonInfo button = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_button_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_button(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ButtonInfoWrapper)
  return target;
}

size_t ButtonInfoWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ButtonInfoWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.ButtonInfo button = 1;
  total_size += 1UL * this->_internal_button_size();
  for (const auto& msg : this->button_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ButtonInfoWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ButtonInfoWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const ButtonInfoWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ButtonInfoWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ButtonInfoWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ButtonInfoWrapper)
    MergeFrom(*source);
  }
}

void ButtonInfoWrapper::MergeFrom(const ButtonInfoWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ButtonInfoWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  button_.MergeFrom(from.button_);
}

void ButtonInfoWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ButtonInfoWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonInfoWrapper::CopyFrom(const ButtonInfoWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ButtonInfoWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonInfoWrapper::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(button_)) return false;
  return true;
}

void ButtonInfoWrapper::InternalSwap(ButtonInfoWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  button_.InternalSwap(&other->button_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonInfoWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TouchInfo_Location::InitAsDefaultInstance() {
}
class TouchInfo_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<TouchInfo_Location>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pointer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TouchInfo_Location::TouchInfo_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.TouchInfo.Location)
}
TouchInfo_Location::TouchInfo_Location(const TouchInfo_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&pointer_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(pointer_id_));
  // @@protoc_insertion_point(copy_constructor:HU.TouchInfo.Location)
}

void TouchInfo_Location::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pointer_id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(pointer_id_));
}

TouchInfo_Location::~TouchInfo_Location() {
  // @@protoc_insertion_point(destructor:HU.TouchInfo.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TouchInfo_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TouchInfo_Location::ArenaDtor(void* object) {
  TouchInfo_Location* _this = reinterpret_cast< TouchInfo_Location* >(object);
  (void)_this;
}
void TouchInfo_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TouchInfo_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TouchInfo_Location& TouchInfo_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TouchInfo_Location_hu_2eproto.base);
  return *internal_default_instance();
}


void TouchInfo_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.TouchInfo.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pointer_id_) -
        reinterpret_cast<char*>(&x_)) + sizeof(pointer_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TouchInfo_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pointer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pointer_id(&has_bits);
          pointer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TouchInfo_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.TouchInfo.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // required uint32 pointer_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pointer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.TouchInfo.Location)
  return target;
}

size_t TouchInfo_Location::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.TouchInfo.Location)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required uint32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required uint32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  if (_internal_has_pointer_id()) {
    // required uint32 pointer_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pointer_id());
  }

  return total_size;
}
size_t TouchInfo_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.TouchInfo.Location)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());

    // required uint32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());

    // required uint32 pointer_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pointer_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TouchInfo_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.TouchInfo.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const TouchInfo_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TouchInfo_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.TouchInfo.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.TouchInfo.Location)
    MergeFrom(*source);
  }
}

void TouchInfo_Location::MergeFrom(const TouchInfo_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.TouchInfo.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      pointer_id_ = from.pointer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TouchInfo_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.TouchInfo.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchInfo_Location::CopyFrom(const TouchInfo_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.TouchInfo.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchInfo_Location::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TouchInfo_Location::InternalSwap(TouchInfo_Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TouchInfo_Location, pointer_id_)
      + sizeof(TouchInfo_Location::pointer_id_)
      - PROTOBUF_FIELD_OFFSET(TouchInfo_Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TouchInfo_Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TouchInfo::InitAsDefaultInstance() {
}
class TouchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TouchInfo>()._has_bits_);
  static void set_has_action_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

TouchInfo::TouchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  location_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.TouchInfo)
}
TouchInfo::TouchInfo(const TouchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      location_(from.location_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_index_, &from.action_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&action_index_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:HU.TouchInfo)
}

void TouchInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TouchInfo_hu_2eproto.base);
  ::memset(&action_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&action_index_)) + sizeof(action_));
}

TouchInfo::~TouchInfo() {
  // @@protoc_insertion_point(destructor:HU.TouchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TouchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TouchInfo::ArenaDtor(void* object) {
  TouchInfo* _this = reinterpret_cast< TouchInfo* >(object);
  (void)_this;
}
void TouchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TouchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TouchInfo& TouchInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TouchInfo_hu_2eproto.base);
  return *internal_default_instance();
}


void TouchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.TouchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&action_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&action_index_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TouchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HU.TouchInfo.Location location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 action_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_action_index(&has_bits);
          action_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .HU.TouchInfo.TOUCH_ACTION action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::TouchInfo_TOUCH_ACTION_IsValid(val))) {
            _internal_set_action(static_cast<::HU::TouchInfo_TOUCH_ACTION>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TouchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.TouchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HU.TouchInfo.Location location = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_location_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_location(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_index(), target);
  }

  // required .HU.TouchInfo.TOUCH_ACTION action = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.TouchInfo)
  return target;
}

size_t TouchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.TouchInfo)
  size_t total_size = 0;

  // required .HU.TouchInfo.TOUCH_ACTION action = 3;
  if (_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.TouchInfo.Location location = 1;
  total_size += 1UL * this->_internal_location_size();
  for (const auto& msg : this->location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 action_index = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_action_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TouchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.TouchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TouchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TouchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.TouchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.TouchInfo)
    MergeFrom(*source);
  }
}

void TouchInfo::MergeFrom(const TouchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.TouchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_.MergeFrom(from.location_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      action_index_ = from.action_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TouchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.TouchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchInfo::CopyFrom(const TouchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.TouchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(location_)) return false;
  return true;
}

void TouchInfo::InternalSwap(TouchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  location_.InternalSwap(&other->location_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TouchInfo, action_)
      + sizeof(TouchInfo::action_)
      - PROTOBUF_FIELD_OFFSET(TouchInfo, action_index_)>(
          reinterpret_cast<char*>(&action_index_),
          reinterpret_cast<char*>(&other->action_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TouchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelativeInputEvent::InitAsDefaultInstance() {
}
class RelativeInputEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeInputEvent>()._has_bits_);
  static void set_has_scan_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RelativeInputEvent::RelativeInputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.RelativeInputEvent)
}
RelativeInputEvent::RelativeInputEvent(const RelativeInputEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scan_code_, &from.scan_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&scan_code_)) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:HU.RelativeInputEvent)
}

void RelativeInputEvent::SharedCtor() {
  ::memset(&scan_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_) -
      reinterpret_cast<char*>(&scan_code_)) + sizeof(delta_));
}

RelativeInputEvent::~RelativeInputEvent() {
  // @@protoc_insertion_point(destructor:HU.RelativeInputEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelativeInputEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelativeInputEvent::ArenaDtor(void* object) {
  RelativeInputEvent* _this = reinterpret_cast< RelativeInputEvent* >(object);
  (void)_this;
}
void RelativeInputEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelativeInputEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelativeInputEvent& RelativeInputEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelativeInputEvent_hu_2eproto.base);
  return *internal_default_instance();
}


void RelativeInputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.RelativeInputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&scan_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delta_) -
        reinterpret_cast<char*>(&scan_code_)) + sizeof(delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelativeInputEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 scan_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_scan_code(&has_bits);
          scan_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelativeInputEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.RelativeInputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 scan_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_scan_code(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.RelativeInputEvent)
  return target;
}

size_t RelativeInputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.RelativeInputEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 scan_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scan_code());
    }

    // optional int32 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_delta());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativeInputEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.RelativeInputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeInputEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelativeInputEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.RelativeInputEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.RelativeInputEvent)
    MergeFrom(*source);
  }
}

void RelativeInputEvent::MergeFrom(const RelativeInputEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.RelativeInputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scan_code_ = from.scan_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelativeInputEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.RelativeInputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeInputEvent::CopyFrom(const RelativeInputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.RelativeInputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeInputEvent::IsInitialized() const {
  return true;
}

void RelativeInputEvent::InternalSwap(RelativeInputEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelativeInputEvent, delta_)
      + sizeof(RelativeInputEvent::delta_)
      - PROTOBUF_FIELD_OFFSET(RelativeInputEvent, scan_code_)>(
          reinterpret_cast<char*>(&scan_code_),
          reinterpret_cast<char*>(&other->scan_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeInputEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbsoluteInputEvent::InitAsDefaultInstance() {
}
class AbsoluteInputEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AbsoluteInputEvent>()._has_bits_);
  static void set_has_scan_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AbsoluteInputEvent::AbsoluteInputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.AbsoluteInputEvent)
}
AbsoluteInputEvent::AbsoluteInputEvent(const AbsoluteInputEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scan_code_, &from.scan_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&scan_code_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:HU.AbsoluteInputEvent)
}

void AbsoluteInputEvent::SharedCtor() {
  ::memset(&scan_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&scan_code_)) + sizeof(value_));
}

AbsoluteInputEvent::~AbsoluteInputEvent() {
  // @@protoc_insertion_point(destructor:HU.AbsoluteInputEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbsoluteInputEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbsoluteInputEvent::ArenaDtor(void* object) {
  AbsoluteInputEvent* _this = reinterpret_cast< AbsoluteInputEvent* >(object);
  (void)_this;
}
void AbsoluteInputEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbsoluteInputEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbsoluteInputEvent& AbsoluteInputEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbsoluteInputEvent_hu_2eproto.base);
  return *internal_default_instance();
}


void AbsoluteInputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.AbsoluteInputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&scan_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&scan_code_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbsoluteInputEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 scan_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_scan_code(&has_bits);
          scan_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbsoluteInputEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.AbsoluteInputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 scan_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_scan_code(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.AbsoluteInputEvent)
  return target;
}

size_t AbsoluteInputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.AbsoluteInputEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 scan_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scan_code());
    }

    // optional int32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbsoluteInputEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.AbsoluteInputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AbsoluteInputEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbsoluteInputEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.AbsoluteInputEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.AbsoluteInputEvent)
    MergeFrom(*source);
  }
}

void AbsoluteInputEvent::MergeFrom(const AbsoluteInputEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.AbsoluteInputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scan_code_ = from.scan_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AbsoluteInputEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.AbsoluteInputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsoluteInputEvent::CopyFrom(const AbsoluteInputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.AbsoluteInputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsoluteInputEvent::IsInitialized() const {
  return true;
}

void AbsoluteInputEvent::InternalSwap(AbsoluteInputEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbsoluteInputEvent, value_)
      + sizeof(AbsoluteInputEvent::value_)
      - PROTOBUF_FIELD_OFFSET(AbsoluteInputEvent, scan_code_)>(
          reinterpret_cast<char*>(&scan_code_),
          reinterpret_cast<char*>(&other->scan_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsoluteInputEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbsoluteInputEventWrapper::InitAsDefaultInstance() {
  ::HU::_AbsoluteInputEventWrapper_default_instance_._instance.get_mutable()->event_ = const_cast< ::HU::AbsoluteInputEvent*>(
      ::HU::AbsoluteInputEvent::internal_default_instance());
}
class AbsoluteInputEventWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<AbsoluteInputEventWrapper>()._has_bits_);
  static const ::HU::AbsoluteInputEvent& event(const AbsoluteInputEventWrapper* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::HU::AbsoluteInputEvent&
AbsoluteInputEventWrapper::_Internal::event(const AbsoluteInputEventWrapper* msg) {
  return *msg->event_;
}
AbsoluteInputEventWrapper::AbsoluteInputEventWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.AbsoluteInputEventWrapper)
}
AbsoluteInputEventWrapper::AbsoluteInputEventWrapper(const AbsoluteInputEventWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::HU::AbsoluteInputEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HU.AbsoluteInputEventWrapper)
}

void AbsoluteInputEventWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AbsoluteInputEventWrapper_hu_2eproto.base);
  event_ = nullptr;
}

AbsoluteInputEventWrapper::~AbsoluteInputEventWrapper() {
  // @@protoc_insertion_point(destructor:HU.AbsoluteInputEventWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbsoluteInputEventWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete event_;
}

void AbsoluteInputEventWrapper::ArenaDtor(void* object) {
  AbsoluteInputEventWrapper* _this = reinterpret_cast< AbsoluteInputEventWrapper* >(object);
  (void)_this;
}
void AbsoluteInputEventWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbsoluteInputEventWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbsoluteInputEventWrapper& AbsoluteInputEventWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbsoluteInputEventWrapper_hu_2eproto.base);
  return *internal_default_instance();
}


void AbsoluteInputEventWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.AbsoluteInputEventWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_ != nullptr);
    event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbsoluteInputEventWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.AbsoluteInputEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbsoluteInputEventWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.AbsoluteInputEventWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.AbsoluteInputEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.AbsoluteInputEventWrapper)
  return target;
}

size_t AbsoluteInputEventWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.AbsoluteInputEventWrapper)
  size_t total_size = 0;

  // required .HU.AbsoluteInputEvent event = 1;
  if (_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbsoluteInputEventWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.AbsoluteInputEventWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const AbsoluteInputEventWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbsoluteInputEventWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.AbsoluteInputEventWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.AbsoluteInputEventWrapper)
    MergeFrom(*source);
  }
}

void AbsoluteInputEventWrapper::MergeFrom(const AbsoluteInputEventWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.AbsoluteInputEventWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_mutable_event()->::HU::AbsoluteInputEvent::MergeFrom(from._internal_event());
  }
}

void AbsoluteInputEventWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.AbsoluteInputEventWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsoluteInputEventWrapper::CopyFrom(const AbsoluteInputEventWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.AbsoluteInputEventWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsoluteInputEventWrapper::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AbsoluteInputEventWrapper::InternalSwap(AbsoluteInputEventWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsoluteInputEventWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelativeInputEventWrapper::InitAsDefaultInstance() {
  ::HU::_RelativeInputEventWrapper_default_instance_._instance.get_mutable()->event_ = const_cast< ::HU::RelativeInputEvent*>(
      ::HU::RelativeInputEvent::internal_default_instance());
}
class RelativeInputEventWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeInputEventWrapper>()._has_bits_);
  static const ::HU::RelativeInputEvent& event(const RelativeInputEventWrapper* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::HU::RelativeInputEvent&
RelativeInputEventWrapper::_Internal::event(const RelativeInputEventWrapper* msg) {
  return *msg->event_;
}
RelativeInputEventWrapper::RelativeInputEventWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.RelativeInputEventWrapper)
}
RelativeInputEventWrapper::RelativeInputEventWrapper(const RelativeInputEventWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::HU::RelativeInputEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HU.RelativeInputEventWrapper)
}

void RelativeInputEventWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelativeInputEventWrapper_hu_2eproto.base);
  event_ = nullptr;
}

RelativeInputEventWrapper::~RelativeInputEventWrapper() {
  // @@protoc_insertion_point(destructor:HU.RelativeInputEventWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelativeInputEventWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete event_;
}

void RelativeInputEventWrapper::ArenaDtor(void* object) {
  RelativeInputEventWrapper* _this = reinterpret_cast< RelativeInputEventWrapper* >(object);
  (void)_this;
}
void RelativeInputEventWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelativeInputEventWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelativeInputEventWrapper& RelativeInputEventWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelativeInputEventWrapper_hu_2eproto.base);
  return *internal_default_instance();
}


void RelativeInputEventWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.RelativeInputEventWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_ != nullptr);
    event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelativeInputEventWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.RelativeInputEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelativeInputEventWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.RelativeInputEventWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.RelativeInputEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.RelativeInputEventWrapper)
  return target;
}

size_t RelativeInputEventWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.RelativeInputEventWrapper)
  size_t total_size = 0;

  // required .HU.RelativeInputEvent event = 1;
  if (_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativeInputEventWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.RelativeInputEventWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeInputEventWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelativeInputEventWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.RelativeInputEventWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.RelativeInputEventWrapper)
    MergeFrom(*source);
  }
}

void RelativeInputEventWrapper::MergeFrom(const RelativeInputEventWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.RelativeInputEventWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_mutable_event()->::HU::RelativeInputEvent::MergeFrom(from._internal_event());
  }
}

void RelativeInputEventWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.RelativeInputEventWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeInputEventWrapper::CopyFrom(const RelativeInputEventWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.RelativeInputEventWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeInputEventWrapper::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RelativeInputEventWrapper::InternalSwap(RelativeInputEventWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeInputEventWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputEvent::InitAsDefaultInstance() {
  ::HU::_InputEvent_default_instance_._instance.get_mutable()->touch_ = const_cast< ::HU::TouchInfo*>(
      ::HU::TouchInfo::internal_default_instance());
  ::HU::_InputEvent_default_instance_._instance.get_mutable()->button_ = const_cast< ::HU::ButtonInfoWrapper*>(
      ::HU::ButtonInfoWrapper::internal_default_instance());
  ::HU::_InputEvent_default_instance_._instance.get_mutable()->abs_event_ = const_cast< ::HU::AbsoluteInputEventWrapper*>(
      ::HU::AbsoluteInputEventWrapper::internal_default_instance());
  ::HU::_InputEvent_default_instance_._instance.get_mutable()->rel_event_ = const_cast< ::HU::RelativeInputEventWrapper*>(
      ::HU::RelativeInputEventWrapper::internal_default_instance());
}
class InputEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<InputEvent>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disp_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::HU::TouchInfo& touch(const InputEvent* msg);
  static void set_has_touch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HU::ButtonInfoWrapper& button(const InputEvent* msg);
  static void set_has_button(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::HU::AbsoluteInputEventWrapper& abs_event(const InputEvent* msg);
  static void set_has_abs_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HU::RelativeInputEventWrapper& rel_event(const InputEvent* msg);
  static void set_has_rel_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::HU::TouchInfo&
InputEvent::_Internal::touch(const InputEvent* msg) {
  return *msg->touch_;
}
const ::HU::ButtonInfoWrapper&
InputEvent::_Internal::button(const InputEvent* msg) {
  return *msg->button_;
}
const ::HU::AbsoluteInputEventWrapper&
InputEvent::_Internal::abs_event(const InputEvent* msg) {
  return *msg->abs_event_;
}
const ::HU::RelativeInputEventWrapper&
InputEvent::_Internal::rel_event(const InputEvent* msg) {
  return *msg->rel_event_;
}
InputEvent::InputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.InputEvent)
}
InputEvent::InputEvent(const InputEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_touch()) {
    touch_ = new ::HU::TouchInfo(*from.touch_);
  } else {
    touch_ = nullptr;
  }
  if (from._internal_has_button()) {
    button_ = new ::HU::ButtonInfoWrapper(*from.button_);
  } else {
    button_ = nullptr;
  }
  if (from._internal_has_abs_event()) {
    abs_event_ = new ::HU::AbsoluteInputEventWrapper(*from.abs_event_);
  } else {
    abs_event_ = nullptr;
  }
  if (from._internal_has_rel_event()) {
    rel_event_ = new ::HU::RelativeInputEventWrapper(*from.rel_event_);
  } else {
    rel_event_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&disp_channel_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(disp_channel_));
  // @@protoc_insertion_point(copy_constructor:HU.InputEvent)
}

void InputEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputEvent_hu_2eproto.base);
  ::memset(&touch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disp_channel_) -
      reinterpret_cast<char*>(&touch_)) + sizeof(disp_channel_));
}

InputEvent::~InputEvent() {
  // @@protoc_insertion_point(destructor:HU.InputEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete touch_;
  if (this != internal_default_instance()) delete button_;
  if (this != internal_default_instance()) delete abs_event_;
  if (this != internal_default_instance()) delete rel_event_;
}

void InputEvent::ArenaDtor(void* object) {
  InputEvent* _this = reinterpret_cast< InputEvent* >(object);
  (void)_this;
}
void InputEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputEvent& InputEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputEvent_hu_2eproto.base);
  return *internal_default_instance();
}


void InputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.InputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(touch_ != nullptr);
      touch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(button_ != nullptr);
      button_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(abs_event_ != nullptr);
      abs_event_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rel_event_ != nullptr);
      rel_event_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disp_channel_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(disp_channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 disp_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_disp_channel(&has_bits);
          disp_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.TouchInfo touch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ButtonInfoWrapper button = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_button(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.AbsoluteInputEventWrapper abs_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_abs_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.RelativeInputEventWrapper rel_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rel_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.InputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional int32 disp_channel = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_disp_channel(), target);
  }

  // optional .HU.TouchInfo touch = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::touch(this), target, stream);
  }

  // optional .HU.ButtonInfoWrapper button = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::button(this), target, stream);
  }

  // optional .HU.AbsoluteInputEventWrapper abs_event = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::abs_event(this), target, stream);
  }

  // optional .HU.RelativeInputEventWrapper rel_event = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rel_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.InputEvent)
  return target;
}

size_t InputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.InputEvent)
  size_t total_size = 0;

  // required uint64 timestamp = 1;
  if (_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .HU.TouchInfo touch = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_);
    }

    // optional .HU.ButtonInfoWrapper button = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *button_);
    }

    // optional .HU.AbsoluteInputEventWrapper abs_event = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abs_event_);
    }

    // optional .HU.RelativeInputEventWrapper rel_event = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rel_event_);
    }

  }
  // optional int32 disp_channel = 2;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disp_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.InputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const InputEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.InputEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.InputEvent)
    MergeFrom(*source);
  }
}

void InputEvent::MergeFrom(const InputEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.InputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_touch()->::HU::TouchInfo::MergeFrom(from._internal_touch());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_button()->::HU::ButtonInfoWrapper::MergeFrom(from._internal_button());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_abs_event()->::HU::AbsoluteInputEventWrapper::MergeFrom(from._internal_abs_event());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rel_event()->::HU::RelativeInputEventWrapper::MergeFrom(from._internal_rel_event());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      disp_channel_ = from.disp_channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.InputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputEvent::CopyFrom(const InputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.InputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_touch()) {
    if (!touch_->IsInitialized()) return false;
  }
  if (_internal_has_button()) {
    if (!button_->IsInitialized()) return false;
  }
  if (_internal_has_abs_event()) {
    if (!abs_event_->IsInitialized()) return false;
  }
  if (_internal_has_rel_event()) {
    if (!rel_event_->IsInitialized()) return false;
  }
  return true;
}

void InputEvent::InternalSwap(InputEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputEvent, disp_channel_)
      + sizeof(InputEvent::disp_channel_)
      - PROTOBUF_FIELD_OFFSET(InputEvent, touch_)>(
          reinterpret_cast<char*>(&touch_),
          reinterpret_cast<char*>(&other->touch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BindingRequest::InitAsDefaultInstance() {
}
class BindingRequest::_Internal {
 public:
};

BindingRequest::BindingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scan_codes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.BindingRequest)
}
BindingRequest::BindingRequest(const BindingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scan_codes_(from.scan_codes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.BindingRequest)
}

void BindingRequest::SharedCtor() {
}

BindingRequest::~BindingRequest() {
  // @@protoc_insertion_point(destructor:HU.BindingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BindingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BindingRequest::ArenaDtor(void* object) {
  BindingRequest* _this = reinterpret_cast< BindingRequest* >(object);
  (void)_this;
}
void BindingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BindingRequest& BindingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BindingRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void BindingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.BindingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scan_codes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 scan_codes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_scan_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_scan_codes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.BindingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 scan_codes = 1;
  for (int i = 0, n = this->_internal_scan_codes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scan_codes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.BindingRequest)
  return target;
}

size_t BindingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.BindingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 scan_codes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->scan_codes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scan_codes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.BindingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.BindingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.BindingRequest)
    MergeFrom(*source);
  }
}

void BindingRequest::MergeFrom(const BindingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.BindingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scan_codes_.MergeFrom(from.scan_codes_);
}

void BindingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.BindingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindingRequest::CopyFrom(const BindingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.BindingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindingRequest::IsInitialized() const {
  return true;
}

void BindingRequest::InternalSwap(BindingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scan_codes_.InternalSwap(&other->scan_codes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BindingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BindingResponse::InitAsDefaultInstance() {
}
class BindingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BindingResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BindingResponse::BindingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.BindingResponse)
}
BindingResponse::BindingResponse(const BindingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:HU.BindingResponse)
}

void BindingResponse::SharedCtor() {
  status_ = 0;
}

BindingResponse::~BindingResponse() {
  // @@protoc_insertion_point(destructor:HU.BindingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BindingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BindingResponse::ArenaDtor(void* object) {
  BindingResponse* _this = reinterpret_cast< BindingResponse* >(object);
  (void)_this;
}
void BindingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BindingResponse& BindingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BindingResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void BindingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.BindingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.STATUS status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::STATUS_IsValid(val))) {
            _internal_set_status(static_cast<::HU::STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BindingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.BindingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.STATUS status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.BindingResponse)
  return target;
}

size_t BindingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.BindingResponse)
  size_t total_size = 0;

  // required .HU.STATUS status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BindingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.BindingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BindingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.BindingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.BindingResponse)
    MergeFrom(*source);
  }
}

void BindingResponse::MergeFrom(const BindingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.BindingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void BindingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.BindingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindingResponse::CopyFrom(const BindingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.BindingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindingResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BindingResponse::InternalSwap(BindingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BindingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_LocationData::InitAsDefaultInstance() {
}
class SensorEvent_LocationData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_LocationData>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bearing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SensorEvent_LocationData::SensorEvent_LocationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.LocationData)
}
SensorEvent_LocationData::SensorEvent_LocationData(const SensorEvent_LocationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&bearing_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(bearing_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.LocationData)
}

void SensorEvent_LocationData::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bearing_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(bearing_));
}

SensorEvent_LocationData::~SensorEvent_LocationData() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.LocationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_LocationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_LocationData::ArenaDtor(void* object) {
  SensorEvent_LocationData* _this = reinterpret_cast< SensorEvent_LocationData* >(object);
  (void)_this;
}
void SensorEvent_LocationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_LocationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_LocationData& SensorEvent_LocationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_LocationData_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_LocationData::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.LocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bearing_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(bearing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_LocationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accuracy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_accuracy(&has_bits);
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bearing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bearing(&has_bits);
          bearing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_LocationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.LocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional int32 latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_latitude(), target);
  }

  // optional int32 longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_longitude(), target);
  }

  // optional uint32 accuracy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_accuracy(), target);
  }

  // optional int32 altitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_altitude(), target);
  }

  // optional int32 speed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_speed(), target);
  }

  // optional int32 bearing = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_bearing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.LocationData)
  return target;
}

size_t SensorEvent_LocationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.LocationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional int32 latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_latitude());
    }

    // optional int32 longitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_longitude());
    }

    // optional uint32 accuracy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accuracy());
    }

    // optional int32 altitude = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_altitude());
    }

    // optional int32 speed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_speed());
    }

    // optional int32 bearing = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bearing());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_LocationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.LocationData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_LocationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_LocationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.LocationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.LocationData)
    MergeFrom(*source);
  }
}

void SensorEvent_LocationData::MergeFrom(const SensorEvent_LocationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.LocationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      accuracy_ = from.accuracy_;
    }
    if (cached_has_bits & 0x00000010u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      bearing_ = from.bearing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_LocationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.LocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_LocationData::CopyFrom(const SensorEvent_LocationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.LocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_LocationData::IsInitialized() const {
  return true;
}

void SensorEvent_LocationData::InternalSwap(SensorEvent_LocationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_LocationData, bearing_)
      + sizeof(SensorEvent_LocationData::bearing_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_LocationData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_LocationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_NightMode::InitAsDefaultInstance() {
}
class SensorEvent_NightMode::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_NightMode>()._has_bits_);
  static void set_has_is_night(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SensorEvent_NightMode::SensorEvent_NightMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.NightMode)
}
SensorEvent_NightMode::SensorEvent_NightMode(const SensorEvent_NightMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_night_ = from.is_night_;
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.NightMode)
}

void SensorEvent_NightMode::SharedCtor() {
  is_night_ = false;
}

SensorEvent_NightMode::~SensorEvent_NightMode() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.NightMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_NightMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_NightMode::ArenaDtor(void* object) {
  SensorEvent_NightMode* _this = reinterpret_cast< SensorEvent_NightMode* >(object);
  (void)_this;
}
void SensorEvent_NightMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_NightMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_NightMode& SensorEvent_NightMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_NightMode_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_NightMode::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.NightMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_night_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_NightMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool is_night = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_night(&has_bits);
          is_night_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_NightMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.NightMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_night = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_night(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.NightMode)
  return target;
}

size_t SensorEvent_NightMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.NightMode)
  size_t total_size = 0;

  // required bool is_night = 1;
  if (_internal_has_is_night()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_NightMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.NightMode)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_NightMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_NightMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.NightMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.NightMode)
    MergeFrom(*source);
  }
}

void SensorEvent_NightMode::MergeFrom(const SensorEvent_NightMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.NightMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_night()) {
    _internal_set_is_night(from._internal_is_night());
  }
}

void SensorEvent_NightMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.NightMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_NightMode::CopyFrom(const SensorEvent_NightMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.NightMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_NightMode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorEvent_NightMode::InternalSwap(SensorEvent_NightMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_night_, other->is_night_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_NightMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_RPM::InitAsDefaultInstance() {
}
class SensorEvent_RPM::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_RPM>()._has_bits_);
  static void set_has_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SensorEvent_RPM::SensorEvent_RPM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.RPM)
}
SensorEvent_RPM::SensorEvent_RPM(const SensorEvent_RPM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpm_ = from.rpm_;
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.RPM)
}

void SensorEvent_RPM::SharedCtor() {
  rpm_ = 0;
}

SensorEvent_RPM::~SensorEvent_RPM() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.RPM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_RPM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_RPM::ArenaDtor(void* object) {
  SensorEvent_RPM* _this = reinterpret_cast< SensorEvent_RPM* >(object);
  (void)_this;
}
void SensorEvent_RPM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_RPM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_RPM& SensorEvent_RPM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_RPM_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_RPM::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.RPM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_RPM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 rpm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rpm(&has_bits);
          rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_RPM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.RPM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rpm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.RPM)
  return target;
}

size_t SensorEvent_RPM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.RPM)
  size_t total_size = 0;

  // required int32 rpm = 1;
  if (_internal_has_rpm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpm());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_RPM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.RPM)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_RPM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_RPM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.RPM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.RPM)
    MergeFrom(*source);
  }
}

void SensorEvent_RPM::MergeFrom(const SensorEvent_RPM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.RPM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rpm()) {
    _internal_set_rpm(from._internal_rpm());
  }
}

void SensorEvent_RPM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.RPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_RPM::CopyFrom(const SensorEvent_RPM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.RPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_RPM::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorEvent_RPM::InternalSwap(SensorEvent_RPM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rpm_, other->rpm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_RPM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_FuelLevel::InitAsDefaultInstance() {
}
class SensorEvent_FuelLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_FuelLevel>()._has_bits_);
  static void set_has_fuel_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_low_fuel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SensorEvent_FuelLevel::SensorEvent_FuelLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.FuelLevel)
}
SensorEvent_FuelLevel::SensorEvent_FuelLevel(const SensorEvent_FuelLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fuel_level_, &from.fuel_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_fuel_) -
    reinterpret_cast<char*>(&fuel_level_)) + sizeof(low_fuel_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.FuelLevel)
}

void SensorEvent_FuelLevel::SharedCtor() {
  ::memset(&fuel_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_fuel_) -
      reinterpret_cast<char*>(&fuel_level_)) + sizeof(low_fuel_));
}

SensorEvent_FuelLevel::~SensorEvent_FuelLevel() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.FuelLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_FuelLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_FuelLevel::ArenaDtor(void* object) {
  SensorEvent_FuelLevel* _this = reinterpret_cast< SensorEvent_FuelLevel* >(object);
  (void)_this;
}
void SensorEvent_FuelLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_FuelLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_FuelLevel& SensorEvent_FuelLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_FuelLevel_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_FuelLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.FuelLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fuel_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_fuel_) -
        reinterpret_cast<char*>(&fuel_level_)) + sizeof(low_fuel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_FuelLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 fuel_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fuel_level(&has_bits);
          fuel_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_fuel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_low_fuel(&has_bits);
          low_fuel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_FuelLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.FuelLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fuel_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fuel_level(), target);
  }

  // optional int32 range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_range(), target);
  }

  // optional bool low_fuel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_low_fuel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.FuelLevel)
  return target;
}

size_t SensorEvent_FuelLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.FuelLevel)
  size_t total_size = 0;

  // required int32 fuel_level = 1;
  if (_internal_has_fuel_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fuel_level());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_range());
    }

    // optional bool low_fuel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_FuelLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.FuelLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_FuelLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_FuelLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.FuelLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.FuelLevel)
    MergeFrom(*source);
  }
}

void SensorEvent_FuelLevel::MergeFrom(const SensorEvent_FuelLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.FuelLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fuel_level_ = from.fuel_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_fuel_ = from.low_fuel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_FuelLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.FuelLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_FuelLevel::CopyFrom(const SensorEvent_FuelLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.FuelLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_FuelLevel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorEvent_FuelLevel::InternalSwap(SensorEvent_FuelLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_FuelLevel, low_fuel_)
      + sizeof(SensorEvent_FuelLevel::low_fuel_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_FuelLevel, fuel_level_)>(
          reinterpret_cast<char*>(&fuel_level_),
          reinterpret_cast<char*>(&other->fuel_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_FuelLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_DrivingStatus::InitAsDefaultInstance() {
}
class SensorEvent_DrivingStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_DrivingStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SensorEvent_DrivingStatus::SensorEvent_DrivingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.DrivingStatus)
}
SensorEvent_DrivingStatus::SensorEvent_DrivingStatus(const SensorEvent_DrivingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.DrivingStatus)
}

void SensorEvent_DrivingStatus::SharedCtor() {
  status_ = 0;
}

SensorEvent_DrivingStatus::~SensorEvent_DrivingStatus() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.DrivingStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_DrivingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_DrivingStatus::ArenaDtor(void* object) {
  SensorEvent_DrivingStatus* _this = reinterpret_cast< SensorEvent_DrivingStatus* >(object);
  (void)_this;
}
void SensorEvent_DrivingStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_DrivingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_DrivingStatus& SensorEvent_DrivingStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_DrivingStatus_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_DrivingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.DrivingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_DrivingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_DrivingStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.DrivingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.DrivingStatus)
  return target;
}

size_t SensorEvent_DrivingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.DrivingStatus)
  size_t total_size = 0;

  // required int32 status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_DrivingStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.DrivingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_DrivingStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_DrivingStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.DrivingStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.DrivingStatus)
    MergeFrom(*source);
  }
}

void SensorEvent_DrivingStatus::MergeFrom(const SensorEvent_DrivingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.DrivingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void SensorEvent_DrivingStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.DrivingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_DrivingStatus::CopyFrom(const SensorEvent_DrivingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.DrivingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_DrivingStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorEvent_DrivingStatus::InternalSwap(SensorEvent_DrivingStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_DrivingStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_DeadReckoning::InitAsDefaultInstance() {
}
class SensorEvent_DeadReckoning::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_DeadReckoning>()._has_bits_);
  static void set_has_steering_angel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wheel_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorEvent_DeadReckoning::SensorEvent_DeadReckoning(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.DeadReckoning)
}
SensorEvent_DeadReckoning::SensorEvent_DeadReckoning(const SensorEvent_DeadReckoning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steering_angel_, &from.steering_angel_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_speed_) -
    reinterpret_cast<char*>(&steering_angel_)) + sizeof(wheel_speed_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.DeadReckoning)
}

void SensorEvent_DeadReckoning::SharedCtor() {
  ::memset(&steering_angel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_speed_) -
      reinterpret_cast<char*>(&steering_angel_)) + sizeof(wheel_speed_));
}

SensorEvent_DeadReckoning::~SensorEvent_DeadReckoning() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.DeadReckoning)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_DeadReckoning::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_DeadReckoning::ArenaDtor(void* object) {
  SensorEvent_DeadReckoning* _this = reinterpret_cast< SensorEvent_DeadReckoning* >(object);
  (void)_this;
}
void SensorEvent_DeadReckoning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_DeadReckoning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_DeadReckoning& SensorEvent_DeadReckoning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_DeadReckoning_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_DeadReckoning::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.DeadReckoning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steering_angel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_speed_) -
        reinterpret_cast<char*>(&steering_angel_)) + sizeof(wheel_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_DeadReckoning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 steering_angel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steering_angel(&has_bits);
          steering_angel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wheel_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wheel_speed(&has_bits);
          wheel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_DeadReckoning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.DeadReckoning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 steering_angel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_steering_angel(), target);
  }

  // optional int32 wheel_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wheel_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.DeadReckoning)
  return target;
}

size_t SensorEvent_DeadReckoning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.DeadReckoning)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 steering_angel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_steering_angel());
    }

    // optional int32 wheel_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wheel_speed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_DeadReckoning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.DeadReckoning)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_DeadReckoning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_DeadReckoning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.DeadReckoning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.DeadReckoning)
    MergeFrom(*source);
  }
}

void SensorEvent_DeadReckoning::MergeFrom(const SensorEvent_DeadReckoning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.DeadReckoning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steering_angel_ = from.steering_angel_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_speed_ = from.wheel_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_DeadReckoning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.DeadReckoning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_DeadReckoning::CopyFrom(const SensorEvent_DeadReckoning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.DeadReckoning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_DeadReckoning::IsInitialized() const {
  return true;
}

void SensorEvent_DeadReckoning::InternalSwap(SensorEvent_DeadReckoning* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_DeadReckoning, wheel_speed_)
      + sizeof(SensorEvent_DeadReckoning::wheel_speed_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_DeadReckoning, steering_angel_)>(
          reinterpret_cast<char*>(&steering_angel_),
          reinterpret_cast<char*>(&other->steering_angel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_DeadReckoning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_CompassData::InitAsDefaultInstance() {
}
class SensorEvent_CompassData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_CompassData>()._has_bits_);
  static void set_has_bearing_e6(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch_e6(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roll_e6(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorEvent_CompassData::SensorEvent_CompassData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.CompassData)
}
SensorEvent_CompassData::SensorEvent_CompassData(const SensorEvent_CompassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bearing_e6_, &from.bearing_e6_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_e6_) -
    reinterpret_cast<char*>(&bearing_e6_)) + sizeof(roll_e6_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.CompassData)
}

void SensorEvent_CompassData::SharedCtor() {
  ::memset(&bearing_e6_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_e6_) -
      reinterpret_cast<char*>(&bearing_e6_)) + sizeof(roll_e6_));
}

SensorEvent_CompassData::~SensorEvent_CompassData() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.CompassData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_CompassData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_CompassData::ArenaDtor(void* object) {
  SensorEvent_CompassData* _this = reinterpret_cast< SensorEvent_CompassData* >(object);
  (void)_this;
}
void SensorEvent_CompassData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_CompassData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_CompassData& SensorEvent_CompassData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_CompassData_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_CompassData::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.CompassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&bearing_e6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_e6_) -
        reinterpret_cast<char*>(&bearing_e6_)) + sizeof(roll_e6_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_CompassData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bearing_e6 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bearing_e6(&has_bits);
          bearing_e6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pitch_e6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pitch_e6(&has_bits);
          pitch_e6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 roll_e6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_roll_e6(&has_bits);
          roll_e6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_CompassData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.CompassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bearing_e6 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bearing_e6(), target);
  }

  // optional int32 pitch_e6 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pitch_e6(), target);
  }

  // optional int32 roll_e6 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_roll_e6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.CompassData)
  return target;
}

size_t SensorEvent_CompassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.CompassData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 bearing_e6 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bearing_e6());
    }

    // optional int32 pitch_e6 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pitch_e6());
    }

    // optional int32 roll_e6 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_roll_e6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_CompassData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.CompassData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_CompassData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_CompassData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.CompassData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.CompassData)
    MergeFrom(*source);
  }
}

void SensorEvent_CompassData::MergeFrom(const SensorEvent_CompassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.CompassData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bearing_e6_ = from.bearing_e6_;
    }
    if (cached_has_bits & 0x00000002u) {
      pitch_e6_ = from.pitch_e6_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_e6_ = from.roll_e6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_CompassData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.CompassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_CompassData::CopyFrom(const SensorEvent_CompassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.CompassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_CompassData::IsInitialized() const {
  return true;
}

void SensorEvent_CompassData::InternalSwap(SensorEvent_CompassData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_CompassData, roll_e6_)
      + sizeof(SensorEvent_CompassData::roll_e6_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_CompassData, bearing_e6_)>(
          reinterpret_cast<char*>(&bearing_e6_),
          reinterpret_cast<char*>(&other->bearing_e6_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_CompassData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_SpeedData::InitAsDefaultInstance() {
}
class SensorEvent_SpeedData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_SpeedData>()._has_bits_);
  static void set_has_speed_e6(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cruise_engaged(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cruise_set_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorEvent_SpeedData::SensorEvent_SpeedData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.SpeedData)
}
SensorEvent_SpeedData::SensorEvent_SpeedData(const SensorEvent_SpeedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_e6_, &from.speed_e6_,
    static_cast<size_t>(reinterpret_cast<char*>(&cruise_set_speed_) -
    reinterpret_cast<char*>(&speed_e6_)) + sizeof(cruise_set_speed_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.SpeedData)
}

void SensorEvent_SpeedData::SharedCtor() {
  ::memset(&speed_e6_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cruise_set_speed_) -
      reinterpret_cast<char*>(&speed_e6_)) + sizeof(cruise_set_speed_));
}

SensorEvent_SpeedData::~SensorEvent_SpeedData() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.SpeedData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_SpeedData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_SpeedData::ArenaDtor(void* object) {
  SensorEvent_SpeedData* _this = reinterpret_cast< SensorEvent_SpeedData* >(object);
  (void)_this;
}
void SensorEvent_SpeedData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_SpeedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_SpeedData& SensorEvent_SpeedData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_SpeedData_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_SpeedData::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.SpeedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&speed_e6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cruise_set_speed_) -
        reinterpret_cast<char*>(&speed_e6_)) + sizeof(cruise_set_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_SpeedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 speed_e6 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_speed_e6(&has_bits);
          speed_e6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cruise_engaged = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cruise_engaged(&has_bits);
          cruise_engaged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cruise_set_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cruise_set_speed(&has_bits);
          cruise_set_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_SpeedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.SpeedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 speed_e6 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_speed_e6(), target);
  }

  // optional bool cruise_engaged = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_cruise_engaged(), target);
  }

  // optional bool cruise_set_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cruise_set_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.SpeedData)
  return target;
}

size_t SensorEvent_SpeedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.SpeedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 speed_e6 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_speed_e6());
    }

    // optional bool cruise_engaged = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool cruise_set_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_SpeedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.SpeedData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_SpeedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_SpeedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.SpeedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.SpeedData)
    MergeFrom(*source);
  }
}

void SensorEvent_SpeedData::MergeFrom(const SensorEvent_SpeedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.SpeedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      speed_e6_ = from.speed_e6_;
    }
    if (cached_has_bits & 0x00000002u) {
      cruise_engaged_ = from.cruise_engaged_;
    }
    if (cached_has_bits & 0x00000004u) {
      cruise_set_speed_ = from.cruise_set_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_SpeedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.SpeedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_SpeedData::CopyFrom(const SensorEvent_SpeedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.SpeedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_SpeedData::IsInitialized() const {
  return true;
}

void SensorEvent_SpeedData::InternalSwap(SensorEvent_SpeedData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_SpeedData, cruise_set_speed_)
      + sizeof(SensorEvent_SpeedData::cruise_set_speed_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_SpeedData, speed_e6_)>(
          reinterpret_cast<char*>(&speed_e6_),
          reinterpret_cast<char*>(&other->speed_e6_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_SpeedData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_OdometerData::InitAsDefaultInstance() {
}
class SensorEvent_OdometerData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_OdometerData>()._has_bits_);
  static void set_has_kms_el(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trip_kms_el(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorEvent_OdometerData::SensorEvent_OdometerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.OdometerData)
}
SensorEvent_OdometerData::SensorEvent_OdometerData(const SensorEvent_OdometerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kms_el_, &from.kms_el_,
    static_cast<size_t>(reinterpret_cast<char*>(&trip_kms_el_) -
    reinterpret_cast<char*>(&kms_el_)) + sizeof(trip_kms_el_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.OdometerData)
}

void SensorEvent_OdometerData::SharedCtor() {
  ::memset(&kms_el_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trip_kms_el_) -
      reinterpret_cast<char*>(&kms_el_)) + sizeof(trip_kms_el_));
}

SensorEvent_OdometerData::~SensorEvent_OdometerData() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.OdometerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_OdometerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_OdometerData::ArenaDtor(void* object) {
  SensorEvent_OdometerData* _this = reinterpret_cast< SensorEvent_OdometerData* >(object);
  (void)_this;
}
void SensorEvent_OdometerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_OdometerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_OdometerData& SensorEvent_OdometerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_OdometerData_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_OdometerData::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.OdometerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&kms_el_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trip_kms_el_) -
        reinterpret_cast<char*>(&kms_el_)) + sizeof(trip_kms_el_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_OdometerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 kms_el = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kms_el(&has_bits);
          kms_el_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 trip_kms_el = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trip_kms_el(&has_bits);
          trip_kms_el_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_OdometerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.OdometerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kms_el = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kms_el(), target);
  }

  // optional int32 trip_kms_el = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_trip_kms_el(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.OdometerData)
  return target;
}

size_t SensorEvent_OdometerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.OdometerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 kms_el = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kms_el());
    }

    // optional int32 trip_kms_el = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_trip_kms_el());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_OdometerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.OdometerData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_OdometerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_OdometerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.OdometerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.OdometerData)
    MergeFrom(*source);
  }
}

void SensorEvent_OdometerData::MergeFrom(const SensorEvent_OdometerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.OdometerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      kms_el_ = from.kms_el_;
    }
    if (cached_has_bits & 0x00000002u) {
      trip_kms_el_ = from.trip_kms_el_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_OdometerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.OdometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_OdometerData::CopyFrom(const SensorEvent_OdometerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.OdometerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_OdometerData::IsInitialized() const {
  return true;
}

void SensorEvent_OdometerData::InternalSwap(SensorEvent_OdometerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_OdometerData, trip_kms_el_)
      + sizeof(SensorEvent_OdometerData::trip_kms_el_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_OdometerData, kms_el_)>(
          reinterpret_cast<char*>(&kms_el_),
          reinterpret_cast<char*>(&other->kms_el_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_OdometerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_ParkingBreak::InitAsDefaultInstance() {
}
class SensorEvent_ParkingBreak::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_ParkingBreak>()._has_bits_);
  static void set_has_parking_breake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SensorEvent_ParkingBreak::SensorEvent_ParkingBreak(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.ParkingBreak)
}
SensorEvent_ParkingBreak::SensorEvent_ParkingBreak(const SensorEvent_ParkingBreak& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parking_breake_ = from.parking_breake_;
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.ParkingBreak)
}

void SensorEvent_ParkingBreak::SharedCtor() {
  parking_breake_ = false;
}

SensorEvent_ParkingBreak::~SensorEvent_ParkingBreak() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.ParkingBreak)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_ParkingBreak::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_ParkingBreak::ArenaDtor(void* object) {
  SensorEvent_ParkingBreak* _this = reinterpret_cast< SensorEvent_ParkingBreak* >(object);
  (void)_this;
}
void SensorEvent_ParkingBreak::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_ParkingBreak::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_ParkingBreak& SensorEvent_ParkingBreak::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_ParkingBreak_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_ParkingBreak::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.ParkingBreak)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parking_breake_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_ParkingBreak::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool parking_breake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_parking_breake(&has_bits);
          parking_breake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_ParkingBreak::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.ParkingBreak)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool parking_breake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_parking_breake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.ParkingBreak)
  return target;
}

size_t SensorEvent_ParkingBreak::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.ParkingBreak)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool parking_breake = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_ParkingBreak::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.ParkingBreak)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_ParkingBreak* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_ParkingBreak>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.ParkingBreak)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.ParkingBreak)
    MergeFrom(*source);
  }
}

void SensorEvent_ParkingBreak::MergeFrom(const SensorEvent_ParkingBreak& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.ParkingBreak)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parking_breake()) {
    _internal_set_parking_breake(from._internal_parking_breake());
  }
}

void SensorEvent_ParkingBreak::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.ParkingBreak)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_ParkingBreak::CopyFrom(const SensorEvent_ParkingBreak& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.ParkingBreak)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_ParkingBreak::IsInitialized() const {
  return true;
}

void SensorEvent_ParkingBreak::InternalSwap(SensorEvent_ParkingBreak* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parking_breake_, other->parking_breake_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_ParkingBreak::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_Passenger::InitAsDefaultInstance() {
}
class SensorEvent_Passenger::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_Passenger>()._has_bits_);
  static void set_has_passenger_present(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SensorEvent_Passenger::SensorEvent_Passenger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.Passenger)
}
SensorEvent_Passenger::SensorEvent_Passenger(const SensorEvent_Passenger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  passenger_present_ = from.passenger_present_;
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.Passenger)
}

void SensorEvent_Passenger::SharedCtor() {
  passenger_present_ = false;
}

SensorEvent_Passenger::~SensorEvent_Passenger() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.Passenger)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_Passenger::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_Passenger::ArenaDtor(void* object) {
  SensorEvent_Passenger* _this = reinterpret_cast< SensorEvent_Passenger* >(object);
  (void)_this;
}
void SensorEvent_Passenger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_Passenger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_Passenger& SensorEvent_Passenger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_Passenger_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_Passenger::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.Passenger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passenger_present_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_Passenger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool passenger_present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_passenger_present(&has_bits);
          passenger_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_Passenger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.Passenger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool passenger_present = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_passenger_present(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.Passenger)
  return target;
}

size_t SensorEvent_Passenger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.Passenger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool passenger_present = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_Passenger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.Passenger)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_Passenger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_Passenger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.Passenger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.Passenger)
    MergeFrom(*source);
  }
}

void SensorEvent_Passenger::MergeFrom(const SensorEvent_Passenger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.Passenger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_passenger_present()) {
    _internal_set_passenger_present(from._internal_passenger_present());
  }
}

void SensorEvent_Passenger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.Passenger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_Passenger::CopyFrom(const SensorEvent_Passenger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.Passenger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_Passenger::IsInitialized() const {
  return true;
}

void SensorEvent_Passenger::InternalSwap(SensorEvent_Passenger* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(passenger_present_, other->passenger_present_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_Passenger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_Diagnostics::InitAsDefaultInstance() {
}
class SensorEvent_Diagnostics::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_Diagnostics>()._has_bits_);
  static void set_has_diagnostics_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SensorEvent_Diagnostics::SensorEvent_Diagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.Diagnostics)
}
SensorEvent_Diagnostics::SensorEvent_Diagnostics(const SensorEvent_Diagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  diagnostics_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_diagnostics_byte()) {
    diagnostics_byte_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_diagnostics_byte(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.Diagnostics)
}

void SensorEvent_Diagnostics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorEvent_Diagnostics_hu_2eproto.base);
  diagnostics_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SensorEvent_Diagnostics::~SensorEvent_Diagnostics() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.Diagnostics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_Diagnostics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  diagnostics_byte_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorEvent_Diagnostics::ArenaDtor(void* object) {
  SensorEvent_Diagnostics* _this = reinterpret_cast< SensorEvent_Diagnostics* >(object);
  (void)_this;
}
void SensorEvent_Diagnostics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_Diagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_Diagnostics& SensorEvent_Diagnostics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_Diagnostics_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_Diagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    diagnostics_byte_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_Diagnostics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes diagnostics_byte = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_diagnostics_byte();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_Diagnostics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes diagnostics_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_diagnostics_byte(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.Diagnostics)
  return target;
}

size_t SensorEvent_Diagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.Diagnostics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes diagnostics_byte = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_diagnostics_byte());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_Diagnostics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_Diagnostics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_Diagnostics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.Diagnostics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.Diagnostics)
    MergeFrom(*source);
  }
}

void SensorEvent_Diagnostics::MergeFrom(const SensorEvent_Diagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_diagnostics_byte()) {
    _internal_set_diagnostics_byte(from._internal_diagnostics_byte());
  }
}

void SensorEvent_Diagnostics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_Diagnostics::CopyFrom(const SensorEvent_Diagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_Diagnostics::IsInitialized() const {
  return true;
}

void SensorEvent_Diagnostics::InternalSwap(SensorEvent_Diagnostics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  diagnostics_byte_.Swap(&other->diagnostics_byte_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_Diagnostics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_Environment::InitAsDefaultInstance() {
}
class SensorEvent_Environment::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_Environment>()._has_bits_);
  static void set_has_temperature_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pressure_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorEvent_Environment::SensorEvent_Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.Environment)
}
SensorEvent_Environment::SensorEvent_Environment(const SensorEvent_Environment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&temperature_e3_, &from.temperature_e3_,
    static_cast<size_t>(reinterpret_cast<char*>(&rain_) -
    reinterpret_cast<char*>(&temperature_e3_)) + sizeof(rain_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.Environment)
}

void SensorEvent_Environment::SharedCtor() {
  ::memset(&temperature_e3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rain_) -
      reinterpret_cast<char*>(&temperature_e3_)) + sizeof(rain_));
}

SensorEvent_Environment::~SensorEvent_Environment() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.Environment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_Environment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_Environment::ArenaDtor(void* object) {
  SensorEvent_Environment* _this = reinterpret_cast< SensorEvent_Environment* >(object);
  (void)_this;
}
void SensorEvent_Environment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_Environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_Environment& SensorEvent_Environment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_Environment_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&temperature_e3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rain_) -
        reinterpret_cast<char*>(&temperature_e3_)) + sizeof(rain_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_Environment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 temperature_e3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_temperature_e3(&has_bits);
          temperature_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pressure_e3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pressure_e3(&has_bits);
          pressure_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rain(&has_bits);
          rain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_Environment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.Environment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 temperature_e3 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_temperature_e3(), target);
  }

  // optional int32 pressure_e3 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pressure_e3(), target);
  }

  // optional int32 rain = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.Environment)
  return target;
}

size_t SensorEvent_Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.Environment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 temperature_e3 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_temperature_e3());
    }

    // optional int32 pressure_e3 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pressure_e3());
    }

    // optional int32 rain = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rain());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_Environment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_Environment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_Environment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.Environment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.Environment)
    MergeFrom(*source);
  }
}

void SensorEvent_Environment::MergeFrom(const SensorEvent_Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      temperature_e3_ = from.temperature_e3_;
    }
    if (cached_has_bits & 0x00000002u) {
      pressure_e3_ = from.pressure_e3_;
    }
    if (cached_has_bits & 0x00000004u) {
      rain_ = from.rain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_Environment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_Environment::CopyFrom(const SensorEvent_Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_Environment::IsInitialized() const {
  return true;
}

void SensorEvent_Environment::InternalSwap(SensorEvent_Environment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_Environment, rain_)
      + sizeof(SensorEvent_Environment::rain_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_Environment, temperature_e3_)>(
          reinterpret_cast<char*>(&temperature_e3_),
          reinterpret_cast<char*>(&other->temperature_e3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_Environment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_HVAC::InitAsDefaultInstance() {
}
class SensorEvent_HVAC::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_HVAC>()._has_bits_);
  static void set_has_target_temperature_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_temperature_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorEvent_HVAC::SensorEvent_HVAC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.HVAC)
}
SensorEvent_HVAC::SensorEvent_HVAC(const SensorEvent_HVAC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_temperature_e3_, &from.target_temperature_e3_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_temperature_e3_) -
    reinterpret_cast<char*>(&target_temperature_e3_)) + sizeof(current_temperature_e3_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.HVAC)
}

void SensorEvent_HVAC::SharedCtor() {
  ::memset(&target_temperature_e3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_temperature_e3_) -
      reinterpret_cast<char*>(&target_temperature_e3_)) + sizeof(current_temperature_e3_));
}

SensorEvent_HVAC::~SensorEvent_HVAC() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.HVAC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_HVAC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_HVAC::ArenaDtor(void* object) {
  SensorEvent_HVAC* _this = reinterpret_cast< SensorEvent_HVAC* >(object);
  (void)_this;
}
void SensorEvent_HVAC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_HVAC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_HVAC& SensorEvent_HVAC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_HVAC_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_HVAC::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.HVAC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_temperature_e3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_temperature_e3_) -
        reinterpret_cast<char*>(&target_temperature_e3_)) + sizeof(current_temperature_e3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_HVAC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 target_temperature_e3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_temperature_e3(&has_bits);
          target_temperature_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 current_temperature_e3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_current_temperature_e3(&has_bits);
          current_temperature_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_HVAC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.HVAC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_temperature_e3 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_temperature_e3(), target);
  }

  // optional int32 current_temperature_e3 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_temperature_e3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.HVAC)
  return target;
}

size_t SensorEvent_HVAC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.HVAC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 target_temperature_e3 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_temperature_e3());
    }

    // optional int32 current_temperature_e3 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_current_temperature_e3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_HVAC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.HVAC)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_HVAC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_HVAC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.HVAC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.HVAC)
    MergeFrom(*source);
  }
}

void SensorEvent_HVAC::MergeFrom(const SensorEvent_HVAC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.HVAC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_temperature_e3_ = from.target_temperature_e3_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_temperature_e3_ = from.current_temperature_e3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_HVAC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.HVAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_HVAC::CopyFrom(const SensorEvent_HVAC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.HVAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_HVAC::IsInitialized() const {
  return true;
}

void SensorEvent_HVAC::InternalSwap(SensorEvent_HVAC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_HVAC, current_temperature_e3_)
      + sizeof(SensorEvent_HVAC::current_temperature_e3_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_HVAC, target_temperature_e3_)>(
          reinterpret_cast<char*>(&target_temperature_e3_),
          reinterpret_cast<char*>(&other->target_temperature_e3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_HVAC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_Accel::InitAsDefaultInstance() {
}
class SensorEvent_Accel::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_Accel>()._has_bits_);
  static void set_has_acceleration_x_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acceleration_y_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acceleration_z_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorEvent_Accel::SensorEvent_Accel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.Accel)
}
SensorEvent_Accel::SensorEvent_Accel(const SensorEvent_Accel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acceleration_x_e3_, &from.acceleration_x_e3_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceleration_z_e3_) -
    reinterpret_cast<char*>(&acceleration_x_e3_)) + sizeof(acceleration_z_e3_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.Accel)
}

void SensorEvent_Accel::SharedCtor() {
  ::memset(&acceleration_x_e3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_z_e3_) -
      reinterpret_cast<char*>(&acceleration_x_e3_)) + sizeof(acceleration_z_e3_));
}

SensorEvent_Accel::~SensorEvent_Accel() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.Accel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_Accel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_Accel::ArenaDtor(void* object) {
  SensorEvent_Accel* _this = reinterpret_cast< SensorEvent_Accel* >(object);
  (void)_this;
}
void SensorEvent_Accel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_Accel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_Accel& SensorEvent_Accel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_Accel_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_Accel::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.Accel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&acceleration_x_e3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceleration_z_e3_) -
        reinterpret_cast<char*>(&acceleration_x_e3_)) + sizeof(acceleration_z_e3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_Accel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 acceleration_x_e3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_acceleration_x_e3(&has_bits);
          acceleration_x_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acceleration_y_e3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_acceleration_y_e3(&has_bits);
          acceleration_y_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acceleration_z_e3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_acceleration_z_e3(&has_bits);
          acceleration_z_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_Accel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.Accel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 acceleration_x_e3 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_acceleration_x_e3(), target);
  }

  // optional int32 acceleration_y_e3 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_acceleration_y_e3(), target);
  }

  // optional int32 acceleration_z_e3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_acceleration_z_e3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.Accel)
  return target;
}

size_t SensorEvent_Accel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.Accel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 acceleration_x_e3 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_acceleration_x_e3());
    }

    // optional int32 acceleration_y_e3 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_acceleration_y_e3());
    }

    // optional int32 acceleration_z_e3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_acceleration_z_e3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_Accel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_Accel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_Accel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.Accel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.Accel)
    MergeFrom(*source);
  }
}

void SensorEvent_Accel::MergeFrom(const SensorEvent_Accel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      acceleration_x_e3_ = from.acceleration_x_e3_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_y_e3_ = from.acceleration_y_e3_;
    }
    if (cached_has_bits & 0x00000004u) {
      acceleration_z_e3_ = from.acceleration_z_e3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_Accel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_Accel::CopyFrom(const SensorEvent_Accel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_Accel::IsInitialized() const {
  return true;
}

void SensorEvent_Accel::InternalSwap(SensorEvent_Accel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_Accel, acceleration_z_e3_)
      + sizeof(SensorEvent_Accel::acceleration_z_e3_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_Accel, acceleration_x_e3_)>(
          reinterpret_cast<char*>(&acceleration_x_e3_),
          reinterpret_cast<char*>(&other->acceleration_x_e3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_Accel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_Gyro::InitAsDefaultInstance() {
}
class SensorEvent_Gyro::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_Gyro>()._has_bits_);
  static void set_has_rotation_speed_x_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rotation_speed_y_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotation_speed_z_e3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorEvent_Gyro::SensorEvent_Gyro(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.Gyro)
}
SensorEvent_Gyro::SensorEvent_Gyro(const SensorEvent_Gyro& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rotation_speed_x_e3_, &from.rotation_speed_x_e3_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_speed_z_e3_) -
    reinterpret_cast<char*>(&rotation_speed_x_e3_)) + sizeof(rotation_speed_z_e3_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.Gyro)
}

void SensorEvent_Gyro::SharedCtor() {
  ::memset(&rotation_speed_x_e3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_speed_z_e3_) -
      reinterpret_cast<char*>(&rotation_speed_x_e3_)) + sizeof(rotation_speed_z_e3_));
}

SensorEvent_Gyro::~SensorEvent_Gyro() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.Gyro)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_Gyro::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_Gyro::ArenaDtor(void* object) {
  SensorEvent_Gyro* _this = reinterpret_cast< SensorEvent_Gyro* >(object);
  (void)_this;
}
void SensorEvent_Gyro::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_Gyro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_Gyro& SensorEvent_Gyro::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_Gyro_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_Gyro::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.Gyro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&rotation_speed_x_e3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_speed_z_e3_) -
        reinterpret_cast<char*>(&rotation_speed_x_e3_)) + sizeof(rotation_speed_z_e3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_Gyro::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 rotation_speed_x_e3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rotation_speed_x_e3(&has_bits);
          rotation_speed_x_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotation_speed_y_e3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rotation_speed_y_e3(&has_bits);
          rotation_speed_y_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotation_speed_z_e3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rotation_speed_z_e3(&has_bits);
          rotation_speed_z_e3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_Gyro::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.Gyro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rotation_speed_x_e3 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rotation_speed_x_e3(), target);
  }

  // optional int32 rotation_speed_y_e3 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rotation_speed_y_e3(), target);
  }

  // optional int32 rotation_speed_z_e3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rotation_speed_z_e3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.Gyro)
  return target;
}

size_t SensorEvent_Gyro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.Gyro)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 rotation_speed_x_e3 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotation_speed_x_e3());
    }

    // optional int32 rotation_speed_y_e3 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotation_speed_y_e3());
    }

    // optional int32 rotation_speed_z_e3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotation_speed_z_e3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_Gyro::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_Gyro* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_Gyro>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.Gyro)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.Gyro)
    MergeFrom(*source);
  }
}

void SensorEvent_Gyro::MergeFrom(const SensorEvent_Gyro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rotation_speed_x_e3_ = from.rotation_speed_x_e3_;
    }
    if (cached_has_bits & 0x00000002u) {
      rotation_speed_y_e3_ = from.rotation_speed_y_e3_;
    }
    if (cached_has_bits & 0x00000004u) {
      rotation_speed_z_e3_ = from.rotation_speed_z_e3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_Gyro::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_Gyro::CopyFrom(const SensorEvent_Gyro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_Gyro::IsInitialized() const {
  return true;
}

void SensorEvent_Gyro::InternalSwap(SensorEvent_Gyro* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_Gyro, rotation_speed_z_e3_)
      + sizeof(SensorEvent_Gyro::rotation_speed_z_e3_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_Gyro, rotation_speed_x_e3_)>(
          reinterpret_cast<char*>(&rotation_speed_x_e3_),
          reinterpret_cast<char*>(&other->rotation_speed_x_e3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_Gyro::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_Door::InitAsDefaultInstance() {
}
class SensorEvent_Door::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_Door>()._has_bits_);
  static void set_has_hood_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boot_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorEvent_Door::SensorEvent_Door(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  door_open_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.Door)
}
SensorEvent_Door::SensorEvent_Door(const SensorEvent_Door& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      door_open_(from.door_open_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hood_open_, &from.hood_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&boot_open_) -
    reinterpret_cast<char*>(&hood_open_)) + sizeof(boot_open_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.Door)
}

void SensorEvent_Door::SharedCtor() {
  ::memset(&hood_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boot_open_) -
      reinterpret_cast<char*>(&hood_open_)) + sizeof(boot_open_));
}

SensorEvent_Door::~SensorEvent_Door() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.Door)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_Door::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_Door::ArenaDtor(void* object) {
  SensorEvent_Door* _this = reinterpret_cast< SensorEvent_Door* >(object);
  (void)_this;
}
void SensorEvent_Door::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_Door::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_Door& SensorEvent_Door::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_Door_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_Door::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.Door)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  door_open_.Clear();
  ::memset(&hood_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boot_open_) -
      reinterpret_cast<char*>(&hood_open_)) + sizeof(boot_open_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_Door::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool hood_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hood_open(&has_bits);
          hood_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boot_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_boot_open(&has_bits);
          boot_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool door_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_door_open(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_door_open(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_Door::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.Door)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hood_open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hood_open(), target);
  }

  // optional bool boot_open = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_boot_open(), target);
  }

  // repeated bool door_open = 3;
  for (int i = 0, n = this->_internal_door_open_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_door_open(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.Door)
  return target;
}

size_t SensorEvent_Door::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.Door)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool door_open = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_door_open_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_door_open_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool hood_open = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool boot_open = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_Door::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.Door)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_Door* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_Door>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.Door)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.Door)
    MergeFrom(*source);
  }
}

void SensorEvent_Door::MergeFrom(const SensorEvent_Door& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.Door)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  door_open_.MergeFrom(from.door_open_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hood_open_ = from.hood_open_;
    }
    if (cached_has_bits & 0x00000002u) {
      boot_open_ = from.boot_open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_Door::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.Door)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_Door::CopyFrom(const SensorEvent_Door& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.Door)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_Door::IsInitialized() const {
  return true;
}

void SensorEvent_Door::InternalSwap(SensorEvent_Door* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  door_open_.InternalSwap(&other->door_open_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_Door, boot_open_)
      + sizeof(SensorEvent_Door::boot_open_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_Door, hood_open_)>(
          reinterpret_cast<char*>(&hood_open_),
          reinterpret_cast<char*>(&other->hood_open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_Door::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_Light::InitAsDefaultInstance() {
}
class SensorEvent_Light::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_Light>()._has_bits_);
  static void set_has_headlight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_turn_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hazard_light_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorEvent_Light::SensorEvent_Light(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.Light)
}
SensorEvent_Light::SensorEvent_Light(const SensorEvent_Light& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&headlight_, &from.headlight_,
    static_cast<size_t>(reinterpret_cast<char*>(&hazard_light_on_) -
    reinterpret_cast<char*>(&headlight_)) + sizeof(hazard_light_on_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.Light)
}

void SensorEvent_Light::SharedCtor() {
  ::memset(&headlight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hazard_light_on_) -
      reinterpret_cast<char*>(&headlight_)) + sizeof(hazard_light_on_));
}

SensorEvent_Light::~SensorEvent_Light() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.Light)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_Light::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_Light::ArenaDtor(void* object) {
  SensorEvent_Light* _this = reinterpret_cast< SensorEvent_Light* >(object);
  (void)_this;
}
void SensorEvent_Light::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_Light& SensorEvent_Light::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_Light_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_Light::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&headlight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hazard_light_on_) -
        reinterpret_cast<char*>(&headlight_)) + sizeof(hazard_light_on_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_Light::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HU.SensorEvent.Light.HEADLIGHT_STATE headlight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::SensorEvent_Light_HEADLIGHT_STATE_IsValid(val))) {
            _internal_set_headlight(static_cast<::HU::SensorEvent_Light_HEADLIGHT_STATE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .HU.SensorEvent.Light.TURN_INDICATOR_STATE turn_indicator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::SensorEvent_Light_TURN_INDICATOR_STATE_IsValid(val))) {
            _internal_set_turn_indicator(static_cast<::HU::SensorEvent_Light_TURN_INDICATOR_STATE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool hazard_light_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hazard_light_on(&has_bits);
          hazard_light_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_Light::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HU.SensorEvent.Light.HEADLIGHT_STATE headlight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_headlight(), target);
  }

  // optional .HU.SensorEvent.Light.TURN_INDICATOR_STATE turn_indicator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_turn_indicator(), target);
  }

  // optional bool hazard_light_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hazard_light_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.Light)
  return target;
}

size_t SensorEvent_Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.Light)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .HU.SensorEvent.Light.HEADLIGHT_STATE headlight = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_headlight());
    }

    // optional .HU.SensorEvent.Light.TURN_INDICATOR_STATE turn_indicator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_indicator());
    }

    // optional bool hazard_light_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_Light* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_Light>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.Light)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.Light)
    MergeFrom(*source);
  }
}

void SensorEvent_Light::MergeFrom(const SensorEvent_Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      headlight_ = from.headlight_;
    }
    if (cached_has_bits & 0x00000002u) {
      turn_indicator_ = from.turn_indicator_;
    }
    if (cached_has_bits & 0x00000004u) {
      hazard_light_on_ = from.hazard_light_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEvent_Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_Light::CopyFrom(const SensorEvent_Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_Light::IsInitialized() const {
  return true;
}

void SensorEvent_Light::InternalSwap(SensorEvent_Light* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorEvent_Light, hazard_light_on_)
      + sizeof(SensorEvent_Light::hazard_light_on_)
      - PROTOBUF_FIELD_OFFSET(SensorEvent_Light, headlight_)>(
          reinterpret_cast<char*>(&headlight_),
          reinterpret_cast<char*>(&other->headlight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_Light::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent_GearData::InitAsDefaultInstance() {
}
class SensorEvent_GearData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEvent_GearData>()._has_bits_);
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SensorEvent_GearData::SensorEvent_GearData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent.GearData)
}
SensorEvent_GearData::SensorEvent_GearData(const SensorEvent_GearData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gear_ = from.gear_;
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent.GearData)
}

void SensorEvent_GearData::SharedCtor() {
  gear_ = 100;
}

SensorEvent_GearData::~SensorEvent_GearData() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent.GearData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent_GearData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent_GearData::ArenaDtor(void* object) {
  SensorEvent_GearData* _this = reinterpret_cast< SensorEvent_GearData* >(object);
  (void)_this;
}
void SensorEvent_GearData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent_GearData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent_GearData& SensorEvent_GearData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_GearData_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent_GearData::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent.GearData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gear_ = 100;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent_GearData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.SensorEvent.GearData.GEAR gear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::SensorEvent_GearData_GEAR_IsValid(val))) {
            _internal_set_gear(static_cast<::HU::SensorEvent_GearData_GEAR>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent_GearData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent.GearData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.SensorEvent.GearData.GEAR gear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent.GearData)
  return target;
}

size_t SensorEvent_GearData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent.GearData)
  size_t total_size = 0;

  // required .HU.SensorEvent.GearData.GEAR gear = 1;
  if (_internal_has_gear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent_GearData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent.GearData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent_GearData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent_GearData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent.GearData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent.GearData)
    MergeFrom(*source);
  }
}

void SensorEvent_GearData::MergeFrom(const SensorEvent_GearData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent.GearData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gear()) {
    _internal_set_gear(from._internal_gear());
  }
}

void SensorEvent_GearData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent.GearData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent_GearData::CopyFrom(const SensorEvent_GearData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent.GearData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent_GearData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorEvent_GearData::InternalSwap(SensorEvent_GearData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent_GearData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorEvent::InitAsDefaultInstance() {
}
class SensorEvent::_Internal {
 public:
};

SensorEvent::SensorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  location_data_(arena),
  compass_data_(arena),
  speed_data_(arena),
  rpm_(arena),
  odometer_data_(arena),
  fuel_data_(arena),
  parkingbrake_data_(arena),
  gear_data_(arena),
  diagnostics_data_(arena),
  night_mode_(arena),
  enviorment_data_(arena),
  hvac_data_(arena),
  driving_status_(arena),
  dead_reckoning_(arena),
  passenger_data_(arena),
  door_data_(arena),
  light_data_(arena),
  accel_data_(arena),
  gyro_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorEvent)
}
SensorEvent::SensorEvent(const SensorEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      location_data_(from.location_data_),
      compass_data_(from.compass_data_),
      speed_data_(from.speed_data_),
      rpm_(from.rpm_),
      odometer_data_(from.odometer_data_),
      fuel_data_(from.fuel_data_),
      parkingbrake_data_(from.parkingbrake_data_),
      gear_data_(from.gear_data_),
      diagnostics_data_(from.diagnostics_data_),
      night_mode_(from.night_mode_),
      enviorment_data_(from.enviorment_data_),
      hvac_data_(from.hvac_data_),
      driving_status_(from.driving_status_),
      dead_reckoning_(from.dead_reckoning_),
      passenger_data_(from.passenger_data_),
      door_data_(from.door_data_),
      light_data_(from.light_data_),
      accel_data_(from.accel_data_),
      gyro_data_(from.gyro_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.SensorEvent)
}

void SensorEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorEvent_hu_2eproto.base);
}

SensorEvent::~SensorEvent() {
  // @@protoc_insertion_point(destructor:HU.SensorEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorEvent::ArenaDtor(void* object) {
  SensorEvent* _this = reinterpret_cast< SensorEvent* >(object);
  (void)_this;
}
void SensorEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEvent& SensorEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEvent_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_data_.Clear();
  compass_data_.Clear();
  speed_data_.Clear();
  rpm_.Clear();
  odometer_data_.Clear();
  fuel_data_.Clear();
  parkingbrake_data_.Clear();
  gear_data_.Clear();
  diagnostics_data_.Clear();
  night_mode_.Clear();
  enviorment_data_.Clear();
  hvac_data_.Clear();
  driving_status_.Clear();
  dead_reckoning_.Clear();
  passenger_data_.Clear();
  door_data_.Clear();
  light_data_.Clear();
  accel_data_.Clear();
  gyro_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HU.SensorEvent.LocationData location_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.CompassData compass_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compass_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.SpeedData speed_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.RPM rpm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rpm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.OdometerData odometer_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_odometer_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.FuelLevel fuel_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fuel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.ParkingBreak parkingbrake_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parkingbrake_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.GearData gear_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gear_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.Diagnostics diagnostics_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnostics_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.NightMode night_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_night_mode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.Environment enviorment_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enviorment_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.HVAC hvac_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hvac_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.DrivingStatus driving_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_driving_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.DeadReckoning dead_reckoning = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dead_reckoning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.Passenger passenger_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passenger_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.Door door_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_door_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.Light light_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_light_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.Accel accel_data = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_accel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.SensorEvent.Gyro gyro_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gyro_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HU.SensorEvent.LocationData location_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_location_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_location_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.CompassData compass_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compass_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_compass_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.SpeedData speed_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_speed_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.RPM rpm = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rpm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rpm(i), target, stream);
  }

  // repeated .HU.SensorEvent.OdometerData odometer_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_odometer_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_odometer_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.FuelLevel fuel_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fuel_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_fuel_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.ParkingBreak parkingbrake_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parkingbrake_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_parkingbrake_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.GearData gear_data = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gear_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_gear_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.Diagnostics diagnostics_data = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnostics_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_diagnostics_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.NightMode night_mode = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_night_mode_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_night_mode(i), target, stream);
  }

  // repeated .HU.SensorEvent.Environment enviorment_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enviorment_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_enviorment_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.HVAC hvac_data = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hvac_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_hvac_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.DrivingStatus driving_status = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_driving_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_driving_status(i), target, stream);
  }

  // repeated .HU.SensorEvent.DeadReckoning dead_reckoning = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dead_reckoning_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_dead_reckoning(i), target, stream);
  }

  // repeated .HU.SensorEvent.Passenger passenger_data = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passenger_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_passenger_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.Door door_data = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_door_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_door_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.Light light_data = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_light_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_light_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.Accel accel_data = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accel_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_accel_data(i), target, stream);
  }

  // repeated .HU.SensorEvent.Gyro gyro_data = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gyro_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_gyro_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorEvent)
  return target;
}

size_t SensorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.SensorEvent.LocationData location_data = 1;
  total_size += 1UL * this->_internal_location_data_size();
  for (const auto& msg : this->location_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.CompassData compass_data = 2;
  total_size += 1UL * this->_internal_compass_data_size();
  for (const auto& msg : this->compass_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.SpeedData speed_data = 3;
  total_size += 1UL * this->_internal_speed_data_size();
  for (const auto& msg : this->speed_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.RPM rpm = 4;
  total_size += 1UL * this->_internal_rpm_size();
  for (const auto& msg : this->rpm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.OdometerData odometer_data = 5;
  total_size += 1UL * this->_internal_odometer_data_size();
  for (const auto& msg : this->odometer_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.FuelLevel fuel_data = 6;
  total_size += 1UL * this->_internal_fuel_data_size();
  for (const auto& msg : this->fuel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.ParkingBreak parkingbrake_data = 7;
  total_size += 1UL * this->_internal_parkingbrake_data_size();
  for (const auto& msg : this->parkingbrake_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.GearData gear_data = 8;
  total_size += 1UL * this->_internal_gear_data_size();
  for (const auto& msg : this->gear_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.Diagnostics diagnostics_data = 9;
  total_size += 1UL * this->_internal_diagnostics_data_size();
  for (const auto& msg : this->diagnostics_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.NightMode night_mode = 10;
  total_size += 1UL * this->_internal_night_mode_size();
  for (const auto& msg : this->night_mode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.Environment enviorment_data = 11;
  total_size += 1UL * this->_internal_enviorment_data_size();
  for (const auto& msg : this->enviorment_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.HVAC hvac_data = 12;
  total_size += 1UL * this->_internal_hvac_data_size();
  for (const auto& msg : this->hvac_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.DrivingStatus driving_status = 13;
  total_size += 1UL * this->_internal_driving_status_size();
  for (const auto& msg : this->driving_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.DeadReckoning dead_reckoning = 14;
  total_size += 1UL * this->_internal_dead_reckoning_size();
  for (const auto& msg : this->dead_reckoning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.Passenger passenger_data = 15;
  total_size += 1UL * this->_internal_passenger_data_size();
  for (const auto& msg : this->passenger_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.Door door_data = 16;
  total_size += 2UL * this->_internal_door_data_size();
  for (const auto& msg : this->door_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.Light light_data = 17;
  total_size += 2UL * this->_internal_light_data_size();
  for (const auto& msg : this->light_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.Accel accel_data = 19;
  total_size += 2UL * this->_internal_accel_data_size();
  for (const auto& msg : this->accel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.SensorEvent.Gyro gyro_data = 20;
  total_size += 2UL * this->_internal_gyro_data_size();
  for (const auto& msg : this->gyro_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorEvent)
    MergeFrom(*source);
  }
}

void SensorEvent::MergeFrom(const SensorEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_data_.MergeFrom(from.location_data_);
  compass_data_.MergeFrom(from.compass_data_);
  speed_data_.MergeFrom(from.speed_data_);
  rpm_.MergeFrom(from.rpm_);
  odometer_data_.MergeFrom(from.odometer_data_);
  fuel_data_.MergeFrom(from.fuel_data_);
  parkingbrake_data_.MergeFrom(from.parkingbrake_data_);
  gear_data_.MergeFrom(from.gear_data_);
  diagnostics_data_.MergeFrom(from.diagnostics_data_);
  night_mode_.MergeFrom(from.night_mode_);
  enviorment_data_.MergeFrom(from.enviorment_data_);
  hvac_data_.MergeFrom(from.hvac_data_);
  driving_status_.MergeFrom(from.driving_status_);
  dead_reckoning_.MergeFrom(from.dead_reckoning_);
  passenger_data_.MergeFrom(from.passenger_data_);
  door_data_.MergeFrom(from.door_data_);
  light_data_.MergeFrom(from.light_data_);
  accel_data_.MergeFrom(from.accel_data_);
  gyro_data_.MergeFrom(from.gyro_data_);
}

void SensorEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEvent::CopyFrom(const SensorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rpm_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fuel_data_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gear_data_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(night_mode_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(driving_status_)) return false;
  return true;
}

void SensorEvent::InternalSwap(SensorEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  location_data_.InternalSwap(&other->location_data_);
  compass_data_.InternalSwap(&other->compass_data_);
  speed_data_.InternalSwap(&other->speed_data_);
  rpm_.InternalSwap(&other->rpm_);
  odometer_data_.InternalSwap(&other->odometer_data_);
  fuel_data_.InternalSwap(&other->fuel_data_);
  parkingbrake_data_.InternalSwap(&other->parkingbrake_data_);
  gear_data_.InternalSwap(&other->gear_data_);
  diagnostics_data_.InternalSwap(&other->diagnostics_data_);
  night_mode_.InternalSwap(&other->night_mode_);
  enviorment_data_.InternalSwap(&other->enviorment_data_);
  hvac_data_.InternalSwap(&other->hvac_data_);
  driving_status_.InternalSwap(&other->driving_status_);
  dead_reckoning_.InternalSwap(&other->dead_reckoning_);
  passenger_data_.InternalSwap(&other->passenger_data_);
  door_data_.InternalSwap(&other->door_data_);
  light_data_.InternalSwap(&other->light_data_);
  accel_data_.InternalSwap(&other->accel_data_);
  gyro_data_.InternalSwap(&other->gyro_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioCofig::InitAsDefaultInstance() {
}
class AudioCofig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioCofig>()._has_bits_);
  static void set_has_sample_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bit_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AudioCofig::AudioCofig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.AudioCofig)
}
AudioCofig::AudioCofig(const AudioCofig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sample_rate_, &from.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_count_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(channel_count_));
  // @@protoc_insertion_point(copy_constructor:HU.AudioCofig)
}

void AudioCofig::SharedCtor() {
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(channel_count_));
}

AudioCofig::~AudioCofig() {
  // @@protoc_insertion_point(destructor:HU.AudioCofig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioCofig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioCofig::ArenaDtor(void* object) {
  AudioCofig* _this = reinterpret_cast< AudioCofig* >(object);
  (void)_this;
}
void AudioCofig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioCofig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioCofig& AudioCofig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioCofig_hu_2eproto.base);
  return *internal_default_instance();
}


void AudioCofig::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.AudioCofig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&sample_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_count_) -
        reinterpret_cast<char*>(&sample_rate_)) + sizeof(channel_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioCofig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sample_rate(&has_bits);
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bit_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bit_depth(&has_bits);
          bit_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 channel_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel_count(&has_bits);
          channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioCofig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.AudioCofig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sample_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_rate(), target);
  }

  // required uint32 bit_depth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bit_depth(), target);
  }

  // required uint32 channel_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.AudioCofig)
  return target;
}

size_t AudioCofig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.AudioCofig)
  size_t total_size = 0;

  if (_internal_has_sample_rate()) {
    // required uint32 sample_rate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_rate());
  }

  if (_internal_has_bit_depth()) {
    // required uint32 bit_depth = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bit_depth());
  }

  if (_internal_has_channel_count()) {
    // required uint32 channel_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_count());
  }

  return total_size;
}
size_t AudioCofig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.AudioCofig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 sample_rate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_rate());

    // required uint32 bit_depth = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bit_depth());

    // required uint32 channel_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioCofig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.AudioCofig)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioCofig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioCofig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.AudioCofig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.AudioCofig)
    MergeFrom(*source);
  }
}

void AudioCofig::MergeFrom(const AudioCofig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.AudioCofig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sample_rate_ = from.sample_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_count_ = from.channel_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioCofig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.AudioCofig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioCofig::CopyFrom(const AudioCofig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.AudioCofig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioCofig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AudioCofig::InternalSwap(AudioCofig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioCofig, channel_count_)
      + sizeof(AudioCofig::channel_count_)
      - PROTOBUF_FIELD_OFFSET(AudioCofig, sample_rate_)>(
          reinterpret_cast<char*>(&sample_rate_),
          reinterpret_cast<char*>(&other->sample_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioCofig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_SensorChannel_Sensor::InitAsDefaultInstance() {
}
class ChannelDescriptor_SensorChannel_Sensor::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_SensorChannel_Sensor>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChannelDescriptor_SensorChannel_Sensor::ChannelDescriptor_SensorChannel_Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.SensorChannel.Sensor)
}
ChannelDescriptor_SensorChannel_Sensor::ChannelDescriptor_SensorChannel_Sensor(const ChannelDescriptor_SensorChannel_Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.SensorChannel.Sensor)
}

void ChannelDescriptor_SensorChannel_Sensor::SharedCtor() {
  type_ = 1;
}

ChannelDescriptor_SensorChannel_Sensor::~ChannelDescriptor_SensorChannel_Sensor() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.SensorChannel.Sensor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_SensorChannel_Sensor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelDescriptor_SensorChannel_Sensor::ArenaDtor(void* object) {
  ChannelDescriptor_SensorChannel_Sensor* _this = reinterpret_cast< ChannelDescriptor_SensorChannel_Sensor* >(object);
  (void)_this;
}
void ChannelDescriptor_SensorChannel_Sensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_SensorChannel_Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_SensorChannel_Sensor& ChannelDescriptor_SensorChannel_Sensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_SensorChannel_Sensor_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_SensorChannel_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.SensorChannel.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_SensorChannel_Sensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HU.SENSOR_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::SENSOR_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::HU::SENSOR_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_SensorChannel_Sensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.SensorChannel.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HU.SENSOR_TYPE type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.SensorChannel.Sensor)
  return target;
}

size_t ChannelDescriptor_SensorChannel_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.SensorChannel.Sensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .HU.SENSOR_TYPE type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_SensorChannel_Sensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.SensorChannel.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_SensorChannel_Sensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_SensorChannel_Sensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.SensorChannel.Sensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.SensorChannel.Sensor)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_SensorChannel_Sensor::MergeFrom(const ChannelDescriptor_SensorChannel_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.SensorChannel.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void ChannelDescriptor_SensorChannel_Sensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.SensorChannel.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_SensorChannel_Sensor::CopyFrom(const ChannelDescriptor_SensorChannel_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.SensorChannel.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_SensorChannel_Sensor::IsInitialized() const {
  return true;
}

void ChannelDescriptor_SensorChannel_Sensor::InternalSwap(ChannelDescriptor_SensorChannel_Sensor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_SensorChannel_Sensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_SensorChannel::InitAsDefaultInstance() {
}
class ChannelDescriptor_SensorChannel::_Internal {
 public:
};

ChannelDescriptor_SensorChannel::ChannelDescriptor_SensorChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sensor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.SensorChannel)
}
ChannelDescriptor_SensorChannel::ChannelDescriptor_SensorChannel(const ChannelDescriptor_SensorChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sensor_list_(from.sensor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.SensorChannel)
}

void ChannelDescriptor_SensorChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_SensorChannel_hu_2eproto.base);
}

ChannelDescriptor_SensorChannel::~ChannelDescriptor_SensorChannel() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.SensorChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_SensorChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelDescriptor_SensorChannel::ArenaDtor(void* object) {
  ChannelDescriptor_SensorChannel* _this = reinterpret_cast< ChannelDescriptor_SensorChannel* >(object);
  (void)_this;
}
void ChannelDescriptor_SensorChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_SensorChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_SensorChannel& ChannelDescriptor_SensorChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_SensorChannel_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_SensorChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.SensorChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_SensorChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HU.ChannelDescriptor.SensorChannel.Sensor sensor_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_SensorChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.SensorChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HU.ChannelDescriptor.SensorChannel.Sensor sensor_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sensor_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.SensorChannel)
  return target;
}

size_t ChannelDescriptor_SensorChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.SensorChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.ChannelDescriptor.SensorChannel.Sensor sensor_list = 1;
  total_size += 1UL * this->_internal_sensor_list_size();
  for (const auto& msg : this->sensor_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_SensorChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.SensorChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_SensorChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_SensorChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.SensorChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.SensorChannel)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_SensorChannel::MergeFrom(const ChannelDescriptor_SensorChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.SensorChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_list_.MergeFrom(from.sensor_list_);
}

void ChannelDescriptor_SensorChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.SensorChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_SensorChannel::CopyFrom(const ChannelDescriptor_SensorChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.SensorChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_SensorChannel::IsInitialized() const {
  return true;
}

void ChannelDescriptor_SensorChannel::InternalSwap(ChannelDescriptor_SensorChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sensor_list_.InternalSwap(&other->sensor_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_SensorChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_OutputStreamChannel_VideoConfig::InitAsDefaultInstance() {
}
class ChannelDescriptor_OutputStreamChannel_VideoConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_OutputStreamChannel_VideoConfig>()._has_bits_);
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_margin_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_margin_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dpi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_additional_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000037) ^ 0x00000037) != 0;
  }
};

ChannelDescriptor_OutputStreamChannel_VideoConfig::ChannelDescriptor_OutputStreamChannel_VideoConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
}
ChannelDescriptor_OutputStreamChannel_VideoConfig::ChannelDescriptor_OutputStreamChannel_VideoConfig(const ChannelDescriptor_OutputStreamChannel_VideoConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&margin_width_, &from.margin_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_rate_) -
    reinterpret_cast<char*>(&margin_width_)) + sizeof(frame_rate_));
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::SharedCtor() {
  ::memset(&margin_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&additional_depth_) -
      reinterpret_cast<char*>(&margin_width_)) + sizeof(additional_depth_));
  resolution_ = 1;
  frame_rate_ = 1;
}

ChannelDescriptor_OutputStreamChannel_VideoConfig::~ChannelDescriptor_OutputStreamChannel_VideoConfig() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::ArenaDtor(void* object) {
  ChannelDescriptor_OutputStreamChannel_VideoConfig* _this = reinterpret_cast< ChannelDescriptor_OutputStreamChannel_VideoConfig* >(object);
  (void)_this;
}
void ChannelDescriptor_OutputStreamChannel_VideoConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_OutputStreamChannel_VideoConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_OutputStreamChannel_VideoConfig& ChannelDescriptor_OutputStreamChannel_VideoConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_OutputStreamChannel_VideoConfig_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_OutputStreamChannel_VideoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&margin_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&additional_depth_) -
        reinterpret_cast<char*>(&margin_width_)) + sizeof(additional_depth_));
    resolution_ = 1;
    frame_rate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_OutputStreamChannel_VideoConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_RESOLUTION resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION_IsValid(val))) {
            _internal_set_resolution(static_cast<::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_RESOLUTION>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_FPS frame_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS_IsValid(val))) {
            _internal_set_frame_rate(static_cast<::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig_VIDEO_FPS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 margin_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_margin_width(&has_bits);
          margin_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 margin_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_margin_height(&has_bits);
          margin_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dpi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dpi(&has_bits);
          dpi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_depth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_additional_depth(&has_bits);
          additional_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_OutputStreamChannel_VideoConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_RESOLUTION resolution = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resolution(), target);
  }

  // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_FPS frame_rate = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_frame_rate(), target);
  }

  // required uint32 margin_width = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_margin_width(), target);
  }

  // required uint32 margin_height = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_margin_height(), target);
  }

  // required uint32 dpi = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dpi(), target);
  }

  // optional uint32 additional_depth = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_additional_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  return target;
}

size_t ChannelDescriptor_OutputStreamChannel_VideoConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  size_t total_size = 0;

  if (_internal_has_margin_width()) {
    // required uint32 margin_width = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_margin_width());
  }

  if (_internal_has_margin_height()) {
    // required uint32 margin_height = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_margin_height());
  }

  if (_internal_has_dpi()) {
    // required uint32 dpi = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dpi());
  }

  if (_internal_has_resolution()) {
    // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_RESOLUTION resolution = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resolution());
  }

  if (_internal_has_frame_rate()) {
    // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_FPS frame_rate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_rate());
  }

  return total_size;
}
size_t ChannelDescriptor_OutputStreamChannel_VideoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required uint32 margin_width = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_margin_width());

    // required uint32 margin_height = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_margin_height());

    // required uint32 dpi = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dpi());

    // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_RESOLUTION resolution = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resolution());

    // required .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig.VIDEO_FPS frame_rate = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_rate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 additional_depth = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_additional_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_OutputStreamChannel_VideoConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_OutputStreamChannel_VideoConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::MergeFrom(const ChannelDescriptor_OutputStreamChannel_VideoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      margin_width_ = from.margin_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      margin_height_ = from.margin_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      dpi_ = from.dpi_;
    }
    if (cached_has_bits & 0x00000008u) {
      additional_depth_ = from.additional_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      resolution_ = from.resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_rate_ = from.frame_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::CopyFrom(const ChannelDescriptor_OutputStreamChannel_VideoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.OutputStreamChannel.VideoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_OutputStreamChannel_VideoConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChannelDescriptor_OutputStreamChannel_VideoConfig::InternalSwap(ChannelDescriptor_OutputStreamChannel_VideoConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor_OutputStreamChannel_VideoConfig, additional_depth_)
      + sizeof(ChannelDescriptor_OutputStreamChannel_VideoConfig::additional_depth_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor_OutputStreamChannel_VideoConfig, margin_width_)>(
          reinterpret_cast<char*>(&margin_width_),
          reinterpret_cast<char*>(&other->margin_width_));
  swap(resolution_, other->resolution_);
  swap(frame_rate_, other->frame_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_OutputStreamChannel_VideoConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_OutputStreamChannel::InitAsDefaultInstance() {
}
class ChannelDescriptor_OutputStreamChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_OutputStreamChannel>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audio_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_available_while_in_call(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ChannelDescriptor_OutputStreamChannel::ChannelDescriptor_OutputStreamChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  audio_configs_(arena),
  video_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.OutputStreamChannel)
}
ChannelDescriptor_OutputStreamChannel::ChannelDescriptor_OutputStreamChannel(const ChannelDescriptor_OutputStreamChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      audio_configs_(from.audio_configs_),
      video_configs_(from.video_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&available_while_in_call_, &from.available_while_in_call_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_type_) -
    reinterpret_cast<char*>(&available_while_in_call_)) + sizeof(audio_type_));
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.OutputStreamChannel)
}

void ChannelDescriptor_OutputStreamChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto.base);
  available_while_in_call_ = false;
  type_ = 1;
  audio_type_ = 1;
}

ChannelDescriptor_OutputStreamChannel::~ChannelDescriptor_OutputStreamChannel() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.OutputStreamChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_OutputStreamChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelDescriptor_OutputStreamChannel::ArenaDtor(void* object) {
  ChannelDescriptor_OutputStreamChannel* _this = reinterpret_cast< ChannelDescriptor_OutputStreamChannel* >(object);
  (void)_this;
}
void ChannelDescriptor_OutputStreamChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_OutputStreamChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_OutputStreamChannel& ChannelDescriptor_OutputStreamChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_OutputStreamChannel_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_OutputStreamChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.OutputStreamChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_configs_.Clear();
  video_configs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    available_while_in_call_ = false;
    type_ = 1;
    audio_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_OutputStreamChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.STREAM_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::STREAM_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::HU::STREAM_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .HU.AUDIO_TYPE audio_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::AUDIO_TYPE_IsValid(val))) {
            _internal_set_audio_type(static_cast<::HU::AUDIO_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .HU.AudioCofig audio_configs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audio_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig video_configs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_video_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool available_while_in_call = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_available_while_in_call(&has_bits);
          available_while_in_call_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_OutputStreamChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.OutputStreamChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.STREAM_TYPE type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .HU.AUDIO_TYPE audio_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_audio_type(), target);
  }

  // repeated .HU.AudioCofig audio_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audio_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_audio_configs(i), target, stream);
  }

  // repeated .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig video_configs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_video_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_video_configs(i), target, stream);
  }

  // optional bool available_while_in_call = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_available_while_in_call(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.OutputStreamChannel)
  return target;
}

size_t ChannelDescriptor_OutputStreamChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.OutputStreamChannel)
  size_t total_size = 0;

  // required .HU.STREAM_TYPE type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.AudioCofig audio_configs = 3;
  total_size += 1UL * this->_internal_audio_configs_size();
  for (const auto& msg : this->audio_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HU.ChannelDescriptor.OutputStreamChannel.VideoConfig video_configs = 4;
  total_size += 1UL * this->_internal_video_configs_size();
  for (const auto& msg : this->video_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool available_while_in_call = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  // optional .HU.AUDIO_TYPE audio_type = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audio_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_OutputStreamChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.OutputStreamChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_OutputStreamChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_OutputStreamChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.OutputStreamChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.OutputStreamChannel)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_OutputStreamChannel::MergeFrom(const ChannelDescriptor_OutputStreamChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.OutputStreamChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audio_configs_.MergeFrom(from.audio_configs_);
  video_configs_.MergeFrom(from.video_configs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      available_while_in_call_ = from.available_while_in_call_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      audio_type_ = from.audio_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor_OutputStreamChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.OutputStreamChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_OutputStreamChannel::CopyFrom(const ChannelDescriptor_OutputStreamChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.OutputStreamChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_OutputStreamChannel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(audio_configs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(video_configs_)) return false;
  return true;
}

void ChannelDescriptor_OutputStreamChannel::InternalSwap(ChannelDescriptor_OutputStreamChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  audio_configs_.InternalSwap(&other->audio_configs_);
  video_configs_.InternalSwap(&other->video_configs_);
  swap(available_while_in_call_, other->available_while_in_call_);
  swap(type_, other->type_);
  swap(audio_type_, other->audio_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_OutputStreamChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::InitAsDefaultInstance() {
}
class ChannelDescriptor_InputEventChannel_TouchScreenConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_InputEventChannel_TouchScreenConfig>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChannelDescriptor_InputEventChannel_TouchScreenConfig::ChannelDescriptor_InputEventChannel_TouchScreenConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
}
ChannelDescriptor_InputEventChannel_TouchScreenConfig::ChannelDescriptor_InputEventChannel_TouchScreenConfig(const ChannelDescriptor_InputEventChannel_TouchScreenConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ChannelDescriptor_InputEventChannel_TouchScreenConfig::~ChannelDescriptor_InputEventChannel_TouchScreenConfig() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::ArenaDtor(void* object) {
  ChannelDescriptor_InputEventChannel_TouchScreenConfig* _this = reinterpret_cast< ChannelDescriptor_InputEventChannel_TouchScreenConfig* >(object);
  (void)_this;
}
void ChannelDescriptor_InputEventChannel_TouchScreenConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_InputEventChannel_TouchScreenConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_InputEventChannel_TouchScreenConfig& ChannelDescriptor_InputEventChannel_TouchScreenConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_InputEventChannel_TouchScreenConfig_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_InputEventChannel_TouchScreenConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_InputEventChannel_TouchScreenConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_InputEventChannel_TouchScreenConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  return target;
}

size_t ChannelDescriptor_InputEventChannel_TouchScreenConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t ChannelDescriptor_InputEventChannel_TouchScreenConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_InputEventChannel_TouchScreenConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_InputEventChannel_TouchScreenConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::MergeFrom(const ChannelDescriptor_InputEventChannel_TouchScreenConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::CopyFrom(const ChannelDescriptor_InputEventChannel_TouchScreenConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_InputEventChannel_TouchScreenConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChannelDescriptor_InputEventChannel_TouchScreenConfig::InternalSwap(ChannelDescriptor_InputEventChannel_TouchScreenConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor_InputEventChannel_TouchScreenConfig, height_)
      + sizeof(ChannelDescriptor_InputEventChannel_TouchScreenConfig::height_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor_InputEventChannel_TouchScreenConfig, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_InputEventChannel_TouchScreenConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_InputEventChannel::InitAsDefaultInstance() {
  ::HU::_ChannelDescriptor_InputEventChannel_default_instance_._instance.get_mutable()->touch_screen_config_ = const_cast< ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig*>(
      ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig::internal_default_instance());
  ::HU::_ChannelDescriptor_InputEventChannel_default_instance_._instance.get_mutable()->touch_pad_config_ = const_cast< ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig*>(
      ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig::internal_default_instance());
}
class ChannelDescriptor_InputEventChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_InputEventChannel>()._has_bits_);
  static const ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig& touch_screen_config(const ChannelDescriptor_InputEventChannel* msg);
  static void set_has_touch_screen_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig& touch_pad_config(const ChannelDescriptor_InputEventChannel* msg);
  static void set_has_touch_pad_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig&
ChannelDescriptor_InputEventChannel::_Internal::touch_screen_config(const ChannelDescriptor_InputEventChannel* msg) {
  return *msg->touch_screen_config_;
}
const ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig&
ChannelDescriptor_InputEventChannel::_Internal::touch_pad_config(const ChannelDescriptor_InputEventChannel* msg) {
  return *msg->touch_pad_config_;
}
ChannelDescriptor_InputEventChannel::ChannelDescriptor_InputEventChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keycodes_supported_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.InputEventChannel)
}
ChannelDescriptor_InputEventChannel::ChannelDescriptor_InputEventChannel(const ChannelDescriptor_InputEventChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keycodes_supported_(from.keycodes_supported_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_touch_screen_config()) {
    touch_screen_config_ = new ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig(*from.touch_screen_config_);
  } else {
    touch_screen_config_ = nullptr;
  }
  if (from._internal_has_touch_pad_config()) {
    touch_pad_config_ = new ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig(*from.touch_pad_config_);
  } else {
    touch_pad_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.InputEventChannel)
}

void ChannelDescriptor_InputEventChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_InputEventChannel_hu_2eproto.base);
  ::memset(&touch_screen_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_pad_config_) -
      reinterpret_cast<char*>(&touch_screen_config_)) + sizeof(touch_pad_config_));
}

ChannelDescriptor_InputEventChannel::~ChannelDescriptor_InputEventChannel() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.InputEventChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_InputEventChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete touch_screen_config_;
  if (this != internal_default_instance()) delete touch_pad_config_;
}

void ChannelDescriptor_InputEventChannel::ArenaDtor(void* object) {
  ChannelDescriptor_InputEventChannel* _this = reinterpret_cast< ChannelDescriptor_InputEventChannel* >(object);
  (void)_this;
}
void ChannelDescriptor_InputEventChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_InputEventChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_InputEventChannel& ChannelDescriptor_InputEventChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_InputEventChannel_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_InputEventChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.InputEventChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keycodes_supported_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(touch_screen_config_ != nullptr);
      touch_screen_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(touch_pad_config_ != nullptr);
      touch_pad_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_InputEventChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 keycodes_supported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keycodes_supported(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_keycodes_supported(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig touch_screen_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_screen_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig touch_pad_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_pad_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_InputEventChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.InputEventChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 keycodes_supported = 1;
  for (int i = 0, n = this->_internal_keycodes_supported_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keycodes_supported(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig touch_screen_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::touch_screen_config(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig touch_pad_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::touch_pad_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.InputEventChannel)
  return target;
}

size_t ChannelDescriptor_InputEventChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.InputEventChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keycodes_supported = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->keycodes_supported_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keycodes_supported_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig touch_screen_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_screen_config_);
    }

    // optional .HU.ChannelDescriptor.InputEventChannel.TouchScreenConfig touch_pad_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_pad_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_InputEventChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.InputEventChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_InputEventChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_InputEventChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.InputEventChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.InputEventChannel)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_InputEventChannel::MergeFrom(const ChannelDescriptor_InputEventChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.InputEventChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keycodes_supported_.MergeFrom(from.keycodes_supported_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_touch_screen_config()->::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig::MergeFrom(from._internal_touch_screen_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_touch_pad_config()->::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig::MergeFrom(from._internal_touch_pad_config());
    }
  }
}

void ChannelDescriptor_InputEventChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.InputEventChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_InputEventChannel::CopyFrom(const ChannelDescriptor_InputEventChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.InputEventChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_InputEventChannel::IsInitialized() const {
  if (_internal_has_touch_screen_config()) {
    if (!touch_screen_config_->IsInitialized()) return false;
  }
  if (_internal_has_touch_pad_config()) {
    if (!touch_pad_config_->IsInitialized()) return false;
  }
  return true;
}

void ChannelDescriptor_InputEventChannel::InternalSwap(ChannelDescriptor_InputEventChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keycodes_supported_.InternalSwap(&other->keycodes_supported_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor_InputEventChannel, touch_pad_config_)
      + sizeof(ChannelDescriptor_InputEventChannel::touch_pad_config_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor_InputEventChannel, touch_screen_config_)>(
          reinterpret_cast<char*>(&touch_screen_config_),
          reinterpret_cast<char*>(&other->touch_screen_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_InputEventChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_InputStreamChannel::InitAsDefaultInstance() {
  ::HU::_ChannelDescriptor_InputStreamChannel_default_instance_._instance.get_mutable()->audio_config_ = const_cast< ::HU::AudioCofig*>(
      ::HU::AudioCofig::internal_default_instance());
}
class ChannelDescriptor_InputStreamChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_InputStreamChannel>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HU::AudioCofig& audio_config(const ChannelDescriptor_InputStreamChannel* msg);
  static void set_has_audio_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_available_while_in_call(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::HU::AudioCofig&
ChannelDescriptor_InputStreamChannel::_Internal::audio_config(const ChannelDescriptor_InputStreamChannel* msg) {
  return *msg->audio_config_;
}
ChannelDescriptor_InputStreamChannel::ChannelDescriptor_InputStreamChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.InputStreamChannel)
}
ChannelDescriptor_InputStreamChannel::ChannelDescriptor_InputStreamChannel(const ChannelDescriptor_InputStreamChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio_config()) {
    audio_config_ = new ::HU::AudioCofig(*from.audio_config_);
  } else {
    audio_config_ = nullptr;
  }
  ::memcpy(&available_while_in_call_, &from.available_while_in_call_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&available_while_in_call_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.InputStreamChannel)
}

void ChannelDescriptor_InputStreamChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto.base);
  ::memset(&audio_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_while_in_call_) -
      reinterpret_cast<char*>(&audio_config_)) + sizeof(available_while_in_call_));
  type_ = 1;
}

ChannelDescriptor_InputStreamChannel::~ChannelDescriptor_InputStreamChannel() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.InputStreamChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_InputStreamChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete audio_config_;
}

void ChannelDescriptor_InputStreamChannel::ArenaDtor(void* object) {
  ChannelDescriptor_InputStreamChannel* _this = reinterpret_cast< ChannelDescriptor_InputStreamChannel* >(object);
  (void)_this;
}
void ChannelDescriptor_InputStreamChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_InputStreamChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_InputStreamChannel& ChannelDescriptor_InputStreamChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_InputStreamChannel_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_InputStreamChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.InputStreamChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(audio_config_ != nullptr);
    audio_config_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    available_while_in_call_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_InputStreamChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.STREAM_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::STREAM_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::HU::STREAM_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .HU.AudioCofig audio_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool available_while_in_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_available_while_in_call(&has_bits);
          available_while_in_call_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_InputStreamChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.InputStreamChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.STREAM_TYPE type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .HU.AudioCofig audio_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_config(this), target, stream);
  }

  // optional bool available_while_in_call = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_available_while_in_call(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.InputStreamChannel)
  return target;
}

size_t ChannelDescriptor_InputStreamChannel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.ChannelDescriptor.InputStreamChannel)
  size_t total_size = 0;

  if (_internal_has_audio_config()) {
    // required .HU.AudioCofig audio_config = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_config_);
  }

  if (_internal_has_type()) {
    // required .HU.STREAM_TYPE type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t ChannelDescriptor_InputStreamChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.InputStreamChannel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .HU.AudioCofig audio_config = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_config_);

    // required .HU.STREAM_TYPE type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool available_while_in_call = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_InputStreamChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.InputStreamChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_InputStreamChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_InputStreamChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.InputStreamChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.InputStreamChannel)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_InputStreamChannel::MergeFrom(const ChannelDescriptor_InputStreamChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.InputStreamChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_audio_config()->::HU::AudioCofig::MergeFrom(from._internal_audio_config());
    }
    if (cached_has_bits & 0x00000002u) {
      available_while_in_call_ = from.available_while_in_call_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor_InputStreamChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.InputStreamChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_InputStreamChannel::CopyFrom(const ChannelDescriptor_InputStreamChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.InputStreamChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_InputStreamChannel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_audio_config()) {
    if (!audio_config_->IsInitialized()) return false;
  }
  return true;
}

void ChannelDescriptor_InputStreamChannel::InternalSwap(ChannelDescriptor_InputStreamChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor_InputStreamChannel, available_while_in_call_)
      + sizeof(ChannelDescriptor_InputStreamChannel::available_while_in_call_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor_InputStreamChannel, audio_config_)>(
          reinterpret_cast<char*>(&audio_config_),
          reinterpret_cast<char*>(&other->audio_config_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_InputStreamChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_BluetoothService::InitAsDefaultInstance() {
}
class ChannelDescriptor_BluetoothService::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_BluetoothService>()._has_bits_);
  static void set_has_car_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ChannelDescriptor_BluetoothService::ChannelDescriptor_BluetoothService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supported_pairing_methods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.BluetoothService)
}
ChannelDescriptor_BluetoothService::ChannelDescriptor_BluetoothService(const ChannelDescriptor_BluetoothService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      supported_pairing_methods_(from.supported_pairing_methods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  car_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_car_address()) {
    car_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.BluetoothService)
}

void ChannelDescriptor_BluetoothService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_BluetoothService_hu_2eproto.base);
  car_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelDescriptor_BluetoothService::~ChannelDescriptor_BluetoothService() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.BluetoothService)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_BluetoothService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  car_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelDescriptor_BluetoothService::ArenaDtor(void* object) {
  ChannelDescriptor_BluetoothService* _this = reinterpret_cast< ChannelDescriptor_BluetoothService* >(object);
  (void)_this;
}
void ChannelDescriptor_BluetoothService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_BluetoothService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_BluetoothService& ChannelDescriptor_BluetoothService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_BluetoothService_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_BluetoothService::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.BluetoothService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_pairing_methods_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    car_address_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_BluetoothService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string car_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_car_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ChannelDescriptor.BluetoothService.car_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .HU.BluetoothPairingMethod supported_pairing_methods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::HU::BluetoothPairingMethod_IsValid(val))) {
              _internal_add_supported_pairing_methods(static_cast<::HU::BluetoothPairingMethod>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_supported_pairing_methods(), ptr, ctx, ::HU::BluetoothPairingMethod_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_BluetoothService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.BluetoothService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string car_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_car_address().data(), static_cast<int>(this->_internal_car_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ChannelDescriptor.BluetoothService.car_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_car_address(), target);
  }

  // repeated .HU.BluetoothPairingMethod supported_pairing_methods = 2;
  for (int i = 0, n = this->_internal_supported_pairing_methods_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_supported_pairing_methods(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.BluetoothService)
  return target;
}

size_t ChannelDescriptor_BluetoothService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.BluetoothService)
  size_t total_size = 0;

  // required string car_address = 1;
  if (_internal_has_car_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_address());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.BluetoothPairingMethod supported_pairing_methods = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_pairing_methods_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_pairing_methods(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_BluetoothService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.BluetoothService)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_BluetoothService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_BluetoothService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.BluetoothService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.BluetoothService)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_BluetoothService::MergeFrom(const ChannelDescriptor_BluetoothService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.BluetoothService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_pairing_methods_.MergeFrom(from.supported_pairing_methods_);
  if (from._internal_has_car_address()) {
    _internal_set_car_address(from._internal_car_address());
  }
}

void ChannelDescriptor_BluetoothService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.BluetoothService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_BluetoothService::CopyFrom(const ChannelDescriptor_BluetoothService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.BluetoothService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_BluetoothService::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChannelDescriptor_BluetoothService::InternalSwap(ChannelDescriptor_BluetoothService* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supported_pairing_methods_.InternalSwap(&other->supported_pairing_methods_);
  car_address_.Swap(&other->car_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_BluetoothService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_NavigationStatusService_ImageOptions::InitAsDefaultInstance() {
}
class ChannelDescriptor_NavigationStatusService_ImageOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_NavigationStatusService_ImageOptions>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_colour_depth_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ChannelDescriptor_NavigationStatusService_ImageOptions::ChannelDescriptor_NavigationStatusService_ImageOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
}
ChannelDescriptor_NavigationStatusService_ImageOptions::ChannelDescriptor_NavigationStatusService_ImageOptions(const ChannelDescriptor_NavigationStatusService_ImageOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&colour_depth_bits_) -
    reinterpret_cast<char*>(&width_)) + sizeof(colour_depth_bits_));
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colour_depth_bits_) -
      reinterpret_cast<char*>(&width_)) + sizeof(colour_depth_bits_));
}

ChannelDescriptor_NavigationStatusService_ImageOptions::~ChannelDescriptor_NavigationStatusService_ImageOptions() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::ArenaDtor(void* object) {
  ChannelDescriptor_NavigationStatusService_ImageOptions* _this = reinterpret_cast< ChannelDescriptor_NavigationStatusService_ImageOptions* >(object);
  (void)_this;
}
void ChannelDescriptor_NavigationStatusService_ImageOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_NavigationStatusService_ImageOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_NavigationStatusService_ImageOptions& ChannelDescriptor_NavigationStatusService_ImageOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_NavigationStatusService_ImageOptions_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_NavigationStatusService_ImageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colour_depth_bits_) -
        reinterpret_cast<char*>(&width_)) + sizeof(colour_depth_bits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_NavigationStatusService_ImageOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 colour_depth_bits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_colour_depth_bits(&has_bits);
          colour_depth_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_NavigationStatusService_ImageOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // required int32 colour_depth_bits = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_colour_depth_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  return target;
}

size_t ChannelDescriptor_NavigationStatusService_ImageOptions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required int32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (_internal_has_colour_depth_bits()) {
    // required int32 colour_depth_bits = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colour_depth_bits());
  }

  return total_size;
}
size_t ChannelDescriptor_NavigationStatusService_ImageOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

    // required int32 colour_depth_bits = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colour_depth_bits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_NavigationStatusService_ImageOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_NavigationStatusService_ImageOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::MergeFrom(const ChannelDescriptor_NavigationStatusService_ImageOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      colour_depth_bits_ = from.colour_depth_bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::CopyFrom(const ChannelDescriptor_NavigationStatusService_ImageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.NavigationStatusService.ImageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_NavigationStatusService_ImageOptions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChannelDescriptor_NavigationStatusService_ImageOptions::InternalSwap(ChannelDescriptor_NavigationStatusService_ImageOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor_NavigationStatusService_ImageOptions, colour_depth_bits_)
      + sizeof(ChannelDescriptor_NavigationStatusService_ImageOptions::colour_depth_bits_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor_NavigationStatusService_ImageOptions, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_NavigationStatusService_ImageOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_NavigationStatusService::InitAsDefaultInstance() {
  ::HU::_ChannelDescriptor_NavigationStatusService_default_instance_._instance.get_mutable()->image_options_ = const_cast< ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions*>(
      ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions::internal_default_instance());
}
class ChannelDescriptor_NavigationStatusService::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_NavigationStatusService>()._has_bits_);
  static void set_has_minimum_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions& image_options(const ChannelDescriptor_NavigationStatusService* msg);
  static void set_has_image_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions&
ChannelDescriptor_NavigationStatusService::_Internal::image_options(const ChannelDescriptor_NavigationStatusService* msg) {
  return *msg->image_options_;
}
ChannelDescriptor_NavigationStatusService::ChannelDescriptor_NavigationStatusService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.NavigationStatusService)
}
ChannelDescriptor_NavigationStatusService::ChannelDescriptor_NavigationStatusService(const ChannelDescriptor_NavigationStatusService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_options()) {
    image_options_ = new ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions(*from.image_options_);
  } else {
    image_options_ = nullptr;
  }
  ::memcpy(&minimum_interval_ms_, &from.minimum_interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&minimum_interval_ms_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.NavigationStatusService)
}

void ChannelDescriptor_NavigationStatusService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto.base);
  ::memset(&image_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimum_interval_ms_) -
      reinterpret_cast<char*>(&image_options_)) + sizeof(minimum_interval_ms_));
  type_ = 1;
}

ChannelDescriptor_NavigationStatusService::~ChannelDescriptor_NavigationStatusService() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.NavigationStatusService)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_NavigationStatusService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_options_;
}

void ChannelDescriptor_NavigationStatusService::ArenaDtor(void* object) {
  ChannelDescriptor_NavigationStatusService* _this = reinterpret_cast< ChannelDescriptor_NavigationStatusService* >(object);
  (void)_this;
}
void ChannelDescriptor_NavigationStatusService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_NavigationStatusService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_NavigationStatusService& ChannelDescriptor_NavigationStatusService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_NavigationStatusService_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_NavigationStatusService::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.NavigationStatusService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(image_options_ != nullptr);
    image_options_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    minimum_interval_ms_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_NavigationStatusService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 minimum_interval_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_minimum_interval_ms(&has_bits);
          minimum_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .HU.ChannelDescriptor.NavigationStatusService.CLUSTER_TYPE type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::HU::ChannelDescriptor_NavigationStatusService_CLUSTER_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.NavigationStatusService.ImageOptions image_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_NavigationStatusService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.NavigationStatusService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 minimum_interval_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_minimum_interval_ms(), target);
  }

  // required .HU.ChannelDescriptor.NavigationStatusService.CLUSTER_TYPE type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .HU.ChannelDescriptor.NavigationStatusService.ImageOptions image_options = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.NavigationStatusService)
  return target;
}

size_t ChannelDescriptor_NavigationStatusService::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.ChannelDescriptor.NavigationStatusService)
  size_t total_size = 0;

  if (_internal_has_minimum_interval_ms()) {
    // required uint32 minimum_interval_ms = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minimum_interval_ms());
  }

  if (_internal_has_type()) {
    // required .HU.ChannelDescriptor.NavigationStatusService.CLUSTER_TYPE type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t ChannelDescriptor_NavigationStatusService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.NavigationStatusService)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 minimum_interval_ms = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minimum_interval_ms());

    // required .HU.ChannelDescriptor.NavigationStatusService.CLUSTER_TYPE type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .HU.ChannelDescriptor.NavigationStatusService.ImageOptions image_options = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_NavigationStatusService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.NavigationStatusService)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_NavigationStatusService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_NavigationStatusService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.NavigationStatusService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.NavigationStatusService)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_NavigationStatusService::MergeFrom(const ChannelDescriptor_NavigationStatusService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.NavigationStatusService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_image_options()->::HU::ChannelDescriptor_NavigationStatusService_ImageOptions::MergeFrom(from._internal_image_options());
    }
    if (cached_has_bits & 0x00000002u) {
      minimum_interval_ms_ = from.minimum_interval_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor_NavigationStatusService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.NavigationStatusService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_NavigationStatusService::CopyFrom(const ChannelDescriptor_NavigationStatusService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.NavigationStatusService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_NavigationStatusService::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_image_options()) {
    if (!image_options_->IsInitialized()) return false;
  }
  return true;
}

void ChannelDescriptor_NavigationStatusService::InternalSwap(ChannelDescriptor_NavigationStatusService* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor_NavigationStatusService, minimum_interval_ms_)
      + sizeof(ChannelDescriptor_NavigationStatusService::minimum_interval_ms_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor_NavigationStatusService, image_options_)>(
          reinterpret_cast<char*>(&image_options_),
          reinterpret_cast<char*>(&other->image_options_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_NavigationStatusService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_PhoneStatusService::InitAsDefaultInstance() {
}
class ChannelDescriptor_PhoneStatusService::_Internal {
 public:
};

ChannelDescriptor_PhoneStatusService::ChannelDescriptor_PhoneStatusService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.PhoneStatusService)
}
ChannelDescriptor_PhoneStatusService::ChannelDescriptor_PhoneStatusService(const ChannelDescriptor_PhoneStatusService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.PhoneStatusService)
}

void ChannelDescriptor_PhoneStatusService::SharedCtor() {
}

ChannelDescriptor_PhoneStatusService::~ChannelDescriptor_PhoneStatusService() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.PhoneStatusService)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_PhoneStatusService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelDescriptor_PhoneStatusService::ArenaDtor(void* object) {
  ChannelDescriptor_PhoneStatusService* _this = reinterpret_cast< ChannelDescriptor_PhoneStatusService* >(object);
  (void)_this;
}
void ChannelDescriptor_PhoneStatusService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_PhoneStatusService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_PhoneStatusService& ChannelDescriptor_PhoneStatusService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_PhoneStatusService_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_PhoneStatusService::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.PhoneStatusService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_PhoneStatusService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_PhoneStatusService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.PhoneStatusService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.PhoneStatusService)
  return target;
}

size_t ChannelDescriptor_PhoneStatusService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.PhoneStatusService)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_PhoneStatusService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.PhoneStatusService)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_PhoneStatusService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_PhoneStatusService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.PhoneStatusService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.PhoneStatusService)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_PhoneStatusService::MergeFrom(const ChannelDescriptor_PhoneStatusService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.PhoneStatusService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChannelDescriptor_PhoneStatusService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.PhoneStatusService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_PhoneStatusService::CopyFrom(const ChannelDescriptor_PhoneStatusService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.PhoneStatusService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_PhoneStatusService::IsInitialized() const {
  return true;
}

void ChannelDescriptor_PhoneStatusService::InternalSwap(ChannelDescriptor_PhoneStatusService* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_PhoneStatusService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_VendorExtensionService::InitAsDefaultInstance() {
}
class ChannelDescriptor_VendorExtensionService::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_VendorExtensionService>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelDescriptor_VendorExtensionService::ChannelDescriptor_VendorExtensionService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  package_white_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.VendorExtensionService)
}
ChannelDescriptor_VendorExtensionService::ChannelDescriptor_VendorExtensionService(const ChannelDescriptor_VendorExtensionService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      package_white_list_(from.package_white_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.VendorExtensionService)
}

void ChannelDescriptor_VendorExtensionService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelDescriptor_VendorExtensionService::~ChannelDescriptor_VendorExtensionService() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.VendorExtensionService)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_VendorExtensionService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelDescriptor_VendorExtensionService::ArenaDtor(void* object) {
  ChannelDescriptor_VendorExtensionService* _this = reinterpret_cast< ChannelDescriptor_VendorExtensionService* >(object);
  (void)_this;
}
void ChannelDescriptor_VendorExtensionService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_VendorExtensionService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_VendorExtensionService& ChannelDescriptor_VendorExtensionService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_VendorExtensionService_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_VendorExtensionService::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.VendorExtensionService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_white_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_VendorExtensionService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ChannelDescriptor.VendorExtensionService.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string package_white_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_package_white_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ChannelDescriptor.VendorExtensionService.package_white_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_VendorExtensionService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.VendorExtensionService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ChannelDescriptor.VendorExtensionService.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string package_white_list = 2;
  for (int i = 0, n = this->_internal_package_white_list_size(); i < n; i++) {
    const auto& s = this->_internal_package_white_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ChannelDescriptor.VendorExtensionService.package_white_list");
    target = stream->WriteString(2, s, target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.VendorExtensionService)
  return target;
}

size_t ChannelDescriptor_VendorExtensionService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.VendorExtensionService)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string package_white_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(package_white_list_.size());
  for (int i = 0, n = package_white_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      package_white_list_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_VendorExtensionService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.VendorExtensionService)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_VendorExtensionService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_VendorExtensionService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.VendorExtensionService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.VendorExtensionService)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_VendorExtensionService::MergeFrom(const ChannelDescriptor_VendorExtensionService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.VendorExtensionService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_white_list_.MergeFrom(from.package_white_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
  }
}

void ChannelDescriptor_VendorExtensionService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.VendorExtensionService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_VendorExtensionService::CopyFrom(const ChannelDescriptor_VendorExtensionService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.VendorExtensionService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_VendorExtensionService::IsInitialized() const {
  return true;
}

void ChannelDescriptor_VendorExtensionService::InternalSwap(ChannelDescriptor_VendorExtensionService* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_white_list_.InternalSwap(&other->package_white_list_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_VendorExtensionService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor_GenericNotificationService::InitAsDefaultInstance() {
}
class ChannelDescriptor_GenericNotificationService::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor_GenericNotificationService>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChannelDescriptor_GenericNotificationService::ChannelDescriptor_GenericNotificationService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor.GenericNotificationService)
}
ChannelDescriptor_GenericNotificationService::ChannelDescriptor_GenericNotificationService(const ChannelDescriptor_GenericNotificationService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor.GenericNotificationService)
}

void ChannelDescriptor_GenericNotificationService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelDescriptor_GenericNotificationService::~ChannelDescriptor_GenericNotificationService() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor.GenericNotificationService)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor_GenericNotificationService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelDescriptor_GenericNotificationService::ArenaDtor(void* object) {
  ChannelDescriptor_GenericNotificationService* _this = reinterpret_cast< ChannelDescriptor_GenericNotificationService* >(object);
  (void)_this;
}
void ChannelDescriptor_GenericNotificationService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor_GenericNotificationService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor_GenericNotificationService& ChannelDescriptor_GenericNotificationService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_GenericNotificationService_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor_GenericNotificationService::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor.GenericNotificationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor_GenericNotificationService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ChannelDescriptor.GenericNotificationService.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor_GenericNotificationService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor.GenericNotificationService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ChannelDescriptor.GenericNotificationService.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor.GenericNotificationService)
  return target;
}

size_t ChannelDescriptor_GenericNotificationService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor.GenericNotificationService)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor_GenericNotificationService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor.GenericNotificationService)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor_GenericNotificationService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor_GenericNotificationService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor.GenericNotificationService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor.GenericNotificationService)
    MergeFrom(*source);
  }
}

void ChannelDescriptor_GenericNotificationService::MergeFrom(const ChannelDescriptor_GenericNotificationService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor.GenericNotificationService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void ChannelDescriptor_GenericNotificationService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor.GenericNotificationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor_GenericNotificationService::CopyFrom(const ChannelDescriptor_GenericNotificationService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor.GenericNotificationService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor_GenericNotificationService::IsInitialized() const {
  return true;
}

void ChannelDescriptor_GenericNotificationService::InternalSwap(ChannelDescriptor_GenericNotificationService* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor_GenericNotificationService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelDescriptor::InitAsDefaultInstance() {
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->sensor_channel_ = const_cast< ::HU::ChannelDescriptor_SensorChannel*>(
      ::HU::ChannelDescriptor_SensorChannel::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->output_stream_channel_ = const_cast< ::HU::ChannelDescriptor_OutputStreamChannel*>(
      ::HU::ChannelDescriptor_OutputStreamChannel::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->input_event_channel_ = const_cast< ::HU::ChannelDescriptor_InputEventChannel*>(
      ::HU::ChannelDescriptor_InputEventChannel::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->input_stream_channel_ = const_cast< ::HU::ChannelDescriptor_InputStreamChannel*>(
      ::HU::ChannelDescriptor_InputStreamChannel::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->bluetooth_service_ = const_cast< ::HU::ChannelDescriptor_BluetoothService*>(
      ::HU::ChannelDescriptor_BluetoothService::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->navigation_status_service_ = const_cast< ::HU::ChannelDescriptor_NavigationStatusService*>(
      ::HU::ChannelDescriptor_NavigationStatusService::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->phone_status_service_ = const_cast< ::HU::ChannelDescriptor_PhoneStatusService*>(
      ::HU::ChannelDescriptor_PhoneStatusService::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->vendor_extension_service_ = const_cast< ::HU::ChannelDescriptor_VendorExtensionService*>(
      ::HU::ChannelDescriptor_VendorExtensionService::internal_default_instance());
  ::HU::_ChannelDescriptor_default_instance_._instance.get_mutable()->generic_notification_service_ = const_cast< ::HU::ChannelDescriptor_GenericNotificationService*>(
      ::HU::ChannelDescriptor_GenericNotificationService::internal_default_instance());
}
class ChannelDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::HU::ChannelDescriptor_SensorChannel& sensor_channel(const ChannelDescriptor* msg);
  static void set_has_sensor_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::HU::ChannelDescriptor_OutputStreamChannel& output_stream_channel(const ChannelDescriptor* msg);
  static void set_has_output_stream_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::HU::ChannelDescriptor_InputEventChannel& input_event_channel(const ChannelDescriptor* msg);
  static void set_has_input_event_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::HU::ChannelDescriptor_InputStreamChannel& input_stream_channel(const ChannelDescriptor* msg);
  static void set_has_input_stream_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::HU::ChannelDescriptor_BluetoothService& bluetooth_service(const ChannelDescriptor* msg);
  static void set_has_bluetooth_service(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::HU::ChannelDescriptor_NavigationStatusService& navigation_status_service(const ChannelDescriptor* msg);
  static void set_has_navigation_status_service(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::HU::ChannelDescriptor_PhoneStatusService& phone_status_service(const ChannelDescriptor* msg);
  static void set_has_phone_status_service(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::HU::ChannelDescriptor_VendorExtensionService& vendor_extension_service(const ChannelDescriptor* msg);
  static void set_has_vendor_extension_service(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::HU::ChannelDescriptor_GenericNotificationService& generic_notification_service(const ChannelDescriptor* msg);
  static void set_has_generic_notification_service(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000200) ^ 0x00000200) != 0;
  }
};

const ::HU::ChannelDescriptor_SensorChannel&
ChannelDescriptor::_Internal::sensor_channel(const ChannelDescriptor* msg) {
  return *msg->sensor_channel_;
}
const ::HU::ChannelDescriptor_OutputStreamChannel&
ChannelDescriptor::_Internal::output_stream_channel(const ChannelDescriptor* msg) {
  return *msg->output_stream_channel_;
}
const ::HU::ChannelDescriptor_InputEventChannel&
ChannelDescriptor::_Internal::input_event_channel(const ChannelDescriptor* msg) {
  return *msg->input_event_channel_;
}
const ::HU::ChannelDescriptor_InputStreamChannel&
ChannelDescriptor::_Internal::input_stream_channel(const ChannelDescriptor* msg) {
  return *msg->input_stream_channel_;
}
const ::HU::ChannelDescriptor_BluetoothService&
ChannelDescriptor::_Internal::bluetooth_service(const ChannelDescriptor* msg) {
  return *msg->bluetooth_service_;
}
const ::HU::ChannelDescriptor_NavigationStatusService&
ChannelDescriptor::_Internal::navigation_status_service(const ChannelDescriptor* msg) {
  return *msg->navigation_status_service_;
}
const ::HU::ChannelDescriptor_PhoneStatusService&
ChannelDescriptor::_Internal::phone_status_service(const ChannelDescriptor* msg) {
  return *msg->phone_status_service_;
}
const ::HU::ChannelDescriptor_VendorExtensionService&
ChannelDescriptor::_Internal::vendor_extension_service(const ChannelDescriptor* msg) {
  return *msg->vendor_extension_service_;
}
const ::HU::ChannelDescriptor_GenericNotificationService&
ChannelDescriptor::_Internal::generic_notification_service(const ChannelDescriptor* msg) {
  return *msg->generic_notification_service_;
}
ChannelDescriptor::ChannelDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelDescriptor)
}
ChannelDescriptor::ChannelDescriptor(const ChannelDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_channel()) {
    sensor_channel_ = new ::HU::ChannelDescriptor_SensorChannel(*from.sensor_channel_);
  } else {
    sensor_channel_ = nullptr;
  }
  if (from._internal_has_output_stream_channel()) {
    output_stream_channel_ = new ::HU::ChannelDescriptor_OutputStreamChannel(*from.output_stream_channel_);
  } else {
    output_stream_channel_ = nullptr;
  }
  if (from._internal_has_input_event_channel()) {
    input_event_channel_ = new ::HU::ChannelDescriptor_InputEventChannel(*from.input_event_channel_);
  } else {
    input_event_channel_ = nullptr;
  }
  if (from._internal_has_input_stream_channel()) {
    input_stream_channel_ = new ::HU::ChannelDescriptor_InputStreamChannel(*from.input_stream_channel_);
  } else {
    input_stream_channel_ = nullptr;
  }
  if (from._internal_has_bluetooth_service()) {
    bluetooth_service_ = new ::HU::ChannelDescriptor_BluetoothService(*from.bluetooth_service_);
  } else {
    bluetooth_service_ = nullptr;
  }
  if (from._internal_has_navigation_status_service()) {
    navigation_status_service_ = new ::HU::ChannelDescriptor_NavigationStatusService(*from.navigation_status_service_);
  } else {
    navigation_status_service_ = nullptr;
  }
  if (from._internal_has_phone_status_service()) {
    phone_status_service_ = new ::HU::ChannelDescriptor_PhoneStatusService(*from.phone_status_service_);
  } else {
    phone_status_service_ = nullptr;
  }
  if (from._internal_has_vendor_extension_service()) {
    vendor_extension_service_ = new ::HU::ChannelDescriptor_VendorExtensionService(*from.vendor_extension_service_);
  } else {
    vendor_extension_service_ = nullptr;
  }
  if (from._internal_has_generic_notification_service()) {
    generic_notification_service_ = new ::HU::ChannelDescriptor_GenericNotificationService(*from.generic_notification_service_);
  } else {
    generic_notification_service_ = nullptr;
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:HU.ChannelDescriptor)
}

void ChannelDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelDescriptor_hu_2eproto.base);
  ::memset(&sensor_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&sensor_channel_)) + sizeof(channel_id_));
}

ChannelDescriptor::~ChannelDescriptor() {
  // @@protoc_insertion_point(destructor:HU.ChannelDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sensor_channel_;
  if (this != internal_default_instance()) delete output_stream_channel_;
  if (this != internal_default_instance()) delete input_event_channel_;
  if (this != internal_default_instance()) delete input_stream_channel_;
  if (this != internal_default_instance()) delete bluetooth_service_;
  if (this != internal_default_instance()) delete navigation_status_service_;
  if (this != internal_default_instance()) delete phone_status_service_;
  if (this != internal_default_instance()) delete vendor_extension_service_;
  if (this != internal_default_instance()) delete generic_notification_service_;
}

void ChannelDescriptor::ArenaDtor(void* object) {
  ChannelDescriptor* _this = reinterpret_cast< ChannelDescriptor* >(object);
  (void)_this;
}
void ChannelDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelDescriptor& ChannelDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelDescriptor_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_channel_ != nullptr);
      sensor_channel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_stream_channel_ != nullptr);
      output_stream_channel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_event_channel_ != nullptr);
      input_event_channel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(input_stream_channel_ != nullptr);
      input_stream_channel_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bluetooth_service_ != nullptr);
      bluetooth_service_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(navigation_status_service_ != nullptr);
      navigation_status_service_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(phone_status_service_ != nullptr);
      phone_status_service_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(vendor_extension_service_ != nullptr);
      vendor_extension_service_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(generic_notification_service_ != nullptr);
    generic_notification_service_->Clear();
  }
  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.SensorChannel sensor_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.OutputStreamChannel output_stream_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_stream_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.InputEventChannel input_event_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_event_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.InputStreamChannel input_stream_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_stream_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.BluetoothService bluetooth_service = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bluetooth_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.NavigationStatusService navigation_status_service = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_status_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.PhoneStatusService phone_status_service = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_phone_status_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.VendorExtensionService vendor_extension_service = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_vendor_extension_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.ChannelDescriptor.GenericNotificationService generic_notification_service = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic_notification_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_id(), target);
  }

  // optional .HU.ChannelDescriptor.SensorChannel sensor_channel = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sensor_channel(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.OutputStreamChannel output_stream_channel = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output_stream_channel(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.InputEventChannel input_event_channel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::input_event_channel(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.InputStreamChannel input_stream_channel = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input_stream_channel(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.BluetoothService bluetooth_service = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bluetooth_service(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.NavigationStatusService navigation_status_service = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::navigation_status_service(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.PhoneStatusService phone_status_service = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::phone_status_service(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.VendorExtensionService vendor_extension_service = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::vendor_extension_service(this), target, stream);
  }

  // optional .HU.ChannelDescriptor.GenericNotificationService generic_notification_service = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::generic_notification_service(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelDescriptor)
  return target;
}

size_t ChannelDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelDescriptor)
  size_t total_size = 0;

  // required uint32 channel_id = 1;
  if (_internal_has_channel_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .HU.ChannelDescriptor.SensorChannel sensor_channel = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_channel_);
    }

    // optional .HU.ChannelDescriptor.OutputStreamChannel output_stream_channel = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_stream_channel_);
    }

    // optional .HU.ChannelDescriptor.InputEventChannel input_event_channel = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_event_channel_);
    }

    // optional .HU.ChannelDescriptor.InputStreamChannel input_stream_channel = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_stream_channel_);
    }

    // optional .HU.ChannelDescriptor.BluetoothService bluetooth_service = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_service_);
    }

    // optional .HU.ChannelDescriptor.NavigationStatusService navigation_status_service = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_status_service_);
    }

    // optional .HU.ChannelDescriptor.PhoneStatusService phone_status_service = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *phone_status_service_);
    }

    // optional .HU.ChannelDescriptor.VendorExtensionService vendor_extension_service = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vendor_extension_service_);
    }

  }
  // optional .HU.ChannelDescriptor.GenericNotificationService generic_notification_service = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generic_notification_service_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelDescriptor)
    MergeFrom(*source);
  }
}

void ChannelDescriptor::MergeFrom(const ChannelDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_channel()->::HU::ChannelDescriptor_SensorChannel::MergeFrom(from._internal_sensor_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_output_stream_channel()->::HU::ChannelDescriptor_OutputStreamChannel::MergeFrom(from._internal_output_stream_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_input_event_channel()->::HU::ChannelDescriptor_InputEventChannel::MergeFrom(from._internal_input_event_channel());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_input_stream_channel()->::HU::ChannelDescriptor_InputStreamChannel::MergeFrom(from._internal_input_stream_channel());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_bluetooth_service()->::HU::ChannelDescriptor_BluetoothService::MergeFrom(from._internal_bluetooth_service());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_navigation_status_service()->::HU::ChannelDescriptor_NavigationStatusService::MergeFrom(from._internal_navigation_status_service());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_phone_status_service()->::HU::ChannelDescriptor_PhoneStatusService::MergeFrom(from._internal_phone_status_service());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_vendor_extension_service()->::HU::ChannelDescriptor_VendorExtensionService::MergeFrom(from._internal_vendor_extension_service());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_generic_notification_service()->::HU::ChannelDescriptor_GenericNotificationService::MergeFrom(from._internal_generic_notification_service());
    }
    if (cached_has_bits & 0x00000200u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor::CopyFrom(const ChannelDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_output_stream_channel()) {
    if (!output_stream_channel_->IsInitialized()) return false;
  }
  if (_internal_has_input_event_channel()) {
    if (!input_event_channel_->IsInitialized()) return false;
  }
  if (_internal_has_input_stream_channel()) {
    if (!input_stream_channel_->IsInitialized()) return false;
  }
  if (_internal_has_bluetooth_service()) {
    if (!bluetooth_service_->IsInitialized()) return false;
  }
  if (_internal_has_navigation_status_service()) {
    if (!navigation_status_service_->IsInitialized()) return false;
  }
  return true;
}

void ChannelDescriptor::InternalSwap(ChannelDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor, channel_id_)
      + sizeof(ChannelDescriptor::channel_id_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor, sensor_channel_)>(
          reinterpret_cast<char*>(&sensor_channel_),
          reinterpret_cast<char*>(&other->sensor_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceDiscoveryRequest::InitAsDefaultInstance() {
}
class ServiceDiscoveryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceDiscoveryRequest>()._has_bits_);
  static void set_has_phone_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServiceDiscoveryRequest::ServiceDiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ServiceDiscoveryRequest)
}
ServiceDiscoveryRequest::ServiceDiscoveryRequest(const ServiceDiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phone_name()) {
    phone_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phone_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.ServiceDiscoveryRequest)
}

void ServiceDiscoveryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceDiscoveryRequest_hu_2eproto.base);
  phone_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceDiscoveryRequest::~ServiceDiscoveryRequest() {
  // @@protoc_insertion_point(destructor:HU.ServiceDiscoveryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceDiscoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceDiscoveryRequest::ArenaDtor(void* object) {
  ServiceDiscoveryRequest* _this = reinterpret_cast< ServiceDiscoveryRequest* >(object);
  (void)_this;
}
void ServiceDiscoveryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceDiscoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceDiscoveryRequest& ServiceDiscoveryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceDiscoveryRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void ServiceDiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ServiceDiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    phone_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDiscoveryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string phone_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryRequest.phone_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceDiscoveryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ServiceDiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string phone_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phone_name().data(), static_cast<int>(this->_internal_phone_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryRequest.phone_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ServiceDiscoveryRequest)
  return target;
}

size_t ServiceDiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ServiceDiscoveryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string phone_name = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceDiscoveryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ServiceDiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceDiscoveryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceDiscoveryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ServiceDiscoveryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ServiceDiscoveryRequest)
    MergeFrom(*source);
  }
}

void ServiceDiscoveryRequest::MergeFrom(const ServiceDiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ServiceDiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_phone_name()) {
    _internal_set_phone_name(from._internal_phone_name());
  }
}

void ServiceDiscoveryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ServiceDiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDiscoveryRequest::CopyFrom(const ServiceDiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ServiceDiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryRequest::IsInitialized() const {
  return true;
}

void ServiceDiscoveryRequest::InternalSwap(ServiceDiscoveryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phone_name_.Swap(&other->phone_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceDiscoveryResponse::InitAsDefaultInstance() {
}
class ServiceDiscoveryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceDiscoveryResponse>()._has_bits_);
  static void set_has_head_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_car_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_car_year(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_car_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_driver_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_headunit_make(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_headunit_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sw_build(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sw_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_play_native_media_during_vr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hide_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

ServiceDiscoveryResponse::ServiceDiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ServiceDiscoveryResponse)
}
ServiceDiscoveryResponse::ServiceDiscoveryResponse(const ServiceDiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_head_unit_name()) {
    head_unit_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_head_unit_name(),
      GetArena());
  }
  car_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_car_model()) {
    car_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_model(),
      GetArena());
  }
  car_year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_car_year()) {
    car_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_year(),
      GetArena());
  }
  car_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_car_serial()) {
    car_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_serial(),
      GetArena());
  }
  headunit_make_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headunit_make()) {
    headunit_make_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_headunit_make(),
      GetArena());
  }
  headunit_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headunit_model()) {
    headunit_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_headunit_model(),
      GetArena());
  }
  sw_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sw_build()) {
    sw_build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sw_build(),
      GetArena());
  }
  sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sw_version()) {
    sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sw_version(),
      GetArena());
  }
  ::memcpy(&driver_pos_, &from.driver_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_clock_) -
    reinterpret_cast<char*>(&driver_pos_)) + sizeof(hide_clock_));
  // @@protoc_insertion_point(copy_constructor:HU.ServiceDiscoveryResponse)
}

void ServiceDiscoveryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceDiscoveryResponse_hu_2eproto.base);
  head_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_make_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&driver_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_clock_) -
      reinterpret_cast<char*>(&driver_pos_)) + sizeof(hide_clock_));
}

ServiceDiscoveryResponse::~ServiceDiscoveryResponse() {
  // @@protoc_insertion_point(destructor:HU.ServiceDiscoveryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceDiscoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  head_unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_year_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_make_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceDiscoveryResponse::ArenaDtor(void* object) {
  ServiceDiscoveryResponse* _this = reinterpret_cast< ServiceDiscoveryResponse* >(object);
  (void)_this;
}
void ServiceDiscoveryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceDiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceDiscoveryResponse& ServiceDiscoveryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceDiscoveryResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void ServiceDiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ServiceDiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      head_unit_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      car_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      car_year_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      car_serial_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      headunit_make_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      headunit_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      sw_build_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      sw_version_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&driver_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_clock_) -
      reinterpret_cast<char*>(&driver_pos_)) + sizeof(hide_clock_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDiscoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HU.ChannelDescriptor channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required string head_unit_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_head_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.head_unit_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string car_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_car_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.car_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string car_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_car_year();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.car_year");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string car_serial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_car_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.car_serial");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool driver_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_driver_pos(&has_bits);
          driver_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string headunit_make = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_headunit_make();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.headunit_make");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string headunit_model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_headunit_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.headunit_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sw_build = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sw_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.sw_build");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sw_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sw_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.ServiceDiscoveryResponse.sw_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool can_play_native_media_during_vr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_can_play_native_media_during_vr(&has_bits);
          can_play_native_media_during_vr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool hide_clock = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_hide_clock(&has_bits);
          hide_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceDiscoveryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ServiceDiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HU.ChannelDescriptor channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required string head_unit_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_head_unit_name().data(), static_cast<int>(this->_internal_head_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.head_unit_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_head_unit_name(), target);
  }

  // required string car_model = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_car_model().data(), static_cast<int>(this->_internal_car_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.car_model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_car_model(), target);
  }

  // required string car_year = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_car_year().data(), static_cast<int>(this->_internal_car_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.car_year");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_car_year(), target);
  }

  // required string car_serial = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_car_serial().data(), static_cast<int>(this->_internal_car_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.car_serial");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_car_serial(), target);
  }

  // required bool driver_pos = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_driver_pos(), target);
  }

  // required string headunit_make = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headunit_make().data(), static_cast<int>(this->_internal_headunit_make().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.headunit_make");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_headunit_make(), target);
  }

  // required string headunit_model = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headunit_model().data(), static_cast<int>(this->_internal_headunit_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.headunit_model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_headunit_model(), target);
  }

  // required string sw_build = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sw_build().data(), static_cast<int>(this->_internal_sw_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.sw_build");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sw_build(), target);
  }

  // required string sw_version = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sw_version().data(), static_cast<int>(this->_internal_sw_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.ServiceDiscoveryResponse.sw_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sw_version(), target);
  }

  // required bool can_play_native_media_during_vr = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_can_play_native_media_during_vr(), target);
  }

  // required bool hide_clock = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_hide_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ServiceDiscoveryResponse)
  return target;
}

size_t ServiceDiscoveryResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.ServiceDiscoveryResponse)
  size_t total_size = 0;

  if (_internal_has_head_unit_name()) {
    // required string head_unit_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_unit_name());
  }

  if (_internal_has_car_model()) {
    // required string car_model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_model());
  }

  if (_internal_has_car_year()) {
    // required string car_year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_year());
  }

  if (_internal_has_car_serial()) {
    // required string car_serial = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_serial());
  }

  if (_internal_has_headunit_make()) {
    // required string headunit_make = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_make());
  }

  if (_internal_has_headunit_model()) {
    // required string headunit_model = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_model());
  }

  if (_internal_has_sw_build()) {
    // required string sw_build = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_build());
  }

  if (_internal_has_sw_version()) {
    // required string sw_version = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_version());
  }

  if (_internal_has_driver_pos()) {
    // required bool driver_pos = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_can_play_native_media_during_vr()) {
    // required bool can_play_native_media_during_vr = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_hide_clock()) {
    // required bool hide_clock = 12;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ServiceDiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ServiceDiscoveryResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string head_unit_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_unit_name());

    // required string car_model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_model());

    // required string car_year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_year());

    // required string car_serial = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_serial());

    // required string headunit_make = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_make());

    // required string headunit_model = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_model());

    // required string sw_build = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_build());

    // required string sw_version = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_version());

    // required bool driver_pos = 6;
    total_size += 1 + 1;

    // required bool can_play_native_media_during_vr = 11;
    total_size += 1 + 1;

    // required bool hide_clock = 12;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.ChannelDescriptor channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceDiscoveryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceDiscoveryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceDiscoveryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ServiceDiscoveryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ServiceDiscoveryResponse)
    MergeFrom(*source);
  }
}

void ServiceDiscoveryResponse::MergeFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_head_unit_name(from._internal_head_unit_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_car_model(from._internal_car_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_car_year(from._internal_car_year());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_car_serial(from._internal_car_serial());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_headunit_make(from._internal_headunit_make());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_headunit_model(from._internal_headunit_model());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_sw_build(from._internal_sw_build());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_sw_version(from._internal_sw_version());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      driver_pos_ = from.driver_pos_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_play_native_media_during_vr_ = from.can_play_native_media_during_vr_;
    }
    if (cached_has_bits & 0x00000400u) {
      hide_clock_ = from.hide_clock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServiceDiscoveryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDiscoveryResponse::CopyFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(channels_)) return false;
  return true;
}

void ServiceDiscoveryResponse::InternalSwap(ServiceDiscoveryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channels_.InternalSwap(&other->channels_);
  head_unit_name_.Swap(&other->head_unit_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_model_.Swap(&other->car_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_year_.Swap(&other->car_year_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_serial_.Swap(&other->car_serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headunit_make_.Swap(&other->headunit_make_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headunit_model_.Swap(&other->headunit_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_build_.Swap(&other->sw_build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_version_.Swap(&other->sw_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceDiscoveryResponse, hide_clock_)
      + sizeof(ServiceDiscoveryResponse::hide_clock_)
      - PROTOBUF_FIELD_OFFSET(ServiceDiscoveryResponse, driver_pos_)>(
          reinterpret_cast<char*>(&driver_pos_),
          reinterpret_cast<char*>(&other->driver_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelOpenRequest::InitAsDefaultInstance() {
}
class ChannelOpenRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelOpenRequest>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelOpenRequest::ChannelOpenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelOpenRequest)
}
ChannelOpenRequest::ChannelOpenRequest(const ChannelOpenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:HU.ChannelOpenRequest)
}

void ChannelOpenRequest::SharedCtor() {
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(id_));
}

ChannelOpenRequest::~ChannelOpenRequest() {
  // @@protoc_insertion_point(destructor:HU.ChannelOpenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelOpenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelOpenRequest::ArenaDtor(void* object) {
  ChannelOpenRequest* _this = reinterpret_cast< ChannelOpenRequest* >(object);
  (void)_this;
}
void ChannelOpenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelOpenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelOpenRequest& ChannelOpenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelOpenRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelOpenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelOpenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&priority_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelOpenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelOpenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelOpenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_priority(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelOpenRequest)
  return target;
}

size_t ChannelOpenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelOpenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 priority = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_priority());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelOpenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelOpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelOpenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelOpenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelOpenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelOpenRequest)
    MergeFrom(*source);
  }
}

void ChannelOpenRequest::MergeFrom(const ChannelOpenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelOpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelOpenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelOpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelOpenRequest::CopyFrom(const ChannelOpenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelOpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelOpenRequest::IsInitialized() const {
  return true;
}

void ChannelOpenRequest::InternalSwap(ChannelOpenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelOpenRequest, id_)
      + sizeof(ChannelOpenRequest::id_)
      - PROTOBUF_FIELD_OFFSET(ChannelOpenRequest, priority_)>(
          reinterpret_cast<char*>(&priority_),
          reinterpret_cast<char*>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelOpenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelOpenResponse::InitAsDefaultInstance() {
}
class ChannelOpenResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelOpenResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ChannelOpenResponse::ChannelOpenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ChannelOpenResponse)
}
ChannelOpenResponse::ChannelOpenResponse(const ChannelOpenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:HU.ChannelOpenResponse)
}

void ChannelOpenResponse::SharedCtor() {
  status_ = 0;
}

ChannelOpenResponse::~ChannelOpenResponse() {
  // @@protoc_insertion_point(destructor:HU.ChannelOpenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelOpenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelOpenResponse::ArenaDtor(void* object) {
  ChannelOpenResponse* _this = reinterpret_cast< ChannelOpenResponse* >(object);
  (void)_this;
}
void ChannelOpenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelOpenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelOpenResponse& ChannelOpenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelOpenResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void ChannelOpenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ChannelOpenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelOpenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.STATUS status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::STATUS_IsValid(val))) {
            _internal_set_status(static_cast<::HU::STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelOpenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ChannelOpenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.STATUS status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ChannelOpenResponse)
  return target;
}

size_t ChannelOpenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ChannelOpenResponse)
  size_t total_size = 0;

  // required .HU.STATUS status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelOpenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ChannelOpenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelOpenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelOpenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ChannelOpenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ChannelOpenResponse)
    MergeFrom(*source);
  }
}

void ChannelOpenResponse::MergeFrom(const ChannelOpenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ChannelOpenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void ChannelOpenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ChannelOpenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelOpenResponse::CopyFrom(const ChannelOpenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ChannelOpenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelOpenResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChannelOpenResponse::InternalSwap(ChannelOpenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelOpenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PingRequest::InitAsDefaultInstance() {
}
class PingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PingRequest>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:HU.PingRequest)
}

void PingRequest::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:HU.PingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PingRequest::ArenaDtor(void* object) {
  PingRequest* _this = reinterpret_cast< PingRequest* >(object);
  (void)_this;
}
void PingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingRequest& PingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.PingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.PingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.PingRequest)
  size_t total_size = 0;

  // required int64 timestamp = 1;
  if (_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.PingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void PingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PingResponse::InitAsDefaultInstance() {
}
class PingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PingResponse>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:HU.PingResponse)
}

void PingResponse::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:HU.PingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PingResponse::ArenaDtor(void* object) {
  PingResponse* _this = reinterpret_cast< PingResponse* >(object);
  (void)_this;
}
void PingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingResponse& PingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.PingResponse)
  return target;
}

size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.PingResponse)
  size_t total_size = 0;

  // required int64 timestamp = 1;
  if (_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.PingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.PingResponse)
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void PingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PingResponse::InternalSwap(PingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutdownRequest::InitAsDefaultInstance() {
}
class ShutdownRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ShutdownRequest>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShutdownRequest::ShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ShutdownRequest)
}
ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:HU.ShutdownRequest)
}

void ShutdownRequest::SharedCtor() {
  reason_ = 1;
}

ShutdownRequest::~ShutdownRequest() {
  // @@protoc_insertion_point(destructor:HU.ShutdownRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShutdownRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShutdownRequest::ArenaDtor(void* object) {
  ShutdownRequest* _this = reinterpret_cast< ShutdownRequest* >(object);
  (void)_this;
}
void ShutdownRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownRequest& ShutdownRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void ShutdownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ShutdownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HU.ShutdownRequest.REASON reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::ShutdownRequest_REASON_IsValid(val))) {
            _internal_set_reason(static_cast<::HU::ShutdownRequest_REASON>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ShutdownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HU.ShutdownRequest.REASON reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ShutdownRequest)
  return target;
}

size_t ShutdownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ShutdownRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .HU.ShutdownRequest.REASON reason = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ShutdownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ShutdownRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ShutdownRequest)
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ShutdownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
}

void ShutdownRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {
  return true;
}

void ShutdownRequest::InternalSwap(ShutdownRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutdownResponse::InitAsDefaultInstance() {
}
class ShutdownResponse::_Internal {
 public:
};

ShutdownResponse::ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.ShutdownResponse)
}
ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.ShutdownResponse)
}

void ShutdownResponse::SharedCtor() {
}

ShutdownResponse::~ShutdownResponse() {
  // @@protoc_insertion_point(destructor:HU.ShutdownResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShutdownResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShutdownResponse::ArenaDtor(void* object) {
  ShutdownResponse* _this = reinterpret_cast< ShutdownResponse* >(object);
  (void)_this;
}
void ShutdownResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownResponse& ShutdownResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void ShutdownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.ShutdownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.ShutdownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.ShutdownResponse)
  return target;
}

size_t ShutdownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.ShutdownResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.ShutdownResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.ShutdownResponse)
    MergeFrom(*source);
  }
}

void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShutdownResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {
  return true;
}

void ShutdownResponse::InternalSwap(ShutdownResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaSetupRequest::InitAsDefaultInstance() {
}
class MediaSetupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaSetupRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MediaSetupRequest::MediaSetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.MediaSetupRequest)
}
MediaSetupRequest::MediaSetupRequest(const MediaSetupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:HU.MediaSetupRequest)
}

void MediaSetupRequest::SharedCtor() {
  type_ = 0u;
}

MediaSetupRequest::~MediaSetupRequest() {
  // @@protoc_insertion_point(destructor:HU.MediaSetupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaSetupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MediaSetupRequest::ArenaDtor(void* object) {
  MediaSetupRequest* _this = reinterpret_cast< MediaSetupRequest* >(object);
  (void)_this;
}
void MediaSetupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaSetupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaSetupRequest& MediaSetupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaSetupRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void MediaSetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.MediaSetupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaSetupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaSetupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.MediaSetupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.MediaSetupRequest)
  return target;
}

size_t MediaSetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.MediaSetupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaSetupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.MediaSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaSetupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaSetupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.MediaSetupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.MediaSetupRequest)
    MergeFrom(*source);
  }
}

void MediaSetupRequest::MergeFrom(const MediaSetupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.MediaSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void MediaSetupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.MediaSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSetupRequest::CopyFrom(const MediaSetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.MediaSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSetupRequest::IsInitialized() const {
  return true;
}

void MediaSetupRequest::InternalSwap(MediaSetupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaSetupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaSetupResponse::InitAsDefaultInstance() {
}
class MediaSetupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaSetupResponse>()._has_bits_);
  static void set_has_media_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_unacked(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MediaSetupResponse::MediaSetupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.MediaSetupResponse)
}
MediaSetupResponse::MediaSetupResponse(const MediaSetupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      configs_(from.configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_unacked_, &from.max_unacked_,
    static_cast<size_t>(reinterpret_cast<char*>(&media_status_) -
    reinterpret_cast<char*>(&max_unacked_)) + sizeof(media_status_));
  // @@protoc_insertion_point(copy_constructor:HU.MediaSetupResponse)
}

void MediaSetupResponse::SharedCtor() {
  max_unacked_ = 0u;
  media_status_ = 1;
}

MediaSetupResponse::~MediaSetupResponse() {
  // @@protoc_insertion_point(destructor:HU.MediaSetupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaSetupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MediaSetupResponse::ArenaDtor(void* object) {
  MediaSetupResponse* _this = reinterpret_cast< MediaSetupResponse* >(object);
  (void)_this;
}
void MediaSetupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaSetupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaSetupResponse& MediaSetupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaSetupResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void MediaSetupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.MediaSetupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    max_unacked_ = 0u;
    media_status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaSetupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.MediaSetupResponse.MEDIA_STATUS media_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::MediaSetupResponse_MEDIA_STATUS_IsValid(val))) {
            _internal_set_media_status(static_cast<::HU::MediaSetupResponse_MEDIA_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 max_unacked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_unacked(&has_bits);
          max_unacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 configs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_configs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_configs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaSetupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.MediaSetupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.MediaSetupResponse.MEDIA_STATUS media_status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_media_status(), target);
  }

  // required uint32 max_unacked = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_unacked(), target);
  }

  // repeated uint32 configs = 3;
  for (int i = 0, n = this->_internal_configs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_configs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.MediaSetupResponse)
  return target;
}

size_t MediaSetupResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.MediaSetupResponse)
  size_t total_size = 0;

  if (_internal_has_max_unacked()) {
    // required uint32 max_unacked = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_unacked());
  }

  if (_internal_has_media_status()) {
    // required .HU.MediaSetupResponse.MEDIA_STATUS media_status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media_status());
  }

  return total_size;
}
size_t MediaSetupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.MediaSetupResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 max_unacked = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_unacked());

    // required .HU.MediaSetupResponse.MEDIA_STATUS media_status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 configs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->configs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configs_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaSetupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.MediaSetupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaSetupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaSetupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.MediaSetupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.MediaSetupResponse)
    MergeFrom(*source);
  }
}

void MediaSetupResponse::MergeFrom(const MediaSetupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.MediaSetupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      max_unacked_ = from.max_unacked_;
    }
    if (cached_has_bits & 0x00000002u) {
      media_status_ = from.media_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaSetupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.MediaSetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSetupResponse::CopyFrom(const MediaSetupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.MediaSetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSetupResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MediaSetupResponse::InternalSwap(MediaSetupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configs_.InternalSwap(&other->configs_);
  swap(max_unacked_, other->max_unacked_);
  swap(media_status_, other->media_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaSetupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaStopRequest::InitAsDefaultInstance() {
}
class MediaStopRequest::_Internal {
 public:
};

MediaStopRequest::MediaStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.MediaStopRequest)
}
MediaStopRequest::MediaStopRequest(const MediaStopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.MediaStopRequest)
}

void MediaStopRequest::SharedCtor() {
}

MediaStopRequest::~MediaStopRequest() {
  // @@protoc_insertion_point(destructor:HU.MediaStopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaStopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MediaStopRequest::ArenaDtor(void* object) {
  MediaStopRequest* _this = reinterpret_cast< MediaStopRequest* >(object);
  (void)_this;
}
void MediaStopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaStopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaStopRequest& MediaStopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaStopRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void MediaStopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.MediaStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaStopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.MediaStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.MediaStopRequest)
  return target;
}

size_t MediaStopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.MediaStopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaStopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.MediaStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaStopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaStopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.MediaStopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.MediaStopRequest)
    MergeFrom(*source);
  }
}

void MediaStopRequest::MergeFrom(const MediaStopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.MediaStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MediaStopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.MediaStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStopRequest::CopyFrom(const MediaStopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.MediaStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStopRequest::IsInitialized() const {
  return true;
}

void MediaStopRequest::InternalSwap(MediaStopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaStartRequest::InitAsDefaultInstance() {
}
class MediaStartRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStartRequest>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MediaStartRequest::MediaStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.MediaStartRequest)
}
MediaStartRequest::MediaStartRequest(const MediaStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&session_)) + sizeof(config_));
  // @@protoc_insertion_point(copy_constructor:HU.MediaStartRequest)
}

void MediaStartRequest::SharedCtor() {
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&session_)) + sizeof(config_));
}

MediaStartRequest::~MediaStartRequest() {
  // @@protoc_insertion_point(destructor:HU.MediaStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MediaStartRequest::ArenaDtor(void* object) {
  MediaStartRequest* _this = reinterpret_cast< MediaStartRequest* >(object);
  (void)_this;
}
void MediaStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaStartRequest& MediaStartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaStartRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void MediaStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.MediaStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&config_) -
        reinterpret_cast<char*>(&session_)) + sizeof(config_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_session(&has_bits);
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_config(&has_bits);
          config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.MediaStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 session = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_session(), target);
  }

  // optional uint32 config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.MediaStartRequest)
  return target;
}

size_t MediaStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.MediaStartRequest)
  size_t total_size = 0;

  // required int32 session = 1;
  if (_internal_has_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 config = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_config());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.MediaStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.MediaStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.MediaStartRequest)
    MergeFrom(*source);
  }
}

void MediaStartRequest::MergeFrom(const MediaStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.MediaStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000002u) {
      config_ = from.config_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.MediaStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStartRequest::CopyFrom(const MediaStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.MediaStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStartRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MediaStartRequest::InternalSwap(MediaStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStartRequest, config_)
      + sizeof(MediaStartRequest::config_)
      - PROTOBUF_FIELD_OFFSET(MediaStartRequest, session_)>(
          reinterpret_cast<char*>(&session_),
          reinterpret_cast<char*>(&other->session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaAck::InitAsDefaultInstance() {
}
class MediaAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaAck>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MediaAck::MediaAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.MediaAck)
}
MediaAck::MediaAck(const MediaAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&session_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:HU.MediaAck)
}

void MediaAck::SharedCtor() {
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&session_)) + sizeof(value_));
}

MediaAck::~MediaAck() {
  // @@protoc_insertion_point(destructor:HU.MediaAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MediaAck::ArenaDtor(void* object) {
  MediaAck* _this = reinterpret_cast< MediaAck* >(object);
  (void)_this;
}
void MediaAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaAck& MediaAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaAck_hu_2eproto.base);
  return *internal_default_instance();
}


void MediaAck::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.MediaAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&session_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_session(&has_bits);
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.MediaAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 session = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_session(), target);
  }

  // required uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.MediaAck)
  return target;
}

size_t MediaAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.MediaAck)
  size_t total_size = 0;

  if (_internal_has_session()) {
    // required int32 session = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());
  }

  if (_internal_has_value()) {
    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  return total_size;
}
size_t MediaAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.MediaAck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 session = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());

    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.MediaAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.MediaAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.MediaAck)
    MergeFrom(*source);
  }
}

void MediaAck::MergeFrom(const MediaAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.MediaAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.MediaAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaAck::CopyFrom(const MediaAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.MediaAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MediaAck::InternalSwap(MediaAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaAck, value_)
      + sizeof(MediaAck::value_)
      - PROTOBUF_FIELD_OFFSET(MediaAck, session_)>(
          reinterpret_cast<char*>(&session_),
          reinterpret_cast<char*>(&other->session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MicRequest::InitAsDefaultInstance() {
}
class MicRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MicRequest>()._has_bits_);
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_anc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_unacked(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MicRequest::MicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.MicRequest)
}
MicRequest::MicRequest(const MicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_unacked_) -
    reinterpret_cast<char*>(&open_)) + sizeof(max_unacked_));
  // @@protoc_insertion_point(copy_constructor:HU.MicRequest)
}

void MicRequest::SharedCtor() {
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_unacked_) -
      reinterpret_cast<char*>(&open_)) + sizeof(max_unacked_));
}

MicRequest::~MicRequest() {
  // @@protoc_insertion_point(destructor:HU.MicRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MicRequest::ArenaDtor(void* object) {
  MicRequest* _this = reinterpret_cast< MicRequest* >(object);
  (void)_this;
}
void MicRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MicRequest& MicRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MicRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void MicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.MicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_unacked_) -
        reinterpret_cast<char*>(&open_)) + sizeof(max_unacked_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_open(&has_bits);
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool anc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_anc(&has_bits);
          anc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ec(&has_bits);
          ec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_unacked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_unacked(&has_bits);
          max_unacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MicRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.MicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  // optional bool anc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_anc(), target);
  }

  // optional bool ec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ec(), target);
  }

  // optional int32 max_unacked = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_unacked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.MicRequest)
  return target;
}

size_t MicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.MicRequest)
  size_t total_size = 0;

  // required bool open = 1;
  if (_internal_has_open()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bool anc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool ec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 max_unacked = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_unacked());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MicRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.MicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MicRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.MicRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.MicRequest)
    MergeFrom(*source);
  }
}

void MicRequest::MergeFrom(const MicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.MicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      open_ = from.open_;
    }
    if (cached_has_bits & 0x00000002u) {
      anc_ = from.anc_;
    }
    if (cached_has_bits & 0x00000004u) {
      ec_ = from.ec_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_unacked_ = from.max_unacked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MicRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.MicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicRequest::CopyFrom(const MicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.MicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MicRequest::InternalSwap(MicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MicRequest, max_unacked_)
      + sizeof(MicRequest::max_unacked_)
      - PROTOBUF_FIELD_OFFSET(MicRequest, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MicRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MicResponse::InitAsDefaultInstance() {
}
class MicResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MicResponse>()._has_bits_);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MicResponse::MicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.MicResponse)
}
MicResponse::MicResponse(const MicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&session_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:HU.MicResponse)
}

void MicResponse::SharedCtor() {
  ::memset(&session_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&session_)) + sizeof(value_));
}

MicResponse::~MicResponse() {
  // @@protoc_insertion_point(destructor:HU.MicResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MicResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MicResponse::ArenaDtor(void* object) {
  MicResponse* _this = reinterpret_cast< MicResponse* >(object);
  (void)_this;
}
void MicResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MicResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MicResponse& MicResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MicResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void MicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.MicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&session_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MicResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_session(&has_bits);
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MicResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.MicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 session = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_session(), target);
  }

  // required uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.MicResponse)
  return target;
}

size_t MicResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.MicResponse)
  size_t total_size = 0;

  if (_internal_has_session()) {
    // required int32 session = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());
  }

  if (_internal_has_value()) {
    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  return total_size;
}
size_t MicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.MicResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 session = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());

    // required uint32 value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MicResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.MicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MicResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MicResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.MicResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.MicResponse)
    MergeFrom(*source);
  }
}

void MicResponse::MergeFrom(const MicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.MicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MicResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.MicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MicResponse::CopyFrom(const MicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.MicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MicResponse::InternalSwap(MicResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MicResponse, value_)
      + sizeof(MicResponse::value_)
      - PROTOBUF_FIELD_OFFSET(MicResponse, session_)>(
          reinterpret_cast<char*>(&session_),
          reinterpret_cast<char*>(&other->session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MicResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoFocusRequest::InitAsDefaultInstance() {
}
class VideoFocusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoFocusRequest>()._has_bits_);
  static void set_has_disp_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VideoFocusRequest::VideoFocusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.VideoFocusRequest)
}
VideoFocusRequest::VideoFocusRequest(const VideoFocusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&disp_index_, &from.disp_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&disp_index_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:HU.VideoFocusRequest)
}

void VideoFocusRequest::SharedCtor() {
  disp_index_ = 0;
  mode_ = 1;
  reason_ = 1;
}

VideoFocusRequest::~VideoFocusRequest() {
  // @@protoc_insertion_point(destructor:HU.VideoFocusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoFocusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VideoFocusRequest::ArenaDtor(void* object) {
  VideoFocusRequest* _this = reinterpret_cast< VideoFocusRequest* >(object);
  (void)_this;
}
void VideoFocusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoFocusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoFocusRequest& VideoFocusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoFocusRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void VideoFocusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.VideoFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    disp_index_ = 0;
    mode_ = 1;
    reason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFocusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 disp_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_disp_index(&has_bits);
          disp_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.VIDEO_FOCUS_MODE mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::VIDEO_FOCUS_MODE_IsValid(val))) {
            _internal_set_mode(static_cast<::HU::VIDEO_FOCUS_MODE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .HU.VIDEO_FOCUS_REASON reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::VIDEO_FOCUS_REASON_IsValid(val))) {
            _internal_set_reason(static_cast<::HU::VIDEO_FOCUS_REASON>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFocusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.VideoFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 disp_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_disp_index(), target);
  }

  // optional .HU.VIDEO_FOCUS_MODE mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // optional .HU.VIDEO_FOCUS_REASON reason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.VideoFocusRequest)
  return target;
}

size_t VideoFocusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.VideoFocusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 disp_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_disp_index());
    }

    // optional .HU.VIDEO_FOCUS_MODE mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional .HU.VIDEO_FOCUS_REASON reason = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFocusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.VideoFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFocusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFocusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.VideoFocusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.VideoFocusRequest)
    MergeFrom(*source);
  }
}

void VideoFocusRequest::MergeFrom(const VideoFocusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.VideoFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      disp_index_ = from.disp_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoFocusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.VideoFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFocusRequest::CopyFrom(const VideoFocusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.VideoFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFocusRequest::IsInitialized() const {
  return true;
}

void VideoFocusRequest::InternalSwap(VideoFocusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(disp_index_, other->disp_index_);
  swap(mode_, other->mode_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFocusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoFocus::InitAsDefaultInstance() {
}
class VideoFocus::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoFocus>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unrequested(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VideoFocus::VideoFocus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.VideoFocus)
}
VideoFocus::VideoFocus(const VideoFocus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unrequested_, &from.unrequested_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&unrequested_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:HU.VideoFocus)
}

void VideoFocus::SharedCtor() {
  unrequested_ = false;
  mode_ = 1;
}

VideoFocus::~VideoFocus() {
  // @@protoc_insertion_point(destructor:HU.VideoFocus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoFocus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VideoFocus::ArenaDtor(void* object) {
  VideoFocus* _this = reinterpret_cast< VideoFocus* >(object);
  (void)_this;
}
void VideoFocus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoFocus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoFocus& VideoFocus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoFocus_hu_2eproto.base);
  return *internal_default_instance();
}


void VideoFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.VideoFocus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    unrequested_ = false;
    mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFocus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HU.VIDEO_FOCUS_MODE mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::VIDEO_FOCUS_MODE_IsValid(val))) {
            _internal_set_mode(static_cast<::HU::VIDEO_FOCUS_MODE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool unrequested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unrequested(&has_bits);
          unrequested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFocus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.VideoFocus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HU.VIDEO_FOCUS_MODE mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // optional bool unrequested = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unrequested(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.VideoFocus)
  return target;
}

size_t VideoFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.VideoFocus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool unrequested = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .HU.VIDEO_FOCUS_MODE mode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFocus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.VideoFocus)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFocus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFocus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.VideoFocus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.VideoFocus)
    MergeFrom(*source);
  }
}

void VideoFocus::MergeFrom(const VideoFocus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.VideoFocus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unrequested_ = from.unrequested_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoFocus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.VideoFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFocus::CopyFrom(const VideoFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.VideoFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFocus::IsInitialized() const {
  return true;
}

void VideoFocus::InternalSwap(VideoFocus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unrequested_, other->unrequested_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFocus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorStartRequest::InitAsDefaultInstance() {
}
class SensorStartRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorStartRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_refresh_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SensorStartRequest::SensorStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorStartRequest)
}
SensorStartRequest::SensorStartRequest(const SensorStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&refresh_interval_, &from.refresh_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&refresh_interval_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:HU.SensorStartRequest)
}

void SensorStartRequest::SharedCtor() {
  refresh_interval_ = PROTOBUF_LONGLONG(0);
  type_ = 1;
}

SensorStartRequest::~SensorStartRequest() {
  // @@protoc_insertion_point(destructor:HU.SensorStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorStartRequest::ArenaDtor(void* object) {
  SensorStartRequest* _this = reinterpret_cast< SensorStartRequest* >(object);
  (void)_this;
}
void SensorStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorStartRequest& SensorStartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorStartRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    refresh_interval_ = PROTOBUF_LONGLONG(0);
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.SENSOR_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::SENSOR_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::HU::SENSOR_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 refresh_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_refresh_interval(&has_bits);
          refresh_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.SENSOR_TYPE type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int64 refresh_interval = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_refresh_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorStartRequest)
  return target;
}

size_t SensorStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorStartRequest)
  size_t total_size = 0;

  // required .HU.SENSOR_TYPE type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 refresh_interval = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_refresh_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorStartRequest)
    MergeFrom(*source);
  }
}

void SensorStartRequest::MergeFrom(const SensorStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      refresh_interval_ = from.refresh_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorStartRequest::CopyFrom(const SensorStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStartRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorStartRequest::InternalSwap(SensorStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(refresh_interval_, other->refresh_interval_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorStartResponse::InitAsDefaultInstance() {
}
class SensorStartResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorStartResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SensorStartResponse::SensorStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.SensorStartResponse)
}
SensorStartResponse::SensorStartResponse(const SensorStartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:HU.SensorStartResponse)
}

void SensorStartResponse::SharedCtor() {
  status_ = 0;
}

SensorStartResponse::~SensorStartResponse() {
  // @@protoc_insertion_point(destructor:HU.SensorStartResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorStartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorStartResponse::ArenaDtor(void* object) {
  SensorStartResponse* _this = reinterpret_cast< SensorStartResponse* >(object);
  (void)_this;
}
void SensorStartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorStartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorStartResponse& SensorStartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorStartResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void SensorStartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.SensorStartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorStartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.STATUS status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::STATUS_IsValid(val))) {
            _internal_set_status(static_cast<::HU::STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorStartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.SensorStartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.STATUS status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.SensorStartResponse)
  return target;
}

size_t SensorStartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.SensorStartResponse)
  size_t total_size = 0;

  // required .HU.STATUS status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorStartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.SensorStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorStartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorStartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.SensorStartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.SensorStartResponse)
    MergeFrom(*source);
  }
}

void SensorStartResponse::MergeFrom(const SensorStartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.SensorStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void SensorStartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.SensorStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorStartResponse::CopyFrom(const SensorStartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.SensorStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStartResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SensorStartResponse::InternalSwap(SensorStartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorStartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationFocusRequest::InitAsDefaultInstance() {
}
class NavigationFocusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationFocusRequest>()._has_bits_);
  static void set_has_focus_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NavigationFocusRequest::NavigationFocusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.NavigationFocusRequest)
}
NavigationFocusRequest::NavigationFocusRequest(const NavigationFocusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  focus_type_ = from.focus_type_;
  // @@protoc_insertion_point(copy_constructor:HU.NavigationFocusRequest)
}

void NavigationFocusRequest::SharedCtor() {
  focus_type_ = 0u;
}

NavigationFocusRequest::~NavigationFocusRequest() {
  // @@protoc_insertion_point(destructor:HU.NavigationFocusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationFocusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NavigationFocusRequest::ArenaDtor(void* object) {
  NavigationFocusRequest* _this = reinterpret_cast< NavigationFocusRequest* >(object);
  (void)_this;
}
void NavigationFocusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationFocusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationFocusRequest& NavigationFocusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationFocusRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void NavigationFocusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.NavigationFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  focus_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationFocusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 focus_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_focus_type(&has_bits);
          focus_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationFocusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.NavigationFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focus_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_focus_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.NavigationFocusRequest)
  return target;
}

size_t NavigationFocusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.NavigationFocusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 focus_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_focus_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationFocusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.NavigationFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationFocusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationFocusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.NavigationFocusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.NavigationFocusRequest)
    MergeFrom(*source);
  }
}

void NavigationFocusRequest::MergeFrom(const NavigationFocusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.NavigationFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_focus_type()) {
    _internal_set_focus_type(from._internal_focus_type());
  }
}

void NavigationFocusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.NavigationFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationFocusRequest::CopyFrom(const NavigationFocusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.NavigationFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationFocusRequest::IsInitialized() const {
  return true;
}

void NavigationFocusRequest::InternalSwap(NavigationFocusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(focus_type_, other->focus_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationFocusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationFocusResponse::InitAsDefaultInstance() {
}
class NavigationFocusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationFocusResponse>()._has_bits_);
  static void set_has_focus_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NavigationFocusResponse::NavigationFocusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.NavigationFocusResponse)
}
NavigationFocusResponse::NavigationFocusResponse(const NavigationFocusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  focus_type_ = from.focus_type_;
  // @@protoc_insertion_point(copy_constructor:HU.NavigationFocusResponse)
}

void NavigationFocusResponse::SharedCtor() {
  focus_type_ = 0u;
}

NavigationFocusResponse::~NavigationFocusResponse() {
  // @@protoc_insertion_point(destructor:HU.NavigationFocusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationFocusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NavigationFocusResponse::ArenaDtor(void* object) {
  NavigationFocusResponse* _this = reinterpret_cast< NavigationFocusResponse* >(object);
  (void)_this;
}
void NavigationFocusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationFocusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationFocusResponse& NavigationFocusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationFocusResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void NavigationFocusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.NavigationFocusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  focus_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationFocusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 focus_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_focus_type(&has_bits);
          focus_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationFocusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.NavigationFocusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focus_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_focus_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.NavigationFocusResponse)
  return target;
}

size_t NavigationFocusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.NavigationFocusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 focus_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_focus_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationFocusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.NavigationFocusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationFocusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationFocusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.NavigationFocusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.NavigationFocusResponse)
    MergeFrom(*source);
  }
}

void NavigationFocusResponse::MergeFrom(const NavigationFocusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.NavigationFocusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_focus_type()) {
    _internal_set_focus_type(from._internal_focus_type());
  }
}

void NavigationFocusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.NavigationFocusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationFocusResponse::CopyFrom(const NavigationFocusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.NavigationFocusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationFocusResponse::IsInitialized() const {
  return true;
}

void NavigationFocusResponse::InternalSwap(NavigationFocusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(focus_type_, other->focus_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationFocusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoiceSessionRequest::InitAsDefaultInstance() {
}
class VoiceSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VoiceSessionRequest>()._has_bits_);
  static void set_has_voice_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VoiceSessionRequest::VoiceSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.VoiceSessionRequest)
}
VoiceSessionRequest::VoiceSessionRequest(const VoiceSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voice_status_ = from.voice_status_;
  // @@protoc_insertion_point(copy_constructor:HU.VoiceSessionRequest)
}

void VoiceSessionRequest::SharedCtor() {
  voice_status_ = 1;
}

VoiceSessionRequest::~VoiceSessionRequest() {
  // @@protoc_insertion_point(destructor:HU.VoiceSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoiceSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VoiceSessionRequest::ArenaDtor(void* object) {
  VoiceSessionRequest* _this = reinterpret_cast< VoiceSessionRequest* >(object);
  (void)_this;
}
void VoiceSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoiceSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoiceSessionRequest& VoiceSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoiceSessionRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void VoiceSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.VoiceSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voice_status_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoiceSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HU.VoiceSessionRequest.VOICE_STATUS voice_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::VoiceSessionRequest_VOICE_STATUS_IsValid(val))) {
            _internal_set_voice_status(static_cast<::HU::VoiceSessionRequest_VOICE_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoiceSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.VoiceSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HU.VoiceSessionRequest.VOICE_STATUS voice_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_voice_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.VoiceSessionRequest)
  return target;
}

size_t VoiceSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.VoiceSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .HU.VoiceSessionRequest.VOICE_STATUS voice_status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_voice_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoiceSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.VoiceSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoiceSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.VoiceSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.VoiceSessionRequest)
    MergeFrom(*source);
  }
}

void VoiceSessionRequest::MergeFrom(const VoiceSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.VoiceSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_voice_status()) {
    _internal_set_voice_status(from._internal_voice_status());
  }
}

void VoiceSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.VoiceSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceSessionRequest::CopyFrom(const VoiceSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.VoiceSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceSessionRequest::IsInitialized() const {
  return true;
}

void VoiceSessionRequest::InternalSwap(VoiceSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(voice_status_, other->voice_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioFocusRequest::InitAsDefaultInstance() {
}
class AudioFocusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioFocusRequest>()._has_bits_);
  static void set_has_focus_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AudioFocusRequest::AudioFocusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.AudioFocusRequest)
}
AudioFocusRequest::AudioFocusRequest(const AudioFocusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  focus_type_ = from.focus_type_;
  // @@protoc_insertion_point(copy_constructor:HU.AudioFocusRequest)
}

void AudioFocusRequest::SharedCtor() {
  focus_type_ = 1;
}

AudioFocusRequest::~AudioFocusRequest() {
  // @@protoc_insertion_point(destructor:HU.AudioFocusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioFocusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioFocusRequest::ArenaDtor(void* object) {
  AudioFocusRequest* _this = reinterpret_cast< AudioFocusRequest* >(object);
  (void)_this;
}
void AudioFocusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioFocusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFocusRequest& AudioFocusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioFocusRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void AudioFocusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.AudioFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  focus_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioFocusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.AudioFocusRequest.AUDIO_FOCUS focus_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::AudioFocusRequest_AUDIO_FOCUS_IsValid(val))) {
            _internal_set_focus_type(static_cast<::HU::AudioFocusRequest_AUDIO_FOCUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioFocusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.AudioFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.AudioFocusRequest.AUDIO_FOCUS focus_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_focus_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.AudioFocusRequest)
  return target;
}

size_t AudioFocusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.AudioFocusRequest)
  size_t total_size = 0;

  // required .HU.AudioFocusRequest.AUDIO_FOCUS focus_type = 1;
  if (_internal_has_focus_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_focus_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFocusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.AudioFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFocusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioFocusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.AudioFocusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.AudioFocusRequest)
    MergeFrom(*source);
  }
}

void AudioFocusRequest::MergeFrom(const AudioFocusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.AudioFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_focus_type()) {
    _internal_set_focus_type(from._internal_focus_type());
  }
}

void AudioFocusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.AudioFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFocusRequest::CopyFrom(const AudioFocusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.AudioFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFocusRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AudioFocusRequest::InternalSwap(AudioFocusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(focus_type_, other->focus_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFocusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioFocusResponse::InitAsDefaultInstance() {
}
class AudioFocusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioFocusResponse>()._has_bits_);
  static void set_has_focus_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AudioFocusResponse::AudioFocusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.AudioFocusResponse)
}
AudioFocusResponse::AudioFocusResponse(const AudioFocusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  focus_type_ = from.focus_type_;
  // @@protoc_insertion_point(copy_constructor:HU.AudioFocusResponse)
}

void AudioFocusResponse::SharedCtor() {
  focus_type_ = 1;
}

AudioFocusResponse::~AudioFocusResponse() {
  // @@protoc_insertion_point(destructor:HU.AudioFocusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioFocusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioFocusResponse::ArenaDtor(void* object) {
  AudioFocusResponse* _this = reinterpret_cast< AudioFocusResponse* >(object);
  (void)_this;
}
void AudioFocusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioFocusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFocusResponse& AudioFocusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioFocusResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void AudioFocusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.AudioFocusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  focus_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioFocusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.AudioFocusResponse.AUDIO_FOCUS_STATE focus_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::AudioFocusResponse_AUDIO_FOCUS_STATE_IsValid(val))) {
            _internal_set_focus_type(static_cast<::HU::AudioFocusResponse_AUDIO_FOCUS_STATE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioFocusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.AudioFocusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.AudioFocusResponse.AUDIO_FOCUS_STATE focus_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_focus_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.AudioFocusResponse)
  return target;
}

size_t AudioFocusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.AudioFocusResponse)
  size_t total_size = 0;

  // required .HU.AudioFocusResponse.AUDIO_FOCUS_STATE focus_type = 1;
  if (_internal_has_focus_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_focus_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFocusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.AudioFocusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFocusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioFocusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.AudioFocusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.AudioFocusResponse)
    MergeFrom(*source);
  }
}

void AudioFocusResponse::MergeFrom(const AudioFocusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.AudioFocusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_focus_type()) {
    _internal_set_focus_type(from._internal_focus_type());
  }
}

void AudioFocusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.AudioFocusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFocusResponse::CopyFrom(const AudioFocusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.AudioFocusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFocusResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AudioFocusResponse::InternalSwap(AudioFocusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(focus_type_, other->focus_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioFocusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthCompleteResponse::InitAsDefaultInstance() {
}
class AuthCompleteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthCompleteResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthCompleteResponse::AuthCompleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.AuthCompleteResponse)
}
AuthCompleteResponse::AuthCompleteResponse(const AuthCompleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:HU.AuthCompleteResponse)
}

void AuthCompleteResponse::SharedCtor() {
  status_ = 0;
}

AuthCompleteResponse::~AuthCompleteResponse() {
  // @@protoc_insertion_point(destructor:HU.AuthCompleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthCompleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AuthCompleteResponse::ArenaDtor(void* object) {
  AuthCompleteResponse* _this = reinterpret_cast< AuthCompleteResponse* >(object);
  (void)_this;
}
void AuthCompleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthCompleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthCompleteResponse& AuthCompleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthCompleteResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void AuthCompleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.AuthCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthCompleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .HU.STATUS status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::STATUS_IsValid(val))) {
            _internal_set_status(static_cast<::HU::STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthCompleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.AuthCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .HU.STATUS status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.AuthCompleteResponse)
  return target;
}

size_t AuthCompleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.AuthCompleteResponse)
  size_t total_size = 0;

  // required .HU.STATUS status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthCompleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.AuthCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthCompleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthCompleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.AuthCompleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.AuthCompleteResponse)
    MergeFrom(*source);
  }
}

void AuthCompleteResponse::MergeFrom(const AuthCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.AuthCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void AuthCompleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.AuthCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthCompleteResponse::CopyFrom(const AuthCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.AuthCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthCompleteResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AuthCompleteResponse::InternalSwap(AuthCompleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthCompleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhoneStatus_Call::InitAsDefaultInstance() {
}
class PhoneStatus_Call::_Internal {
 public:
  using HasBits = decltype(std::declval<PhoneStatus_Call>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_call_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_phone_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caller_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phone_number_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PhoneStatus_Call::PhoneStatus_Call(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.PhoneStatus.Call)
}
PhoneStatus_Call::PhoneStatus_Call(const PhoneStatus_Call& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phone_number()) {
    phone_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phone_number(),
      GetArena());
  }
  caller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caller_id()) {
    caller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caller_id(),
      GetArena());
  }
  phone_number_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phone_number_type()) {
    phone_number_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phone_number_type(),
      GetArena());
  }
  thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumbnail()) {
    thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thumbnail(),
      GetArena());
  }
  ::memcpy(&call_time_, &from.call_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&call_time_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:HU.PhoneStatus.Call)
}

void PhoneStatus_Call::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhoneStatus_Call_hu_2eproto.base);
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_time_ = 0u;
  state_ = 1;
}

PhoneStatus_Call::~PhoneStatus_Call() {
  // @@protoc_insertion_point(destructor:HU.PhoneStatus.Call)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhoneStatus_Call::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PhoneStatus_Call::ArenaDtor(void* object) {
  PhoneStatus_Call* _this = reinterpret_cast< PhoneStatus_Call* >(object);
  (void)_this;
}
void PhoneStatus_Call::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhoneStatus_Call::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhoneStatus_Call& PhoneStatus_Call::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhoneStatus_Call_hu_2eproto.base);
  return *internal_default_instance();
}


void PhoneStatus_Call::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.PhoneStatus.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      phone_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      caller_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      phone_number_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    call_time_ = 0u;
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneStatus_Call::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HU.PhoneStatus.PHONE_STATE state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::PhoneStatus_PHONE_STATE_IsValid(val))) {
            _internal_set_state(static_cast<::HU::PhoneStatus_PHONE_STATE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 call_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_call_time(&has_bits);
          call_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phone_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.PhoneStatus.Call.phone_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caller_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_caller_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.PhoneStatus.Call.caller_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phone_number_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_phone_number_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.PhoneStatus.Call.phone_number_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes thumbnail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhoneStatus_Call::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.PhoneStatus.Call)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HU.PhoneStatus.PHONE_STATE state = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional uint32 call_time = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_call_time(), target);
  }

  // optional string phone_number = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.PhoneStatus.Call.phone_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_phone_number(), target);
  }

  // optional string caller_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caller_id().data(), static_cast<int>(this->_internal_caller_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.PhoneStatus.Call.caller_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_caller_id(), target);
  }

  // optional string phone_number_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phone_number_type().data(), static_cast<int>(this->_internal_phone_number_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.PhoneStatus.Call.phone_number_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_phone_number_type(), target);
  }

  // optional bytes thumbnail = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_thumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.PhoneStatus.Call)
  return target;
}

size_t PhoneStatus_Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.PhoneStatus.Call)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string phone_number = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phone_number());
    }

    // optional string caller_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caller_id());
    }

    // optional string phone_number_type = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phone_number_type());
    }

    // optional bytes thumbnail = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnail());
    }

    // optional uint32 call_time = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_call_time());
    }

    // optional .HU.PhoneStatus.PHONE_STATE state = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneStatus_Call::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.PhoneStatus.Call)
  GOOGLE_DCHECK_NE(&from, this);
  const PhoneStatus_Call* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhoneStatus_Call>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.PhoneStatus.Call)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.PhoneStatus.Call)
    MergeFrom(*source);
  }
}

void PhoneStatus_Call::MergeFrom(const PhoneStatus_Call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.PhoneStatus.Call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_phone_number(from._internal_phone_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_caller_id(from._internal_caller_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_phone_number_type(from._internal_phone_number_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_thumbnail(from._internal_thumbnail());
    }
    if (cached_has_bits & 0x00000010u) {
      call_time_ = from.call_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PhoneStatus_Call::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.PhoneStatus.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneStatus_Call::CopyFrom(const PhoneStatus_Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.PhoneStatus.Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneStatus_Call::IsInitialized() const {
  return true;
}

void PhoneStatus_Call::InternalSwap(PhoneStatus_Call* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phone_number_.Swap(&other->phone_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_id_.Swap(&other->caller_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_number_type_.Swap(&other->phone_number_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thumbnail_.Swap(&other->thumbnail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_time_, other->call_time_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneStatus_Call::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhoneStatus::InitAsDefaultInstance() {
}
class PhoneStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PhoneStatus>()._has_bits_);
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PhoneStatus::PhoneStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  calls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.PhoneStatus)
}
PhoneStatus::PhoneStatus(const PhoneStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      calls_(from.calls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signal_strength_ = from.signal_strength_;
  // @@protoc_insertion_point(copy_constructor:HU.PhoneStatus)
}

void PhoneStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhoneStatus_hu_2eproto.base);
  signal_strength_ = 0u;
}

PhoneStatus::~PhoneStatus() {
  // @@protoc_insertion_point(destructor:HU.PhoneStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhoneStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PhoneStatus::ArenaDtor(void* object) {
  PhoneStatus* _this = reinterpret_cast< PhoneStatus* >(object);
  (void)_this;
}
void PhoneStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhoneStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhoneStatus& PhoneStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhoneStatus_hu_2eproto.base);
  return *internal_default_instance();
}


void PhoneStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.PhoneStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calls_.Clear();
  signal_strength_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HU.PhoneStatus.Call calls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 signal_strength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_signal_strength(&has_bits);
          signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhoneStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.PhoneStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HU.PhoneStatus.Call calls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_calls(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 signal_strength = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_signal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.PhoneStatus)
  return target;
}

size_t PhoneStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.PhoneStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HU.PhoneStatus.Call calls = 1;
  total_size += 1UL * this->_internal_calls_size();
  for (const auto& msg : this->calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 signal_strength = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signal_strength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.PhoneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PhoneStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhoneStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.PhoneStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.PhoneStatus)
    MergeFrom(*source);
  }
}

void PhoneStatus::MergeFrom(const PhoneStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.PhoneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calls_.MergeFrom(from.calls_);
  if (from._internal_has_signal_strength()) {
    _internal_set_signal_strength(from._internal_signal_strength());
  }
}

void PhoneStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.PhoneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneStatus::CopyFrom(const PhoneStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.PhoneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneStatus::IsInitialized() const {
  return true;
}

void PhoneStatus::InternalSwap(PhoneStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  calls_.InternalSwap(&other->calls_);
  swap(signal_strength_, other->signal_strength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhoneStatusInput::InitAsDefaultInstance() {
}
class PhoneStatusInput::_Internal {
 public:
  using HasBits = decltype(std::declval<PhoneStatusInput>()._has_bits_);
  static void set_has_caller_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caller_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PhoneStatusInput::PhoneStatusInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.PhoneStatusInput)
}
PhoneStatusInput::PhoneStatusInput(const PhoneStatusInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caller_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caller_number()) {
    caller_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caller_number(),
      GetArena());
  }
  caller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caller_id()) {
    caller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caller_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.PhoneStatusInput)
}

void PhoneStatusInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhoneStatusInput_hu_2eproto.base);
  caller_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PhoneStatusInput::~PhoneStatusInput() {
  // @@protoc_insertion_point(destructor:HU.PhoneStatusInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhoneStatusInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caller_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PhoneStatusInput::ArenaDtor(void* object) {
  PhoneStatusInput* _this = reinterpret_cast< PhoneStatusInput* >(object);
  (void)_this;
}
void PhoneStatusInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhoneStatusInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhoneStatusInput& PhoneStatusInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhoneStatusInput_hu_2eproto.base);
  return *internal_default_instance();
}


void PhoneStatusInput::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.PhoneStatusInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      caller_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      caller_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneStatusInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string caller_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_caller_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.PhoneStatusInput.caller_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caller_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.PhoneStatusInput.caller_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhoneStatusInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.PhoneStatusInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string caller_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caller_number().data(), static_cast<int>(this->_internal_caller_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.PhoneStatusInput.caller_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_caller_number(), target);
  }

  // optional string caller_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caller_id().data(), static_cast<int>(this->_internal_caller_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.PhoneStatusInput.caller_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.PhoneStatusInput)
  return target;
}

size_t PhoneStatusInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.PhoneStatusInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string caller_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caller_number());
    }

    // optional string caller_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caller_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneStatusInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.PhoneStatusInput)
  GOOGLE_DCHECK_NE(&from, this);
  const PhoneStatusInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhoneStatusInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.PhoneStatusInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.PhoneStatusInput)
    MergeFrom(*source);
  }
}

void PhoneStatusInput::MergeFrom(const PhoneStatusInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.PhoneStatusInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_caller_number(from._internal_caller_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_caller_id(from._internal_caller_id());
    }
  }
}

void PhoneStatusInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.PhoneStatusInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneStatusInput::CopyFrom(const PhoneStatusInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.PhoneStatusInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneStatusInput::IsInitialized() const {
  return true;
}

void PhoneStatusInput::InternalSwap(PhoneStatusInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caller_number_.Swap(&other->caller_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_id_.Swap(&other->caller_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneStatusInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericNotificationRequest::InitAsDefaultInstance() {
}
class GenericNotificationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericNotificationRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GenericNotificationRequest::GenericNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.GenericNotificationRequest)
}
GenericNotificationRequest::GenericNotificationRequest(const GenericNotificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icon(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.GenericNotificationRequest)
}

void GenericNotificationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericNotificationRequest_hu_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenericNotificationRequest::~GenericNotificationRequest() {
  // @@protoc_insertion_point(destructor:HU.GenericNotificationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericNotificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericNotificationRequest::ArenaDtor(void* object) {
  GenericNotificationRequest* _this = reinterpret_cast< GenericNotificationRequest* >(object);
  (void)_this;
}
void GenericNotificationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericNotificationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericNotificationRequest& GenericNotificationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericNotificationRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void GenericNotificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.GenericNotificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericNotificationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.GenericNotificationRequest.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.GenericNotificationRequest.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.GenericNotificationRequest.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericNotificationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.GenericNotificationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.GenericNotificationRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.GenericNotificationRequest.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.GenericNotificationRequest.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.GenericNotificationRequest)
  return target;
}

size_t GenericNotificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.GenericNotificationRequest)
  size_t total_size = 0;

  // required string id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string icon = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericNotificationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.GenericNotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericNotificationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericNotificationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.GenericNotificationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.GenericNotificationRequest)
    MergeFrom(*source);
  }
}

void GenericNotificationRequest::MergeFrom(const GenericNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.GenericNotificationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
  }
}

void GenericNotificationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.GenericNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericNotificationRequest::CopyFrom(const GenericNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.GenericNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericNotificationRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GenericNotificationRequest::InternalSwap(GenericNotificationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericNotificationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericNotificationResponse::InitAsDefaultInstance() {
}
class GenericNotificationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericNotificationResponse>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GenericNotificationResponse::GenericNotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.GenericNotificationResponse)
}
GenericNotificationResponse::GenericNotificationResponse(const GenericNotificationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  handled_ = from.handled_;
  // @@protoc_insertion_point(copy_constructor:HU.GenericNotificationResponse)
}

void GenericNotificationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericNotificationResponse_hu_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  handled_ = false;
}

GenericNotificationResponse::~GenericNotificationResponse() {
  // @@protoc_insertion_point(destructor:HU.GenericNotificationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericNotificationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericNotificationResponse::ArenaDtor(void* object) {
  GenericNotificationResponse* _this = reinterpret_cast< GenericNotificationResponse* >(object);
  (void)_this;
}
void GenericNotificationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericNotificationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericNotificationResponse& GenericNotificationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericNotificationResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void GenericNotificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.GenericNotificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  handled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericNotificationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.GenericNotificationResponse.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool handled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_handled(&has_bits);
          handled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericNotificationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.GenericNotificationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.GenericNotificationResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required bool handled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_handled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.GenericNotificationResponse)
  return target;
}

size_t GenericNotificationResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HU.GenericNotificationResponse)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_handled()) {
    // required bool handled = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GenericNotificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.GenericNotificationResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required bool handled = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericNotificationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.GenericNotificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericNotificationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericNotificationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.GenericNotificationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.GenericNotificationResponse)
    MergeFrom(*source);
  }
}

void GenericNotificationResponse::MergeFrom(const GenericNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.GenericNotificationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      handled_ = from.handled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericNotificationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.GenericNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericNotificationResponse::CopyFrom(const GenericNotificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.GenericNotificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericNotificationResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GenericNotificationResponse::InternalSwap(GenericNotificationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(handled_, other->handled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericNotificationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartGenericNotifications::InitAsDefaultInstance() {
}
class StartGenericNotifications::_Internal {
 public:
};

StartGenericNotifications::StartGenericNotifications(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.StartGenericNotifications)
}
StartGenericNotifications::StartGenericNotifications(const StartGenericNotifications& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.StartGenericNotifications)
}

void StartGenericNotifications::SharedCtor() {
}

StartGenericNotifications::~StartGenericNotifications() {
  // @@protoc_insertion_point(destructor:HU.StartGenericNotifications)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartGenericNotifications::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartGenericNotifications::ArenaDtor(void* object) {
  StartGenericNotifications* _this = reinterpret_cast< StartGenericNotifications* >(object);
  (void)_this;
}
void StartGenericNotifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartGenericNotifications::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartGenericNotifications& StartGenericNotifications::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartGenericNotifications_hu_2eproto.base);
  return *internal_default_instance();
}


void StartGenericNotifications::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.StartGenericNotifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartGenericNotifications::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartGenericNotifications::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.StartGenericNotifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.StartGenericNotifications)
  return target;
}

size_t StartGenericNotifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.StartGenericNotifications)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartGenericNotifications::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.StartGenericNotifications)
  GOOGLE_DCHECK_NE(&from, this);
  const StartGenericNotifications* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartGenericNotifications>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.StartGenericNotifications)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.StartGenericNotifications)
    MergeFrom(*source);
  }
}

void StartGenericNotifications::MergeFrom(const StartGenericNotifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.StartGenericNotifications)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartGenericNotifications::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.StartGenericNotifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGenericNotifications::CopyFrom(const StartGenericNotifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.StartGenericNotifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGenericNotifications::IsInitialized() const {
  return true;
}

void StartGenericNotifications::InternalSwap(StartGenericNotifications* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartGenericNotifications::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopGenericNotifications::InitAsDefaultInstance() {
}
class StopGenericNotifications::_Internal {
 public:
};

StopGenericNotifications::StopGenericNotifications(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.StopGenericNotifications)
}
StopGenericNotifications::StopGenericNotifications(const StopGenericNotifications& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HU.StopGenericNotifications)
}

void StopGenericNotifications::SharedCtor() {
}

StopGenericNotifications::~StopGenericNotifications() {
  // @@protoc_insertion_point(destructor:HU.StopGenericNotifications)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopGenericNotifications::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopGenericNotifications::ArenaDtor(void* object) {
  StopGenericNotifications* _this = reinterpret_cast< StopGenericNotifications* >(object);
  (void)_this;
}
void StopGenericNotifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopGenericNotifications::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopGenericNotifications& StopGenericNotifications::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopGenericNotifications_hu_2eproto.base);
  return *internal_default_instance();
}


void StopGenericNotifications::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.StopGenericNotifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopGenericNotifications::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopGenericNotifications::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.StopGenericNotifications)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.StopGenericNotifications)
  return target;
}

size_t StopGenericNotifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.StopGenericNotifications)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopGenericNotifications::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.StopGenericNotifications)
  GOOGLE_DCHECK_NE(&from, this);
  const StopGenericNotifications* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopGenericNotifications>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.StopGenericNotifications)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.StopGenericNotifications)
    MergeFrom(*source);
  }
}

void StopGenericNotifications::MergeFrom(const StopGenericNotifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.StopGenericNotifications)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopGenericNotifications::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.StopGenericNotifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopGenericNotifications::CopyFrom(const StopGenericNotifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.StopGenericNotifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopGenericNotifications::IsInitialized() const {
  return true;
}

void StopGenericNotifications::InternalSwap(StopGenericNotifications* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopGenericNotifications::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothPairingRequest::InitAsDefaultInstance() {
}
class BluetoothPairingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BluetoothPairingRequest>()._has_bits_);
  static void set_has_phone_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pairing_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BluetoothPairingRequest::BluetoothPairingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.BluetoothPairingRequest)
}
BluetoothPairingRequest::BluetoothPairingRequest(const BluetoothPairingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phone_address()) {
    phone_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phone_address(),
      GetArena());
  }
  pairing_method_ = from.pairing_method_;
  // @@protoc_insertion_point(copy_constructor:HU.BluetoothPairingRequest)
}

void BluetoothPairingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothPairingRequest_hu_2eproto.base);
  phone_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairing_method_ = 1;
}

BluetoothPairingRequest::~BluetoothPairingRequest() {
  // @@protoc_insertion_point(destructor:HU.BluetoothPairingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BluetoothPairingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothPairingRequest::ArenaDtor(void* object) {
  BluetoothPairingRequest* _this = reinterpret_cast< BluetoothPairingRequest* >(object);
  (void)_this;
}
void BluetoothPairingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothPairingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothPairingRequest& BluetoothPairingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothPairingRequest_hu_2eproto.base);
  return *internal_default_instance();
}


void BluetoothPairingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.BluetoothPairingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      phone_address_.ClearNonDefaultToEmpty();
    }
    pairing_method_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BluetoothPairingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string phone_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_phone_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.BluetoothPairingRequest.phone_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.BluetoothPairingMethod pairing_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::BluetoothPairingMethod_IsValid(val))) {
            _internal_set_pairing_method(static_cast<::HU::BluetoothPairingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothPairingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.BluetoothPairingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string phone_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phone_address().data(), static_cast<int>(this->_internal_phone_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.BluetoothPairingRequest.phone_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phone_address(), target);
  }

  // optional .HU.BluetoothPairingMethod pairing_method = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pairing_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.BluetoothPairingRequest)
  return target;
}

size_t BluetoothPairingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.BluetoothPairingRequest)
  size_t total_size = 0;

  // required string phone_address = 1;
  if (_internal_has_phone_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_address());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .HU.BluetoothPairingMethod pairing_method = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pairing_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothPairingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.BluetoothPairingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothPairingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothPairingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.BluetoothPairingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.BluetoothPairingRequest)
    MergeFrom(*source);
  }
}

void BluetoothPairingRequest::MergeFrom(const BluetoothPairingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.BluetoothPairingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_phone_address(from._internal_phone_address());
    }
    if (cached_has_bits & 0x00000002u) {
      pairing_method_ = from.pairing_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BluetoothPairingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.BluetoothPairingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothPairingRequest::CopyFrom(const BluetoothPairingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.BluetoothPairingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothPairingRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BluetoothPairingRequest::InternalSwap(BluetoothPairingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phone_address_.Swap(&other->phone_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pairing_method_, other->pairing_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothPairingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothPairingResponse::InitAsDefaultInstance() {
}
class BluetoothPairingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BluetoothPairingResponse>()._has_bits_);
  static void set_has_already_paired(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BluetoothPairingResponse::BluetoothPairingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.BluetoothPairingResponse)
}
BluetoothPairingResponse::BluetoothPairingResponse(const BluetoothPairingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&already_paired_, &from.already_paired_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&already_paired_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:HU.BluetoothPairingResponse)
}

void BluetoothPairingResponse::SharedCtor() {
  already_paired_ = false;
  status_ = 1;
}

BluetoothPairingResponse::~BluetoothPairingResponse() {
  // @@protoc_insertion_point(destructor:HU.BluetoothPairingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BluetoothPairingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BluetoothPairingResponse::ArenaDtor(void* object) {
  BluetoothPairingResponse* _this = reinterpret_cast< BluetoothPairingResponse* >(object);
  (void)_this;
}
void BluetoothPairingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothPairingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothPairingResponse& BluetoothPairingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothPairingResponse_hu_2eproto.base);
  return *internal_default_instance();
}


void BluetoothPairingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.BluetoothPairingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    already_paired_ = false;
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BluetoothPairingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool already_paired = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_already_paired(&has_bits);
          already_paired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.BluetoothPairingResponse.PAIRING_STATUS status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::BluetoothPairingResponse_PAIRING_STATUS_IsValid(val))) {
            _internal_set_status(static_cast<::HU::BluetoothPairingResponse_PAIRING_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothPairingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.BluetoothPairingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool already_paired = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_already_paired(), target);
  }

  // optional .HU.BluetoothPairingResponse.PAIRING_STATUS status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.BluetoothPairingResponse)
  return target;
}

size_t BluetoothPairingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.BluetoothPairingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool already_paired = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .HU.BluetoothPairingResponse.PAIRING_STATUS status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothPairingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.BluetoothPairingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothPairingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothPairingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.BluetoothPairingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.BluetoothPairingResponse)
    MergeFrom(*source);
  }
}

void BluetoothPairingResponse::MergeFrom(const BluetoothPairingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.BluetoothPairingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      already_paired_ = from.already_paired_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BluetoothPairingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.BluetoothPairingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothPairingResponse::CopyFrom(const BluetoothPairingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.BluetoothPairingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothPairingResponse::IsInitialized() const {
  return true;
}

void BluetoothPairingResponse::InternalSwap(BluetoothPairingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(already_paired_, other->already_paired_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothPairingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothAuthData::InitAsDefaultInstance() {
}
class BluetoothAuthData::_Internal {
 public:
  using HasBits = decltype(std::declval<BluetoothAuthData>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BluetoothAuthData::BluetoothAuthData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.BluetoothAuthData)
}
BluetoothAuthData::BluetoothAuthData(const BluetoothAuthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:HU.BluetoothAuthData)
}

void BluetoothAuthData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothAuthData_hu_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BluetoothAuthData::~BluetoothAuthData() {
  // @@protoc_insertion_point(destructor:HU.BluetoothAuthData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BluetoothAuthData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothAuthData::ArenaDtor(void* object) {
  BluetoothAuthData* _this = reinterpret_cast< BluetoothAuthData* >(object);
  (void)_this;
}
void BluetoothAuthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothAuthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothAuthData& BluetoothAuthData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothAuthData_hu_2eproto.base);
  return *internal_default_instance();
}


void BluetoothAuthData::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.BluetoothAuthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BluetoothAuthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.BluetoothAuthData.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothAuthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.BluetoothAuthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.BluetoothAuthData.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.BluetoothAuthData)
  return target;
}

size_t BluetoothAuthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.BluetoothAuthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothAuthData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.BluetoothAuthData)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothAuthData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothAuthData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.BluetoothAuthData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.BluetoothAuthData)
    MergeFrom(*source);
  }
}

void BluetoothAuthData::MergeFrom(const BluetoothAuthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.BluetoothAuthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void BluetoothAuthData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.BluetoothAuthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothAuthData::CopyFrom(const BluetoothAuthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.BluetoothAuthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothAuthData::IsInitialized() const {
  return true;
}

void BluetoothAuthData::InternalSwap(BluetoothAuthData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothAuthData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NAVMessagesStatus::InitAsDefaultInstance() {
}
class NAVMessagesStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<NAVMessagesStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NAVMessagesStatus::NAVMessagesStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.NAVMessagesStatus)
}
NAVMessagesStatus::NAVMessagesStatus(const NAVMessagesStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:HU.NAVMessagesStatus)
}

void NAVMessagesStatus::SharedCtor() {
  status_ = 1;
}

NAVMessagesStatus::~NAVMessagesStatus() {
  // @@protoc_insertion_point(destructor:HU.NAVMessagesStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NAVMessagesStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NAVMessagesStatus::ArenaDtor(void* object) {
  NAVMessagesStatus* _this = reinterpret_cast< NAVMessagesStatus* >(object);
  (void)_this;
}
void NAVMessagesStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NAVMessagesStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NAVMessagesStatus& NAVMessagesStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NAVMessagesStatus_hu_2eproto.base);
  return *internal_default_instance();
}


void NAVMessagesStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.NAVMessagesStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NAVMessagesStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .HU.NAVMessagesStatus.STATUS status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::NAVMessagesStatus_STATUS_IsValid(val))) {
            _internal_set_status(static_cast<::HU::NAVMessagesStatus_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NAVMessagesStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.NAVMessagesStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .HU.NAVMessagesStatus.STATUS status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.NAVMessagesStatus)
  return target;
}

size_t NAVMessagesStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.NAVMessagesStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .HU.NAVMessagesStatus.STATUS status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NAVMessagesStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.NAVMessagesStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const NAVMessagesStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NAVMessagesStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.NAVMessagesStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.NAVMessagesStatus)
    MergeFrom(*source);
  }
}

void NAVMessagesStatus::MergeFrom(const NAVMessagesStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.NAVMessagesStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void NAVMessagesStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.NAVMessagesStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAVMessagesStatus::CopyFrom(const NAVMessagesStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.NAVMessagesStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAVMessagesStatus::IsInitialized() const {
  return true;
}

void NAVMessagesStatus::InternalSwap(NAVMessagesStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NAVMessagesStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NAVTurnMessage::InitAsDefaultInstance() {
}
class NAVTurnMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NAVTurnMessage>()._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_turn_side(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_turn_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_turn_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_turn_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

NAVTurnMessage::NAVTurnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.NAVTurnMessage)
}
NAVTurnMessage::NAVTurnMessage(const NAVTurnMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_name()) {
    event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_event_name(),
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  ::memcpy(&turn_event_, &from.turn_event_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_side_) -
    reinterpret_cast<char*>(&turn_event_)) + sizeof(turn_side_));
  // @@protoc_insertion_point(copy_constructor:HU.NAVTurnMessage)
}

void NAVTurnMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NAVTurnMessage_hu_2eproto.base);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&turn_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_angle_) -
      reinterpret_cast<char*>(&turn_event_)) + sizeof(turn_angle_));
  turn_side_ = 1;
}

NAVTurnMessage::~NAVTurnMessage() {
  // @@protoc_insertion_point(destructor:HU.NAVTurnMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NAVTurnMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NAVTurnMessage::ArenaDtor(void* object) {
  NAVTurnMessage* _this = reinterpret_cast< NAVTurnMessage* >(object);
  (void)_this;
}
void NAVTurnMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NAVTurnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NAVTurnMessage& NAVTurnMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NAVTurnMessage_hu_2eproto.base);
  return *internal_default_instance();
}


void NAVTurnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.NAVTurnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&turn_event_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&turn_angle_) -
        reinterpret_cast<char*>(&turn_event_)) + sizeof(turn_angle_));
    turn_side_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NAVTurnMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HU.NAVTurnMessage.event_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.NAVTurnMessage.TURN_SIDE turn_side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::NAVTurnMessage_TURN_SIDE_IsValid(val))) {
            _internal_set_turn_side(static_cast<::HU::NAVTurnMessage_TURN_SIDE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .HU.NAVTurnMessage.TURN_EVENT turn_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::NAVTurnMessage_TURN_EVENT_IsValid(val))) {
            _internal_set_turn_event(static_cast<::HU::NAVTurnMessage_TURN_EVENT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 turn_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_turn_number(&has_bits);
          turn_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 turn_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_turn_angle(&has_bits);
          turn_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NAVTurnMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.NAVTurnMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HU.NAVTurnMessage.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional .HU.NAVTurnMessage.TURN_SIDE turn_side = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_turn_side(), target);
  }

  // optional .HU.NAVTurnMessage.TURN_EVENT turn_event = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_turn_event(), target);
  }

  // optional bytes image = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_image(), target);
  }

  // optional int32 turn_number = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_turn_number(), target);
  }

  // optional int32 turn_angle = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_turn_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.NAVTurnMessage)
  return target;
}

size_t NAVTurnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.NAVTurnMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional bytes image = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image());
    }

    // optional .HU.NAVTurnMessage.TURN_EVENT turn_event = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_event());
    }

    // optional int32 turn_number = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_turn_number());
    }

    // optional int32 turn_angle = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_turn_angle());
    }

    // optional .HU.NAVTurnMessage.TURN_SIDE turn_side = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_side());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NAVTurnMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.NAVTurnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NAVTurnMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NAVTurnMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.NAVTurnMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.NAVTurnMessage)
    MergeFrom(*source);
  }
}

void NAVTurnMessage::MergeFrom(const NAVTurnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.NAVTurnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      turn_event_ = from.turn_event_;
    }
    if (cached_has_bits & 0x00000008u) {
      turn_number_ = from.turn_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      turn_angle_ = from.turn_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      turn_side_ = from.turn_side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NAVTurnMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.NAVTurnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAVTurnMessage::CopyFrom(const NAVTurnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.NAVTurnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAVTurnMessage::IsInitialized() const {
  return true;
}

void NAVTurnMessage::InternalSwap(NAVTurnMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NAVTurnMessage, turn_angle_)
      + sizeof(NAVTurnMessage::turn_angle_)
      - PROTOBUF_FIELD_OFFSET(NAVTurnMessage, turn_event_)>(
          reinterpret_cast<char*>(&turn_event_),
          reinterpret_cast<char*>(&other->turn_event_));
  swap(turn_side_, other->turn_side_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NAVTurnMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NAVDistanceMessage::InitAsDefaultInstance() {
}
class NAVDistanceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NAVDistanceMessage>()._has_bits_);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_until(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_distance_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NAVDistanceMessage::NAVDistanceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HU.NAVDistanceMessage)
}
NAVDistanceMessage::NAVDistanceMessage(const NAVDistanceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_distance_unit_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(display_distance_unit_));
  // @@protoc_insertion_point(copy_constructor:HU.NAVDistanceMessage)
}

void NAVDistanceMessage::SharedCtor() {
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_distance_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(display_distance_));
  display_distance_unit_ = 1;
}

NAVDistanceMessage::~NAVDistanceMessage() {
  // @@protoc_insertion_point(destructor:HU.NAVDistanceMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NAVDistanceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NAVDistanceMessage::ArenaDtor(void* object) {
  NAVDistanceMessage* _this = reinterpret_cast< NAVDistanceMessage* >(object);
  (void)_this;
}
void NAVDistanceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NAVDistanceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NAVDistanceMessage& NAVDistanceMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NAVDistanceMessage_hu_2eproto.base);
  return *internal_default_instance();
}


void NAVDistanceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HU.NAVDistanceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_distance_) -
        reinterpret_cast<char*>(&distance_)) + sizeof(display_distance_));
    display_distance_unit_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NAVDistanceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_until = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_until(&has_bits);
          time_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 display_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_display_distance(&has_bits);
          display_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .HU.NAVDistanceMessage.DISPLAY_DISTANCE_UNIT display_distance_unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::HU::NAVDistanceMessage_DISPLAY_DISTANCE_UNIT_IsValid(val))) {
            _internal_set_display_distance_unit(static_cast<::HU::NAVDistanceMessage_DISPLAY_DISTANCE_UNIT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NAVDistanceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HU.NAVDistanceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_distance(), target);
  }

  // optional int32 time_until = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_until(), target);
  }

  // optional uint64 display_distance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_display_distance(), target);
  }

  // optional .HU.NAVDistanceMessage.DISPLAY_DISTANCE_UNIT display_distance_unit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_display_distance_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HU.NAVDistanceMessage)
  return target;
}

size_t NAVDistanceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HU.NAVDistanceMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_distance());
    }

    // optional int32 time_until = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_until());
    }

    // optional uint64 display_distance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_display_distance());
    }

    // optional .HU.NAVDistanceMessage.DISPLAY_DISTANCE_UNIT display_distance_unit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_display_distance_unit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NAVDistanceMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HU.NAVDistanceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NAVDistanceMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NAVDistanceMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HU.NAVDistanceMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HU.NAVDistanceMessage)
    MergeFrom(*source);
  }
}

void NAVDistanceMessage::MergeFrom(const NAVDistanceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HU.NAVDistanceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_until_ = from.time_until_;
    }
    if (cached_has_bits & 0x00000004u) {
      display_distance_ = from.display_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_distance_unit_ = from.display_distance_unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NAVDistanceMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HU.NAVDistanceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAVDistanceMessage::CopyFrom(const NAVDistanceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HU.NAVDistanceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAVDistanceMessage::IsInitialized() const {
  return true;
}

void NAVDistanceMessage::InternalSwap(NAVDistanceMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NAVDistanceMessage, display_distance_)
      + sizeof(NAVDistanceMessage::display_distance_)
      - PROTOBUF_FIELD_OFFSET(NAVDistanceMessage, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
  swap(display_distance_unit_, other->display_distance_unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NAVDistanceMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace HU
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HU::ButtonInfo* Arena::CreateMaybeMessage< ::HU::ButtonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ButtonInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ButtonInfoWrapper* Arena::CreateMaybeMessage< ::HU::ButtonInfoWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ButtonInfoWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::TouchInfo_Location* Arena::CreateMaybeMessage< ::HU::TouchInfo_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::TouchInfo_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::TouchInfo* Arena::CreateMaybeMessage< ::HU::TouchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::TouchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::RelativeInputEvent* Arena::CreateMaybeMessage< ::HU::RelativeInputEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::RelativeInputEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::AbsoluteInputEvent* Arena::CreateMaybeMessage< ::HU::AbsoluteInputEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::AbsoluteInputEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::AbsoluteInputEventWrapper* Arena::CreateMaybeMessage< ::HU::AbsoluteInputEventWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::AbsoluteInputEventWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::RelativeInputEventWrapper* Arena::CreateMaybeMessage< ::HU::RelativeInputEventWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::RelativeInputEventWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::InputEvent* Arena::CreateMaybeMessage< ::HU::InputEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::InputEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::BindingRequest* Arena::CreateMaybeMessage< ::HU::BindingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::BindingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::BindingResponse* Arena::CreateMaybeMessage< ::HU::BindingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::BindingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_LocationData* Arena::CreateMaybeMessage< ::HU::SensorEvent_LocationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_LocationData >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_NightMode* Arena::CreateMaybeMessage< ::HU::SensorEvent_NightMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_NightMode >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_RPM* Arena::CreateMaybeMessage< ::HU::SensorEvent_RPM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_RPM >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_FuelLevel* Arena::CreateMaybeMessage< ::HU::SensorEvent_FuelLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_FuelLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_DrivingStatus* Arena::CreateMaybeMessage< ::HU::SensorEvent_DrivingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_DrivingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_DeadReckoning* Arena::CreateMaybeMessage< ::HU::SensorEvent_DeadReckoning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_DeadReckoning >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_CompassData* Arena::CreateMaybeMessage< ::HU::SensorEvent_CompassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_CompassData >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_SpeedData* Arena::CreateMaybeMessage< ::HU::SensorEvent_SpeedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_SpeedData >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_OdometerData* Arena::CreateMaybeMessage< ::HU::SensorEvent_OdometerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_OdometerData >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_ParkingBreak* Arena::CreateMaybeMessage< ::HU::SensorEvent_ParkingBreak >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_ParkingBreak >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_Passenger* Arena::CreateMaybeMessage< ::HU::SensorEvent_Passenger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_Passenger >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_Diagnostics* Arena::CreateMaybeMessage< ::HU::SensorEvent_Diagnostics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_Diagnostics >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_Environment* Arena::CreateMaybeMessage< ::HU::SensorEvent_Environment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_Environment >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_HVAC* Arena::CreateMaybeMessage< ::HU::SensorEvent_HVAC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_HVAC >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_Accel* Arena::CreateMaybeMessage< ::HU::SensorEvent_Accel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_Accel >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_Gyro* Arena::CreateMaybeMessage< ::HU::SensorEvent_Gyro >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_Gyro >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_Door* Arena::CreateMaybeMessage< ::HU::SensorEvent_Door >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_Door >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_Light* Arena::CreateMaybeMessage< ::HU::SensorEvent_Light >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_Light >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent_GearData* Arena::CreateMaybeMessage< ::HU::SensorEvent_GearData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent_GearData >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorEvent* Arena::CreateMaybeMessage< ::HU::SensorEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::AudioCofig* Arena::CreateMaybeMessage< ::HU::AudioCofig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::AudioCofig >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_SensorChannel_Sensor* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_SensorChannel_Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_SensorChannel_Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_SensorChannel* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_SensorChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_SensorChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_OutputStreamChannel_VideoConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_OutputStreamChannel* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_OutputStreamChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_OutputStreamChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_InputEventChannel_TouchScreenConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_InputEventChannel* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_InputEventChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_InputEventChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_InputStreamChannel* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_InputStreamChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_InputStreamChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_BluetoothService* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_BluetoothService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_BluetoothService >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_NavigationStatusService_ImageOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_NavigationStatusService* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_NavigationStatusService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_NavigationStatusService >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_PhoneStatusService* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_PhoneStatusService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_PhoneStatusService >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_VendorExtensionService* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_VendorExtensionService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_VendorExtensionService >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor_GenericNotificationService* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor_GenericNotificationService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor_GenericNotificationService >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelDescriptor* Arena::CreateMaybeMessage< ::HU::ChannelDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ServiceDiscoveryRequest* Arena::CreateMaybeMessage< ::HU::ServiceDiscoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ServiceDiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ServiceDiscoveryResponse* Arena::CreateMaybeMessage< ::HU::ServiceDiscoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ServiceDiscoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelOpenRequest* Arena::CreateMaybeMessage< ::HU::ChannelOpenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelOpenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ChannelOpenResponse* Arena::CreateMaybeMessage< ::HU::ChannelOpenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ChannelOpenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::PingRequest* Arena::CreateMaybeMessage< ::HU::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::PingResponse* Arena::CreateMaybeMessage< ::HU::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ShutdownRequest* Arena::CreateMaybeMessage< ::HU::ShutdownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ShutdownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::ShutdownResponse* Arena::CreateMaybeMessage< ::HU::ShutdownResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::ShutdownResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::MediaSetupRequest* Arena::CreateMaybeMessage< ::HU::MediaSetupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::MediaSetupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::MediaSetupResponse* Arena::CreateMaybeMessage< ::HU::MediaSetupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::MediaSetupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::MediaStopRequest* Arena::CreateMaybeMessage< ::HU::MediaStopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::MediaStopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::MediaStartRequest* Arena::CreateMaybeMessage< ::HU::MediaStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::MediaStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::MediaAck* Arena::CreateMaybeMessage< ::HU::MediaAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::MediaAck >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::MicRequest* Arena::CreateMaybeMessage< ::HU::MicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::MicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::MicResponse* Arena::CreateMaybeMessage< ::HU::MicResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::MicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::VideoFocusRequest* Arena::CreateMaybeMessage< ::HU::VideoFocusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::VideoFocusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::VideoFocus* Arena::CreateMaybeMessage< ::HU::VideoFocus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::VideoFocus >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorStartRequest* Arena::CreateMaybeMessage< ::HU::SensorStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::SensorStartResponse* Arena::CreateMaybeMessage< ::HU::SensorStartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::SensorStartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::NavigationFocusRequest* Arena::CreateMaybeMessage< ::HU::NavigationFocusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::NavigationFocusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::NavigationFocusResponse* Arena::CreateMaybeMessage< ::HU::NavigationFocusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::NavigationFocusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::VoiceSessionRequest* Arena::CreateMaybeMessage< ::HU::VoiceSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::VoiceSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::AudioFocusRequest* Arena::CreateMaybeMessage< ::HU::AudioFocusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::AudioFocusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::AudioFocusResponse* Arena::CreateMaybeMessage< ::HU::AudioFocusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::AudioFocusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::AuthCompleteResponse* Arena::CreateMaybeMessage< ::HU::AuthCompleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::AuthCompleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::PhoneStatus_Call* Arena::CreateMaybeMessage< ::HU::PhoneStatus_Call >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::PhoneStatus_Call >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::PhoneStatus* Arena::CreateMaybeMessage< ::HU::PhoneStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::PhoneStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::PhoneStatusInput* Arena::CreateMaybeMessage< ::HU::PhoneStatusInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::PhoneStatusInput >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::GenericNotificationRequest* Arena::CreateMaybeMessage< ::HU::GenericNotificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::GenericNotificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::GenericNotificationResponse* Arena::CreateMaybeMessage< ::HU::GenericNotificationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::GenericNotificationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::StartGenericNotifications* Arena::CreateMaybeMessage< ::HU::StartGenericNotifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::StartGenericNotifications >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::StopGenericNotifications* Arena::CreateMaybeMessage< ::HU::StopGenericNotifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::StopGenericNotifications >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::BluetoothPairingRequest* Arena::CreateMaybeMessage< ::HU::BluetoothPairingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::BluetoothPairingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::BluetoothPairingResponse* Arena::CreateMaybeMessage< ::HU::BluetoothPairingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::BluetoothPairingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::BluetoothAuthData* Arena::CreateMaybeMessage< ::HU::BluetoothAuthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::BluetoothAuthData >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::NAVMessagesStatus* Arena::CreateMaybeMessage< ::HU::NAVMessagesStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::NAVMessagesStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::NAVTurnMessage* Arena::CreateMaybeMessage< ::HU::NAVTurnMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::NAVTurnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::HU::NAVDistanceMessage* Arena::CreateMaybeMessage< ::HU::NAVDistanceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HU::NAVDistanceMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
